
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009aec  08009aec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aec  08009aec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  20000074  08009b68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  08009b68  00021230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d619  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff4  00000000  00000000  0003d6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  000416b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001938  00000000  00000000  000431a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf87  00000000  00000000  00044ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8b3  00000000  00000000  00071a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011719f  00000000  00000000  0008d31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a44b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007674  00000000  00000000  001a450c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099a0 	.word	0x080099a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080099a0 	.word	0x080099a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__NVIC_GetPriorityGrouping+0x18>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	f003 0307 	and.w	r3, r3, #7
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db0b      	blt.n	80002ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 021f 	and.w	r2, r3, #31
 80002d8:	4907      	ldr	r1, [pc, #28]	; (80002f8 <__NVIC_EnableIRQ+0x38>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	095b      	lsrs	r3, r3, #5
 80002e0:	2001      	movs	r0, #1
 80002e2:	fa00 f202 	lsl.w	r2, r0, r2
 80002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100

080002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030c:	2b00      	cmp	r3, #0
 800030e:	db0a      	blt.n	8000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	b2da      	uxtb	r2, r3
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <__NVIC_SetPriority+0x4c>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000324:	e00a      	b.n	800033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <__NVIC_SetPriority+0x50>)
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	3b04      	subs	r3, #4
 8000334:	0112      	lsls	r2, r2, #4
 8000336:	b2d2      	uxtb	r2, r2
 8000338:	440b      	add	r3, r1
 800033a:	761a      	strb	r2, [r3, #24]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000350:	b480      	push	{r7}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f003 0307 	and.w	r3, r3, #7
 8000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	f1c3 0307 	rsb	r3, r3, #7
 800036a:	2b04      	cmp	r3, #4
 800036c:	bf28      	it	cs
 800036e:	2304      	movcs	r3, #4
 8000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3304      	adds	r3, #4
 8000376:	2b06      	cmp	r3, #6
 8000378:	d902      	bls.n	8000380 <NVIC_EncodePriority+0x30>
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3b03      	subs	r3, #3
 800037e:	e000      	b.n	8000382 <NVIC_EncodePriority+0x32>
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 32ff 	mov.w	r2, #4294967295
 8000388:	69bb      	ldr	r3, [r7, #24]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	43da      	mvns	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	401a      	ands	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000398:	f04f 31ff 	mov.w	r1, #4294967295
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	43d9      	mvns	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a8:	4313      	orrs	r3, r2
         );
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3724      	adds	r7, #36	; 0x24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0201 	orr.w	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b20      	cmp	r3, #32
 8000414:	d101      	bne.n	800041a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000416:	2301      	movs	r3, #1
 8000418:	e000      	b.n	800041c <LL_USART_IsActiveFlag_RXNE+0x1a>
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800044e:	b480      	push	{r7}
 8000450:	b089      	sub	sp, #36	; 0x24
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	e853 3f00 	ldrex	r3, [r3]
 8000460:	60bb      	str	r3, [r7, #8]
   return(result);
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	f043 0320 	orr.w	r3, r3, #32
 8000468:	61fb      	str	r3, [r7, #28]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	69fa      	ldr	r2, [r7, #28]
 800046e:	61ba      	str	r2, [r7, #24]
 8000470:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000472:	6979      	ldr	r1, [r7, #20]
 8000474:	69ba      	ldr	r2, [r7, #24]
 8000476:	e841 2300 	strex	r3, r2, [r1]
 800047a:	613b      	str	r3, [r7, #16]
   return(result);
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1e9      	bne.n	8000456 <LL_USART_EnableIT_RXNE+0x8>
}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	3724      	adds	r7, #36	; 0x24
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8000490:	b480      	push	{r7}
 8000492:	b089      	sub	sp, #36	; 0x24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	e853 3f00 	ldrex	r3, [r3]
 80004a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004aa:	61fb      	str	r3, [r7, #28]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	69fa      	ldr	r2, [r7, #28]
 80004b0:	61ba      	str	r2, [r7, #24]
 80004b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80004b4:	6979      	ldr	r1, [r7, #20]
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	e841 2300 	strex	r3, r2, [r1]
 80004bc:	613b      	str	r3, [r7, #16]
   return(result);
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1e9      	bne.n	8000498 <LL_USART_EnableIT_TXE+0x8>
}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b089      	sub	sp, #36	; 0x24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	e853 3f00 	ldrex	r3, [r3]
 80004e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004ec:	61fb      	str	r3, [r7, #28]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	69fa      	ldr	r2, [r7, #28]
 80004f2:	61ba      	str	r2, [r7, #24]
 80004f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80004f6:	6979      	ldr	r1, [r7, #20]
 80004f8:	69ba      	ldr	r2, [r7, #24]
 80004fa:	e841 2300 	strex	r3, r2, [r1]
 80004fe:	613b      	str	r3, [r7, #16]
   return(result);
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1e9      	bne.n	80004da <LL_USART_DisableIT_TXE+0x8>
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3724      	adds	r7, #36	; 0x24
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000520:	b29b      	uxth	r3, r3
 8000522:	b2db      	uxtb	r3, r3
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	b29a      	uxth	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	4907      	ldr	r1, [pc, #28]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	bf00      	nop
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800058a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800058c:	4907      	ldr	r1, [pc, #28]	; (80005ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000596:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4013      	ands	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000

080005b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80005c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <sendchar>:
QueueHandle_t rx_queue_2;

SemaphoreHandle_t uart_1_mutex = NULL;
SemaphoreHandle_t uart_2_mutex = NULL;

void sendchar(char c, char usart){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	if(usart == USART_1){
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d10b      	bne.n	800060e <sendchar+0x2e>
		LL_USART_EnableIT_TXE(USART1);
 80005f6:	480f      	ldr	r0, [pc, #60]	; (8000634 <sendchar+0x54>)
 80005f8:	f7ff ff4a 	bl	8000490 <LL_USART_EnableIT_TXE>
		xQueueSend(tx_queue_1, &c, HAL_MAX_DELAY);
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <sendchar+0x58>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	1df9      	adds	r1, r7, #7
 8000602:	2300      	movs	r3, #0
 8000604:	f04f 32ff 	mov.w	r2, #4294967295
 8000608:	f006 fe78 	bl	80072fc <xQueueGenericSend>
	}
	else if( usart == USART_2){
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
		LL_USART_EnableIT_TXE(USART2);
	}
}
 800060c:	e00d      	b.n	800062a <sendchar+0x4a>
	else if( usart == USART_2){
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d10a      	bne.n	800062a <sendchar+0x4a>
		xQueueSend(tx_queue_2, &c, HAL_MAX_DELAY);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <sendchar+0x5c>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	1df9      	adds	r1, r7, #7
 800061a:	2300      	movs	r3, #0
 800061c:	f04f 32ff 	mov.w	r2, #4294967295
 8000620:	f006 fe6c 	bl	80072fc <xQueueGenericSend>
		LL_USART_EnableIT_TXE(USART2);
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <sendchar+0x60>)
 8000626:	f7ff ff33 	bl	8000490 <LL_USART_EnableIT_TXE>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40013800 	.word	0x40013800
 8000638:	200004ac 	.word	0x200004ac
 800063c:	200004b4 	.word	0x200004b4
 8000640:	40004400 	.word	0x40004400

08000644 <sendString>:

void sendString(char * str, char usart){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	while(*str != 0){
 8000650:	e009      	b.n	8000666 <sendString+0x22>
		sendchar(*str, usart);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	78fa      	ldrb	r2, [r7, #3]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffc0 	bl	80005e0 <sendchar>
		str++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
	while(*str != 0){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1f1      	bne.n	8000652 <sendString+0xe>
	}
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <getPotentiometerSensor>:
	else if(usart == USART_2)
		xQueueReceive(rx_queue_2, &caracter, HAL_MAX_DELAY);
		return caracter;
}

int16_t getPotentiometerSensor(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <getPotentiometerSensor+0x24>)
 800067e:	f001 fbcb 	bl	8001e18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000682:	f04f 31ff 	mov.w	r1, #4294967295
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <getPotentiometerSensor+0x24>)
 8000688:	f001 fc80 	bl	8001f8c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1);
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <getPotentiometerSensor+0x24>)
 800068e:	f001 fd55 	bl	800213c <HAL_ADC_GetValue>
 8000692:	4603      	mov	r3, r0
 8000694:	b21b      	sxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000344 	.word	0x20000344

080006a0 <potentiometerSensor>:

void potentiometerSensor(void * vParam){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		int16_t valor = getPotentiometerSensor() * 18 / 4095;
 80006a8:	f7ff ffe6 	bl	8000678 <getPotentiometerSensor>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4613      	mov	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4413      	add	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <potentiometerSensor+0x50>)
 80006ba:	fb82 1203 	smull	r1, r2, r2, r3
 80006be:	441a      	add	r2, r3
 80006c0:	12d2      	asrs	r2, r2, #11
 80006c2:	17db      	asrs	r3, r3, #31
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	82fb      	strh	r3, [r7, #22]
		char valorString[9];
		sprintf(valorString,"P%d\r\n", valor);
 80006c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4908      	ldr	r1, [pc, #32]	; (80006f4 <potentiometerSensor+0x54>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 fdaa 	bl	800922c <siprintf>
		sendString(valorString, USART_1);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffb0 	bl	8000644 <sendString>
		vTaskDelay(1000);
 80006e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e8:	f007 fac6 	bl	8007c78 <vTaskDelay>
	{
 80006ec:	e7dc      	b.n	80006a8 <potentiometerSensor+0x8>
 80006ee:	bf00      	nop
 80006f0:	80080081 	.word	0x80080081
 80006f4:	080099c4 	.word	0x080099c4

080006f8 <readVoltageLdr>:
		user_pwm_setvalue(pwm_value);
	}
}


int16_t readVoltageLdr(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80006fc:	4807      	ldr	r0, [pc, #28]	; (800071c <readVoltageLdr+0x24>)
 80006fe:	f001 fb8b 	bl	8001e18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000702:	f04f 31ff 	mov.w	r1, #4294967295
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <readVoltageLdr+0x24>)
 8000708:	f001 fc40 	bl	8001f8c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc2);
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <readVoltageLdr+0x24>)
 800070e:	f001 fd15 	bl	800213c <HAL_ADC_GetValue>
 8000712:	4603      	mov	r3, r0
 8000714:	b21b      	sxth	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200003a8 	.word	0x200003a8

08000720 <ldr>:


void ldr(void *vParam) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	while (1) {
		int16_t intensity = readVoltageLdr();
 8000728:	f7ff ffe6 	bl	80006f8 <readVoltageLdr>
 800072c:	4603      	mov	r3, r0
 800072e:	82fb      	strh	r3, [r7, #22]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 200);
		char valorString[9];
		sprintf(valorString,"I%d\r\n", intensity);
 8000730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4909      	ldr	r1, [pc, #36]	; (8000760 <ldr+0x40>)
 800073a:	4618      	mov	r0, r3
 800073c:	f008 fd76 	bl	800922c <siprintf>
		sendString(valorString, USART_1);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff7c 	bl	8000644 <sendString>
		vTaskDelay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f007 fa92 	bl	8007c78 <vTaskDelay>
		user_pwm_setvalue(intensity);
 8000754:	8afb      	ldrh	r3, [r7, #22]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fd26 	bl	80011a8 <user_pwm_setvalue>
	while (1) {
 800075c:	e7e4      	b.n	8000728 <ldr+0x8>
 800075e:	bf00      	nop
 8000760:	080099cc 	.word	0x080099cc

08000764 <USART_2_IRQHandler>:
}
*/

//Rotina de tratamento de interrupcao da USART2
void USART_2_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
	if (LL_USART_IsActiveFlag_TXE(USART2)) {
 800076a:	482a      	ldr	r0, [pc, #168]	; (8000814 <USART_2_IRQHandler+0xb0>)
 800076c:	f7ff fe5c 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d026      	beq.n	80007c4 <USART_2_IRQHandler+0x60>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_TXE(USART2)) {
 8000776:	e014      	b.n	80007a2 <USART_2_IRQHandler+0x3e>
			uint8_t byte;
			//Desinfileira um byte para tranmistir
			if (xQueueReceiveFromISR(tx_queue_2, &byte, &contextSwitch) == pdFAIL) {
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <USART_2_IRQHandler+0xb4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f107 020c 	add.w	r2, r7, #12
 8000780:	f107 010b 	add.w	r1, r7, #11
 8000784:	4618      	mov	r0, r3
 8000786:	f006 ff52 	bl	800762e <xQueueReceiveFromISR>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d103      	bne.n	8000798 <USART_2_IRQHandler+0x34>
				//Se a fila de transmissao esta vazia, encerra a transmissao
				LL_USART_DisableIT_TXE(USART2);
 8000790:	4820      	ldr	r0, [pc, #128]	; (8000814 <USART_2_IRQHandler+0xb0>)
 8000792:	f7ff fe9e 	bl	80004d2 <LL_USART_DisableIT_TXE>
 8000796:	e00a      	b.n	80007ae <USART_2_IRQHandler+0x4a>
				break;
			}
			//Envia o byte retirado da fila de transmisao
			LL_USART_TransmitData8(USART2, byte);
 8000798:	7afb      	ldrb	r3, [r7, #11]
 800079a:	4619      	mov	r1, r3
 800079c:	481d      	ldr	r0, [pc, #116]	; (8000814 <USART_2_IRQHandler+0xb0>)
 800079e:	f7ff fec7 	bl	8000530 <LL_USART_TransmitData8>
		while (LL_USART_IsActiveFlag_TXE(USART2)) {
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <USART_2_IRQHandler+0xb0>)
 80007a4:	f7ff fe40 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1e4      	bne.n	8000778 <USART_2_IRQHandler+0x14>
		}
		portYIELD_FROM_ISR(contextSwitch);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <USART_2_IRQHandler+0x60>
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <USART_2_IRQHandler+0xb8>)
 80007b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	f3bf 8f4f 	dsb	sy
 80007c0:	f3bf 8f6f 	isb	sy
	}
	//Se for interrupcao de recepcao
	if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <USART_2_IRQHandler+0xb0>)
 80007c6:	f7ff fe1c 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d01d      	beq.n	800080c <USART_2_IRQHandler+0xa8>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 80007d0:	e00b      	b.n	80007ea <USART_2_IRQHandler+0x86>
			//Copia o byte do regstrador de recepcao
			uint8_t byte =
			LL_USART_ReceiveData8(USART2);
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <USART_2_IRQHandler+0xb0>)
 80007d4:	f7ff fe9e 	bl	8000514 <LL_USART_ReceiveData8>
 80007d8:	4603      	mov	r3, r0
			uint8_t byte =
 80007da:	70fb      	strb	r3, [r7, #3]
			//Enfileira o byte recebido na fila de recepcao
			xQueueSendFromISR(rx_queue_2, &byte, &contextSwitch);
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <USART_2_IRQHandler+0xbc>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	1cf9      	adds	r1, r7, #3
 80007e4:	2300      	movs	r3, #0
 80007e6:	f006 fe87 	bl	80074f8 <xQueueGenericSendFromISR>
		while (LL_USART_IsActiveFlag_RXNE(USART2)) {
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <USART_2_IRQHandler+0xb0>)
 80007ec:	f7ff fe09 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1ed      	bne.n	80007d2 <USART_2_IRQHandler+0x6e>
			// xQueueSendFromISR can return errQUEUE_FULL
		}
		portYIELD_FROM_ISR(contextSwitch);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d007      	beq.n	800080c <USART_2_IRQHandler+0xa8>
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <USART_2_IRQHandler+0xb8>)
 80007fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	f3bf 8f4f 	dsb	sy
 8000808:	f3bf 8f6f 	isb	sy
	}
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	200004b4 	.word	0x200004b4
 800081c:	e000ed04 	.word	0xe000ed04
 8000820:	200004b8 	.word	0x200004b8

08000824 <USART_1_IRQHandler>:

//Rotina de trtaamento da ISR da UART 1
void USART_1_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
	//Se for interrupcao de transmissao
	if (LL_USART_IsActiveFlag_TXE(USART1)) {
 800082a:	482a      	ldr	r0, [pc, #168]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 800082c:	f7ff fdfc 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d026      	beq.n	8000884 <USART_1_IRQHandler+0x60>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000836:	e014      	b.n	8000862 <USART_1_IRQHandler+0x3e>
			uint8_t byte;
			//Desinfileira um byte para tranmistir
			if (xQueueReceiveFromISR(tx_queue_1, &byte, &contextSwitch) == pdFAIL) {
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <USART_1_IRQHandler+0xb4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f107 020c 	add.w	r2, r7, #12
 8000840:	f107 010b 	add.w	r1, r7, #11
 8000844:	4618      	mov	r0, r3
 8000846:	f006 fef2 	bl	800762e <xQueueReceiveFromISR>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d103      	bne.n	8000858 <USART_1_IRQHandler+0x34>
				//Se a fila de transmissao esta vazia, encerra a transmissao
				LL_USART_DisableIT_TXE(USART1);
 8000850:	4820      	ldr	r0, [pc, #128]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 8000852:	f7ff fe3e 	bl	80004d2 <LL_USART_DisableIT_TXE>
 8000856:	e00a      	b.n	800086e <USART_1_IRQHandler+0x4a>
				break;
			}
			//Envia o byte retirado da fila de transmisao
			LL_USART_TransmitData8(USART1, byte);
 8000858:	7afb      	ldrb	r3, [r7, #11]
 800085a:	4619      	mov	r1, r3
 800085c:	481d      	ldr	r0, [pc, #116]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 800085e:	f7ff fe67 	bl	8000530 <LL_USART_TransmitData8>
		while (LL_USART_IsActiveFlag_TXE(USART1)) {
 8000862:	481c      	ldr	r0, [pc, #112]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 8000864:	f7ff fde0 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1e4      	bne.n	8000838 <USART_1_IRQHandler+0x14>
		}
		portYIELD_FROM_ISR(contextSwitch);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d007      	beq.n	8000884 <USART_1_IRQHandler+0x60>
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <USART_1_IRQHandler+0xb8>)
 8000876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	f3bf 8f6f 	isb	sy
	}
	//Se for interrupcao de recepcao
	if (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 8000886:	f7ff fdbc 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d01d      	beq.n	80008cc <USART_1_IRQHandler+0xa8>
		BaseType_t contextSwitch;
		while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 8000890:	e00b      	b.n	80008aa <USART_1_IRQHandler+0x86>
			//Copia o byte do regstrador de recepcao
			uint8_t byte =
			LL_USART_ReceiveData8(USART1);
 8000892:	4810      	ldr	r0, [pc, #64]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 8000894:	f7ff fe3e 	bl	8000514 <LL_USART_ReceiveData8>
 8000898:	4603      	mov	r3, r0
			uint8_t byte =
 800089a:	70fb      	strb	r3, [r7, #3]
			//Enfileira o byte recebido na fila de recepcao
			xQueueSendFromISR(rx_queue_1, &byte, &contextSwitch);
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <USART_1_IRQHandler+0xbc>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	1d3a      	adds	r2, r7, #4
 80008a2:	1cf9      	adds	r1, r7, #3
 80008a4:	2300      	movs	r3, #0
 80008a6:	f006 fe27 	bl	80074f8 <xQueueGenericSendFromISR>
		while (LL_USART_IsActiveFlag_RXNE(USART1)) {
 80008aa:	480a      	ldr	r0, [pc, #40]	; (80008d4 <USART_1_IRQHandler+0xb0>)
 80008ac:	f7ff fda9 	bl	8000402 <LL_USART_IsActiveFlag_RXNE>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1ed      	bne.n	8000892 <USART_1_IRQHandler+0x6e>
			// xQueueSendFromISR can return errQUEUE_FULL
		}
		portYIELD_FROM_ISR(contextSwitch);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d007      	beq.n	80008cc <USART_1_IRQHandler+0xa8>
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <USART_1_IRQHandler+0xb8>)
 80008be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	f3bf 8f4f 	dsb	sy
 80008c8:	f3bf 8f6f 	isb	sy
	}
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	200004ac 	.word	0x200004ac
 80008dc:	e000ed04 	.word	0xe000ed04
 80008e0:	200004b0 	.word	0x200004b0

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 ff09 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f851 	bl	8000994 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008f2:	f000 f8a0 	bl	8000a36 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 fbdf 	bl	80010b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fa:	f000 fb45 	bl	8000f88 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80008fe:	f000 fa8d 	bl	8000e1c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000902:	f000 f8c3 	bl	8000a8c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000906:	f000 f99b 	bl	8000c40 <MX_TIM2_Init>
  MX_ADC2_Init();
 800090a:	f000 f935 	bl	8000b78 <MX_ADC2_Init>
  MX_TIM3_Init();
 800090e:	f000 fa0d 	bl	8000d2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000912:	2108      	movs	r1, #8
 8000914:	4817      	ldr	r0, [pc, #92]	; (8000974 <main+0x90>)
 8000916:	f004 fadf 	bl	8004ed8 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x94>)
 800091c:	1d3c      	adds	r4, r7, #4
 800091e:	461d      	mov	r5, r3
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f006 faf2 	bl	8006f1a <osThreadCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a10      	ldr	r2, [pc, #64]	; (800097c <main+0x98>)
 800093a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xFlagsEventGroup = xEventGroupCreate();
 800093c:	f006 fb4d 	bl	8006fda <xEventGroupCreate>
 8000940:	4603      	mov	r3, r0
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <main+0x9c>)
 8000944:	6013      	str	r3, [r2, #0]
  xTaskCreate(potentiometerSensor, "potentiometerSensor", configMINIMAL_STACK_SIZE, NULL, task_PRIO, NULL);
 8000946:	2300      	movs	r3, #0
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2306      	movs	r3, #6
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <main+0xa0>)
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <main+0xa4>)
 8000956:	f007 f841 	bl	80079dc <xTaskCreate>
  //xTaskCreate(echo_read_task, "echo_read_task", configMINIMAL_STACK_SIZE, NULL, task_PRIO, NULL);
  //xTaskCreate(trig_toggle_task, "trig_toggle_task", configMINIMAL_STACK_SIZE, NULL, task_PRIO, NULL);
  xTaskCreate(ldr, "ldr", configMINIMAL_STACK_SIZE, NULL, 1 , NULL);
 800095a:	2300      	movs	r3, #0
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	2301      	movs	r3, #1
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2300      	movs	r3, #0
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	4909      	ldr	r1, [pc, #36]	; (800098c <main+0xa8>)
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <main+0xac>)
 800096a:	f007 f837 	bl	80079dc <xTaskCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800096e:	f006 facd 	bl	8006f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x8e>
 8000974:	2000040c 	.word	0x2000040c
 8000978:	080099ec 	.word	0x080099ec
 800097c:	200004a4 	.word	0x200004a4
 8000980:	200004a8 	.word	0x200004a8
 8000984:	080099d4 	.word	0x080099d4
 8000988:	080006a1 	.word	0x080006a1
 800098c:	080099e8 	.word	0x080099e8
 8000990:	08000721 	.word	0x08000721

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b096      	sub	sp, #88	; 0x58
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2244      	movs	r2, #68	; 0x44
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f008 fb2c 	bl	8009000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ba:	f002 fe35 	bl	8003628 <HAL_PWREx_ControlVoltageScaling>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c4:	f000 fc2c 	bl	8001220 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c8:	2302      	movs	r3, #2
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d2:	2310      	movs	r3, #16
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009da:	2302      	movs	r3, #2
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009e2:	230a      	movs	r3, #10
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009e6:	2307      	movs	r3, #7
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fe6c 	bl	80036d4 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a02:	f000 fc0d 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fa34 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a2a:	f000 fbf9 	bl	8001220 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3758      	adds	r7, #88	; 0x58
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b0a2      	sub	sp, #136	; 0x88
 8000a3a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2288      	movs	r2, #136	; 0x88
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f008 fadc 	bl	8009000 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000a4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a52:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a70:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fc49 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a80:	f000 fbce 	bl	8001220 <Error_Handler>
  }
}
 8000a84:	bf00      	nop
 8000a86:	3788      	adds	r7, #136	; 0x88
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aae:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ab0:	4a2f      	ldr	r2, [pc, #188]	; (8000b70 <MX_ADC1_Init+0xe4>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0e:	4817      	ldr	r0, [pc, #92]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000b10:	f001 f82c 	bl	8001b6c <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b1a:	f000 fb81 	bl	8001220 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000b2a:	f002 fa1b 	bl	8002f64 <HAL_ADCEx_MultiModeConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b34:	f000 fb74 	bl	8001220 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_ADC1_Init+0xe8>)
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b44:	237f      	movs	r3, #127	; 0x7f
 8000b46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_ADC1_Init+0xe0>)
 8000b56:	f001 fd37 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b60:	f000 fb5e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000344 	.word	0x20000344
 8000b70:	50040000 	.word	0x50040000
 8000b74:	14f00020 	.word	0x14f00020

08000b78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000b90:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <MX_ADC2_Init+0xc0>)
 8000b92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bee:	4811      	ldr	r0, [pc, #68]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000bf0:	f000 ffbc 	bl	8001b6c <HAL_ADC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bfa:	f000 fb11 	bl	8001220 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_ADC2_Init+0xc4>)
 8000c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c02:	2306      	movs	r3, #6
 8000c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c0a:	237f      	movs	r3, #127	; 0x7f
 8000c0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_ADC2_Init+0xbc>)
 8000c1c:	f001 fcd4 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000c26:	f000 fafb 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200003a8 	.word	0x200003a8
 8000c38:	50040100 	.word	0x50040100
 8000c3c:	19200040 	.word	0x19200040

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c7c:	227f      	movs	r2, #127	; 0x7f
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c88:	22c7      	movs	r2, #199	; 0xc7
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c9a:	f003 fff3 	bl	8004c84 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ca4:	f000 fabc 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000cb6:	f004 fcdf 	bl	8005678 <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cc0:	f000 faae 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000cc6:	f004 f8a5 	bl	8004e14 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f000 faa6 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000ce4:	f005 f9ea 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f000 fa97 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	2208      	movs	r2, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000d0a:	f004 fba1 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d14:	f000 fa84 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000d1a:	f000 fb7f 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3738      	adds	r7, #56	; 0x38
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000040c 	.word	0x2000040c

08000d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d60:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <MX_TIM3_Init+0xec>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127-1;
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d66:	227e      	movs	r2, #126	; 0x7e
 8000d68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d72:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d84:	4823      	ldr	r0, [pc, #140]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d86:	f003 ff7d 	bl	8004c84 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d90:	f000 fa46 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000da2:	f004 fc69 	bl	8005678 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000dac:	f000 fa38 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000db2:	f004 f82f 	bl	8004e14 <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dbc:	f000 fa30 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000dd0:	f005 f974 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dda:	f000 fa21 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000df6:	f004 fb2b 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e00:	f000 fa0e 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000e06:	f000 fb09 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000458 	.word	0x20000458
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0b0      	sub	sp, #192	; 0xc0
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2288      	movs	r2, #136	; 0x88
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f008 f8d6 	bl	8009000 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fa54 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e6a:	f000 f9d9 	bl	8001220 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000e6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e72:	f7ff fb9d 	bl	80005b0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff fb6a 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f7ff fb67 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f005 faf4 	bl	800649e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4825      	ldr	r0, [pc, #148]	; (8000f78 <MX_USART1_UART_Init+0x15c>)
 8000ee2:	f005 fadc 	bl	800649e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000ee6:	f7ff f9dd 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2200      	movs	r2, #0
 8000eee:	2105      	movs	r1, #5
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fa2d 	bl	8000350 <NVIC_EncodePriority>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2025      	movs	r0, #37	; 0x25
 8000efc:	f7ff f9fe 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000f00:	2025      	movs	r0, #37	; 0x25
 8000f02:	f7ff f9dd 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f20:	230c      	movs	r3, #12
 8000f22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART1, &USART_InitStruct);
 8000f32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <MX_USART1_UART_Init+0x160>)
 8000f3a:	f005 ff53 	bl	8006de4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <MX_USART1_UART_Init+0x160>)
 8000f40:	f7ff fa49 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_USART1_UART_Init+0x160>)
 8000f46:	f7ff fa36 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  //Inicializa as filas de transmissao e recepcao
  tx_queue_1 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	2080      	movs	r0, #128	; 0x80
 8000f50:	f006 f97a 	bl	8007248 <xQueueGenericCreate>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <MX_USART1_UART_Init+0x164>)
 8000f58:	6013      	str	r3, [r2, #0]
  rx_queue_1 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2005      	movs	r0, #5
 8000f60:	f006 f972 	bl	8007248 <xQueueGenericCreate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <MX_USART1_UART_Init+0x168>)
 8000f68:	6013      	str	r3, [r2, #0]
  //Habilita a interrupcao de recepcao pela USART2
  LL_USART_EnableIT_RXNE(USART1);
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_USART1_UART_Init+0x160>)
 8000f6c:	f7ff fa6f 	bl	800044e <LL_USART_EnableIT_RXNE>

  /* USER CODE END USART1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	37c0      	adds	r7, #192	; 0xc0
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	200004ac 	.word	0x200004ac
 8000f84:	200004b0 	.word	0x200004b0

08000f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0b0      	sub	sp, #192	; 0xc0
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2288      	movs	r2, #136	; 0x88
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f008 f820 	bl	8009000 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f99e 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f923 	bl	8001220 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000fda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fde:	f7ff facf 	bl	8000580 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fab4 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001006:	2307      	movs	r3, #7
 8001008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f005 fa42 	bl	800649e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800101a:	f7ff f943 	bl	80002a4 <__NVIC_GetPriorityGrouping>
 800101e:	4603      	mov	r3, r0
 8001020:	2200      	movs	r2, #0
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f993 	bl	8000350 <NVIC_EncodePriority>
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	2026      	movs	r0, #38	; 0x26
 8001030:	f7ff f964 	bl	80002fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001034:	2026      	movs	r0, #38	; 0x26
 8001036:	f7ff f943 	bl	80002c0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800103a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800103e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001054:	230c      	movs	r3, #12
 8001056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  LL_USART_Init(USART2, &USART_InitStruct);
 8001066:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800106a:	4619      	mov	r1, r3
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <MX_USART2_UART_Init+0x124>)
 800106e:	f005 feb9 	bl	8006de4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001072:	480e      	ldr	r0, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x124>)
 8001074:	f7ff f9af 	bl	80003d6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x124>)
 800107a:	f7ff f99c 	bl	80003b6 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
  //Inicializa as filas de transmissao e recepcao
  tx_queue_2 = xQueueCreate(TX_QUEUE_SIZE, sizeof(uint8_t));
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	2080      	movs	r0, #128	; 0x80
 8001084:	f006 f8e0 	bl	8007248 <xQueueGenericCreate>
 8001088:	4603      	mov	r3, r0
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <MX_USART2_UART_Init+0x128>)
 800108c:	6013      	str	r3, [r2, #0]
  rx_queue_2 = xQueueCreate(RX_QUEUE_SIZE, sizeof(uint8_t));
 800108e:	2200      	movs	r2, #0
 8001090:	2101      	movs	r1, #1
 8001092:	2005      	movs	r0, #5
 8001094:	f006 f8d8 	bl	8007248 <xQueueGenericCreate>
 8001098:	4603      	mov	r3, r0
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <MX_USART2_UART_Init+0x12c>)
 800109c:	6013      	str	r3, [r2, #0]
  //Habilita a interrupcao de recepcao pela USART2
  LL_USART_EnableIT_RXNE(USART2);
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <MX_USART2_UART_Init+0x124>)
 80010a0:	f7ff f9d5 	bl	800044e <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	37c0      	adds	r7, #192	; 0xc0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40004400 	.word	0x40004400
 80010b0:	200004b4 	.word	0x200004b4
 80010b4:	200004b8 	.word	0x200004b8

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a33      	ldr	r2, [pc, #204]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_GPIO_Init+0xe8>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_GPIO_Init+0xe8>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <MX_GPIO_Init+0xe8>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_GPIO_Init+0xe8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_GPIO_Init+0xe8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_GPIO_Init+0xe8>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_GPIO_Init+0xe8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2120      	movs	r1, #32
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f002 fa51 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001140:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_GPIO_Init+0xec>)
 8001152:	f002 f899 	bl	8003288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001156:	2320      	movs	r3, #32
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f002 f88a 	bl	8003288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 f878 	bl	8003288 <HAL_GPIO_Init>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <user_pwm_setvalue>:
	}
}
*/

void user_pwm_setvalue(uint16_t value)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80011b2:	2108      	movs	r1, #8
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <user_pwm_setvalue+0x40>)
 80011b6:	f003 ff95 	bl	80050e4 <HAL_TIM_PWM_Stop>
   TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	; 0x60
 80011bc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2208      	movs	r2, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <user_pwm_setvalue+0x40>)
 80011d4:	f004 f93c 	bl	8005450 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011d8:	2108      	movs	r1, #8
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <user_pwm_setvalue+0x40>)
 80011dc:	f003 fe7c 	bl	8004ed8 <HAL_TIM_PWM_Start>
}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000040c 	.word	0x2000040c

080011ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f005 fedc 	bl	8006fb2 <osDelay>
 80011fa:	e7fb      	b.n	80011f4 <StartDefaultTask+0x8>

080011fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800120e:	f000 fa97 	bl	8001740 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40012c00 	.word	0x40012c00

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_MspInit+0x4c>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	4a10      	ldr	r2, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6613      	str	r3, [r2, #96]	; 0x60
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <HAL_MspInit+0x4c>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_MspInit+0x4c>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_MspInit+0x4c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6593      	str	r3, [r2, #88]	; 0x58
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	210f      	movs	r1, #15
 8001266:	f06f 0001 	mvn.w	r0, #1
 800126a:	f001 ffe3 	bl	8003234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a3c      	ldr	r2, [pc, #240]	; (800138c <HAL_ADC_MspInit+0x110>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d136      	bne.n	800130c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_ADC_MspInit+0x114>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	4a3a      	ldr	r2, [pc, #232]	; (8001390 <HAL_ADC_MspInit+0x114>)
 80012a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80012a8:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_ADC_MspInit+0x114>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d10b      	bne.n	80012c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a37      	ldr	r2, [pc, #220]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_ADC_MspInit+0x118>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012e4:	230b      	movs	r3, #11
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f001 ffc7 	bl	8003288 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2105      	movs	r1, #5
 80012fe:	2012      	movs	r0, #18
 8001300:	f001 ff98 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001304:	2012      	movs	r0, #18
 8001306:	f001 ffb1 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800130a:	e03a      	b.n	8001382 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_ADC_MspInit+0x11c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d135      	bne.n	8001382 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <HAL_ADC_MspInit+0x114>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_ADC_MspInit+0x114>)
 800131e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_ADC_MspInit+0x114>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d10b      	bne.n	8001340 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_ADC_MspInit+0x118>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_ADC_MspInit+0x118>)
 800132e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_ADC_MspInit+0x118>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_ADC_MspInit+0x118>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_ADC_MspInit+0x118>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_ADC_MspInit+0x118>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800135c:	230b      	movs	r3, #11
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f001 ff8b 	bl	8003288 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	2012      	movs	r0, #18
 8001378:	f001 ff5c 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800137c:	2012      	movs	r0, #18
 800137e:	f001 ff75 	bl	800326c <HAL_NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	50040000 	.word	0x50040000
 8001390:	200004bc 	.word	0x200004bc
 8001394:	40021000 	.word	0x40021000
 8001398:	50040100 	.word	0x50040100

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ac:	d114      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	201c      	movs	r0, #28
 80013cc:	f001 ff32 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d0:	201c      	movs	r0, #28
 80013d2:	f001 ff4b 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013d6:	e018      	b.n	800140a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_TIM_Base_MspInit+0x7c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d113      	bne.n	800140a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_TIM_Base_MspInit+0x78>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2105      	movs	r1, #5
 80013fe:	201d      	movs	r0, #29
 8001400:	f001 ff18 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001404:	201d      	movs	r0, #29
 8001406:	f001 ff31 	bl	800326c <HAL_NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40000400 	.word	0x40000400

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800143c:	d11d      	bne.n	800147a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4816      	ldr	r0, [pc, #88]	; (80014cc <HAL_TIM_MspPostInit+0xb0>)
 8001474:	f001 ff08 	bl	8003288 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001478:	e021      	b.n	80014be <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_TIM_MspPostInit+0xb4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d11c      	bne.n	80014be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_TIM_MspPostInit+0xac>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800149c:	2340      	movs	r3, #64	; 0x40
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ac:	2302      	movs	r3, #2
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 fee5 	bl	8003288 <HAL_GPIO_Init>
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	48000400 	.word	0x48000400
 80014d0:	40000400 	.word	0x40000400

080014d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	2019      	movs	r0, #25
 80014ea:	f001 fea3 	bl	8003234 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ee:	2019      	movs	r0, #25
 80014f0:	f001 febc 	bl	800326c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_InitTick+0x9c>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_InitTick+0x9c>)
 80014fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_InitTick+0x9c>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150c:	f107 0210 	add.w	r2, r7, #16
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fe66 	bl	80041e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800151c:	f002 fe4e 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8001520:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <HAL_InitTick+0xa0>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3b01      	subs	r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_InitTick+0xa4>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_InitTick+0xa8>)
 8001534:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_InitTick+0xa4>)
 8001538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_InitTick+0xa4>)
 8001540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001542:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_InitTick+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_InitTick+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <HAL_InitTick+0xa4>)
 8001552:	f003 fb97 	bl	8004c84 <HAL_TIM_Base_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <HAL_InitTick+0xa4>)
 800155e:	f003 fbe9 	bl	8004d34 <HAL_TIM_Base_Start_IT>
 8001562:	4603      	mov	r3, r0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3730      	adds	r7, #48	; 0x30
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	431bde83 	.word	0x431bde83
 8001578:	200004c0 	.word	0x200004c0
 800157c:	40012c00 	.word	0x40012c00

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <ADC1_2_IRQHandler+0x14>)
 80015b2:	f000 fdd1 	bl	8002158 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <ADC1_2_IRQHandler+0x18>)
 80015b8:	f000 fdce 	bl	8002158 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000344 	.word	0x20000344
 80015c4:	200003a8 	.word	0x200003a8

080015c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015ce:	f003 fe1f 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200004c0 	.word	0x200004c0

080015dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM2_IRQHandler+0x10>)
 80015e2:	f003 fe15 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000040c 	.word	0x2000040c

080015f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM3_IRQHandler+0x10>)
 80015f6:	f003 fe0b 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000458 	.word	0x20000458

08001604 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	USART_1_IRQHandler();
 8001608:	f7ff f90c 	bl	8000824 <USART_1_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_2_IRQHandler();
 8001614:	f7ff f8a6 	bl	8000764 <USART_2_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f007 fc9e 	bl	8008f8c <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20018000 	.word	0x20018000
 800167c:	00000400 	.word	0x00000400
 8001680:	2000050c 	.word	0x2000050c
 8001684:	20001230 	.word	0x20001230

08001688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f007 fc5d 	bl	8008f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff f901 	bl	80008e4 <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016f0:	08009af4 	.word	0x08009af4
  ldr r2, =_sbss
 80016f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016f8:	20001230 	.word	0x20001230

080016fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC3_IRQHandler>
	...

08001700 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_Init+0x3c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x3c>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001716:	2003      	movs	r0, #3
 8001718:	f001 fd81 	bl	800321e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171c:	200f      	movs	r0, #15
 800171e:	f7ff fed9 	bl	80014d4 <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	e001      	b.n	8001732 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800172e:	f7ff fd7d 	bl	800122c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001732:	79fb      	ldrb	r3, [r7, #7]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008
 8001764:	20000510 	.word	0x20000510

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000510 	.word	0x20000510

08001780 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	609a      	str	r2, [r3, #8]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3360      	adds	r3, #96	; 0x60
 80017fa:	461a      	mov	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <LL_ADC_SetOffset+0x44>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	4313      	orrs	r3, r2
 8001818:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	03fff000 	.word	0x03fff000

08001830 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3360      	adds	r3, #96	; 0x60
 800183e:	461a      	mov	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3360      	adds	r3, #96	; 0x60
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3330      	adds	r3, #48	; 0x30
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	211f      	movs	r1, #31
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0e9b      	lsrs	r3, r3, #26
 80018f0:	f003 011f 	and.w	r1, r3, #31
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001936:	b480      	push	{r7}
 8001938:	b087      	sub	sp, #28
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3314      	adds	r3, #20
 8001946:	461a      	mov	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	0e5b      	lsrs	r3, r3, #25
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0d1b      	lsrs	r3, r3, #20
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2107      	movs	r1, #7
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0d1b      	lsrs	r3, r3, #20
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	43db      	mvns	r3, r3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0318 	and.w	r3, r3, #24
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	400b      	ands	r3, r1
 80019b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ba:	431a      	orrs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	0007ffff 	.word	0x0007ffff

080019d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 031f 	and.w	r3, r3, #31
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6093      	str	r3, [r2, #8]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a44:	d101      	bne.n	8001a4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_IsEnabled+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_IsEnabled+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b0a:	f043 0204 	orr.w	r2, r3, #4
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d101      	bne.n	8001b5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e136      	b.n	8001df4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fb71 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff3f 	bl	8001a30 <LL_ADC_IsDeepPowerDownEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff25 	bl	8001a0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff5a 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff3e 	bl	8001a58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bdc:	4b87      	ldr	r3, [pc, #540]	; (8001dfc <HAL_ADC_Init+0x290>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	4a87      	ldr	r2, [pc, #540]	; (8001e00 <HAL_ADC_Init+0x294>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	099b      	lsrs	r3, r3, #6
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f9      	bne.n	8001bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff3c 	bl	8001a80 <LL_ADC_IsInternalRegulatorEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10d      	bne.n	8001c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f043 0210 	orr.w	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff75 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 80cf 	bne.w	8001de2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 80cb 	bne.w	8001de2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c54:	f043 0202 	orr.w	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff35 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d115      	bne.n	8001c98 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c6c:	4865      	ldr	r0, [pc, #404]	; (8001e04 <HAL_ADC_Init+0x298>)
 8001c6e:	f7ff ff2f 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c72:	4604      	mov	r4, r0
 8001c74:	4864      	ldr	r0, [pc, #400]	; (8001e08 <HAL_ADC_Init+0x29c>)
 8001c76:	f7ff ff2b 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	431c      	orrs	r4, r3
 8001c7e:	4863      	ldr	r0, [pc, #396]	; (8001e0c <HAL_ADC_Init+0x2a0>)
 8001c80:	f7ff ff26 	bl	8001ad0 <LL_ADC_IsEnabled>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4323      	orrs	r3, r4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4619      	mov	r1, r3
 8001c92:	485f      	ldr	r0, [pc, #380]	; (8001e10 <HAL_ADC_Init+0x2a4>)
 8001c94:	f7ff fd74 	bl	8001780 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7e5b      	ldrb	r3, [r3, #25]
 8001c9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ca8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	045b      	lsls	r3, r3, #17
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_ADC_Init+0x2a8>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff08 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff15 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8001d1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d13d      	bne.n	8001d9e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d13a      	bne.n	8001d9e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d44:	f023 0302 	bic.w	r3, r3, #2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d118      	bne.n	8001d8e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	e007      	b.n	8001d9e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10c      	bne.n	8001dc0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f023 010f 	bic.w	r1, r3, #15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbe:	e007      	b.n	8001dd0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020f 	bic.w	r2, r2, #15
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f023 0303 	bic.w	r3, r3, #3
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
 8001de0:	e007      	b.n	8001df2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f043 0210 	orr.w	r2, r3, #16
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3724      	adds	r7, #36	; 0x24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	053e2d63 	.word	0x053e2d63
 8001e04:	50040000 	.word	0x50040000
 8001e08:	50040100 	.word	0x50040100
 8001e0c:	50040200 	.word	0x50040200
 8001e10:	50040300 	.word	0x50040300
 8001e14:	fff0c007 	.word	0xfff0c007

08001e18 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e20:	4857      	ldr	r0, [pc, #348]	; (8001f80 <HAL_ADC_Start+0x168>)
 8001e22:	f7ff fdd7 	bl	80019d4 <LL_ADC_GetMultimode>
 8001e26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe76 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 809c 	bne.w	8001f72 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_Start+0x30>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e097      	b.n	8001f78 <HAL_ADC_Start+0x160>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 ffa9 	bl	8002da8 <ADC_Enable>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 8083 	bne.w	8001f68 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_ADC_Start+0x16c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d002      	beq.n	8001e86 <HAL_ADC_Start+0x6e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Start+0x70>
 8001e86:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <HAL_ADC_Start+0x170>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d002      	beq.n	8001e96 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eae:	d106      	bne.n	8001ebe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f023 0206 	bic.w	r2, r3, #6
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	221c      	movs	r2, #28
 8001eca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2a      	ldr	r2, [pc, #168]	; (8001f84 <HAL_ADC_Start+0x16c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d002      	beq.n	8001ee4 <HAL_ADC_Start+0xcc>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_Start+0xce>
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_ADC_Start+0x170>)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d008      	beq.n	8001f00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d002      	beq.n	8001f00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b09      	cmp	r3, #9
 8001efe:	d114      	bne.n	8001f2a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fde7 	bl	8001af6 <LL_ADC_REG_StartConversion>
 8001f28:	e025      	b.n	8001f76 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_ADC_Start+0x16c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d002      	beq.n	8001f46 <HAL_ADC_Start+0x12e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e000      	b.n	8001f48 <HAL_ADC_Start+0x130>
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_ADC_Start+0x170>)
 8001f48:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00f      	beq.n	8001f76 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
 8001f66:	e006      	b.n	8001f76 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f70:	e001      	b.n	8001f76 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	50040300 	.word	0x50040300
 8001f84:	50040100 	.word	0x50040100
 8001f88:	50040000 	.word	0x50040000

08001f8c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f96:	4866      	ldr	r0, [pc, #408]	; (8002130 <HAL_ADC_PollForConversion+0x1a4>)
 8001f98:	f7ff fd1c 	bl	80019d4 <LL_ADC_GetMultimode>
 8001f9c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d102      	bne.n	8001fac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e02a      	b.n	8002002 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d002      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b09      	cmp	r3, #9
 8001fbc:	d111      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0a4      	b.n	8002126 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fdc:	2304      	movs	r3, #4
 8001fde:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fe0:	e00f      	b.n	8002002 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fe2:	4853      	ldr	r0, [pc, #332]	; (8002130 <HAL_ADC_PollForConversion+0x1a4>)
 8001fe4:	f7ff fd04 	bl	80019f0 <LL_ADC_GetMultiDMATransfer>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e093      	b.n	8002126 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ffe:	2304      	movs	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002002:	f7ff fbb1 	bl	8001768 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002008:	e021      	b.n	800204e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d01d      	beq.n	800204e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002012:	f7ff fba9 	bl	8001768 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <HAL_ADC_PollForConversion+0x9c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d112      	bne.n	800204e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e06b      	b.n	8002126 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0d6      	beq.n	800200a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fc10 	bl	8001892 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e5b      	ldrb	r3, [r3, #25]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d118      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <HAL_ADC_PollForConversion+0x1a8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d002      	beq.n	80020c2 <HAL_ADC_PollForConversion+0x136>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_PollForConversion+0x138>
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_ADC_PollForConversion+0x1ac>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d008      	beq.n	80020de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d002      	beq.n	80020de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b09      	cmp	r3, #9
 80020dc:	d104      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	e00c      	b.n	8002102 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_ADC_PollForConversion+0x1a8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d002      	beq.n	80020f8 <HAL_ADC_PollForConversion+0x16c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e000      	b.n	80020fa <HAL_ADC_PollForConversion+0x16e>
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_ADC_PollForConversion+0x1ac>)
 80020fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d104      	bne.n	8002112 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e008      	b.n	8002124 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	220c      	movs	r2, #12
 8002122:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	50040300 	.word	0x50040300
 8002134:	50040100 	.word	0x50040100
 8002138:	50040000 	.word	0x50040000

0800213c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002174:	4882      	ldr	r0, [pc, #520]	; (8002380 <HAL_ADC_IRQHandler+0x228>)
 8002176:	f7ff fc2d 	bl	80019d4 <LL_ADC_GetMultimode>
 800217a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d017      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x5e>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d012      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fed1 	bl	8002f50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_ADC_IRQHandler+0x72>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8083 	beq.w	80022dc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d07d      	beq.n	80022dc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fb48 	bl	8001892 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d062      	beq.n	80022ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_ADC_IRQHandler+0x22c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d002      	beq.n	8002218 <HAL_ADC_IRQHandler+0xc0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e000      	b.n	800221a <HAL_ADC_IRQHandler+0xc2>
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <HAL_ADC_IRQHandler+0x230>)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4293      	cmp	r3, r2
 8002220:	d008      	beq.n	8002234 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d002      	beq.n	8002234 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b09      	cmp	r3, #9
 8002232:	d104      	bne.n	800223e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	623b      	str	r3, [r7, #32]
 800223c:	e00c      	b.n	8002258 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a50      	ldr	r2, [pc, #320]	; (8002384 <HAL_ADC_IRQHandler+0x22c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d002      	beq.n	800224e <HAL_ADC_IRQHandler+0xf6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e000      	b.n	8002250 <HAL_ADC_IRQHandler+0xf8>
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_ADC_IRQHandler+0x230>)
 8002250:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d135      	bne.n	80022ce <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d12e      	bne.n	80022ce <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fc52 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11a      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020c 	bic.w	r2, r2, #12
 800228e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d112      	bne.n	80022ce <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
 80022b4:	e00b      	b.n	80022ce <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f95c 	bl	800258c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	220c      	movs	r2, #12
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x198>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 809f 	beq.w	800243a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8099 	beq.w	800243a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff faf3 	bl	8001910 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800232a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff faae 	bl	8001892 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002336:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_IRQHandler+0x22c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d002      	beq.n	8002348 <HAL_ADC_IRQHandler+0x1f0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e000      	b.n	800234a <HAL_ADC_IRQHandler+0x1f2>
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <HAL_ADC_IRQHandler+0x230>)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4293      	cmp	r3, r2
 8002350:	d008      	beq.n	8002364 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b06      	cmp	r3, #6
 800235c:	d002      	beq.n	8002364 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d104      	bne.n	800236e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	e013      	b.n	8002396 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_ADC_IRQHandler+0x22c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d009      	beq.n	800238c <HAL_ADC_IRQHandler+0x234>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	e007      	b.n	800238e <HAL_ADC_IRQHandler+0x236>
 800237e:	bf00      	nop
 8002380:	50040300 	.word	0x50040300
 8002384:	50040100 	.word	0x50040100
 8002388:	50040000 	.word	0x50040000
 800238c:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <HAL_ADC_IRQHandler+0x42c>)
 800238e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d047      	beq.n	800242c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_ADC_IRQHandler+0x25e>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03f      	beq.n	800242c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13a      	bne.n	800242c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d133      	bne.n	800242c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d12e      	bne.n	800242c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fbb6 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11a      	bne.n	8002414 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d112      	bne.n	800242c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
 8002412:	e00b      	b.n	800242c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0210 	orr.w	r2, r3, #16
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fd67 	bl	8002f00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2260      	movs	r2, #96	; 0x60
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	2b00      	cmp	r3, #0
 8002442:	d011      	beq.n	8002468 <HAL_ADC_IRQHandler+0x310>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8a0 	bl	80025a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2280      	movs	r2, #128	; 0x80
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <HAL_ADC_IRQHandler+0x340>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fd4d 	bl	8002f28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x370>
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fd3f 	bl	8002f3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_ADC_IRQHandler+0x3e8>
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d031      	beq.n	8002540 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80024e4:	2301      	movs	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	e014      	b.n	8002514 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024f0:	4825      	ldr	r0, [pc, #148]	; (8002588 <HAL_ADC_IRQHandler+0x430>)
 80024f2:	f7ff fa7d 	bl	80019f0 <LL_ADC_GetMultiDMATransfer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e008      	b.n	8002514 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002510:	2301      	movs	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10e      	bne.n	8002538 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f043 0202 	orr.w	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f83e 	bl	80025b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2210      	movs	r2, #16
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <HAL_ADC_IRQHandler+0x424>
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f043 0208 	orr.w	r2, r3, #8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fccc 	bl	8002f14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800257c:	bf00      	nop
 800257e:	3728      	adds	r7, #40	; 0x28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	50040000 	.word	0x50040000
 8002588:	50040300 	.word	0x50040300

0800258c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0b6      	sub	sp, #216	; 0xd8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x22>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e3c7      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x7b2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa91 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 83a8 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d824      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	3b02      	subs	r3, #2
 8002612:	2b03      	cmp	r3, #3
 8002614:	d81b      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x86>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_ADC_ConfigChannel+0x54>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	08002635 	.word	0x08002635
 8002624:	0800263d 	.word	0x0800263d
 8002628:	08002645 	.word	0x08002645
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	220c      	movs	r2, #12
 8002630:	605a      	str	r2, [r3, #4]
          break;
 8002632:	e011      	b.n	8002658 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2212      	movs	r2, #18
 8002638:	605a      	str	r2, [r3, #4]
          break;
 800263a:	e00d      	b.n	8002658 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2218      	movs	r2, #24
 8002640:	605a      	str	r2, [r3, #4]
          break;
 8002642:	e009      	b.n	8002658 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264a:	605a      	str	r2, [r3, #4]
          break;
 800264c:	e004      	b.n	8002658 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2206      	movs	r2, #6
 8002652:	605a      	str	r2, [r3, #4]
          break;
 8002654:	e000      	b.n	8002658 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002656:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff f927 	bl	80018b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fa55 	bl	8001b1e <LL_ADC_REG_IsConversionOngoing>
 8002674:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fa61 	bl	8001b44 <LL_ADC_INJ_IsConversionOngoing>
 8002682:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 81a6 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 81a1 	bne.w	80029dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff f945 	bl	8001936 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d00a      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026de:	f7ff f883 	bl	80017e8 <LL_ADC_SetOffset>
 80026e2:	e17b      	b.n	80029dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f8a0 	bl	8001830 <LL_ADC_GetOffsetChannel>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x148>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f895 	bl	8001830 <LL_ADC_GetOffsetChannel>
 8002706:	4603      	mov	r3, r0
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	e01e      	b.n	800274e <HAL_ADC_ConfigChannel+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f88a 	bl	8001830 <LL_ADC_GetOffsetChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800272e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e004      	b.n	800274c <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8002742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x19e>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	e018      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1d0>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800277a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800277e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e004      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800278e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002798:	429a      	cmp	r2, r3
 800279a:	d106      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff f859 	bl	800185c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f83d 	bl	8001830 <LL_ADC_GetOffsetChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x20e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f832 	bl	8001830 <LL_ADC_GetOffsetChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	e01e      	b.n	8002814 <HAL_ADC_ConfigChannel+0x24c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f827 	bl	8001830 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e004      	b.n	8002812 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x264>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	e018      	b.n	800285e <HAL_ADC_ConfigChannel+0x296>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e004      	b.n	800285e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800285e:	429a      	cmp	r2, r3
 8002860:	d106      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2200      	movs	r2, #0
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fff6 	bl	800185c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2102      	movs	r1, #2
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe ffda 	bl	8001830 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x2d4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe ffcf 	bl	8001830 <LL_ADC_GetOffsetChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 021f 	and.w	r2, r3, #31
 800289a:	e01e      	b.n	80028da <HAL_ADC_ConfigChannel+0x312>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2102      	movs	r1, #2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe ffc4 	bl	8001830 <LL_ADC_GetOffsetChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e004      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x32a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	0e9b      	lsrs	r3, r3, #26
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	e016      	b.n	8002920 <HAL_ADC_ConfigChannel+0x358>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800290a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e004      	b.n	8002920 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe ff95 	bl	800185c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2103      	movs	r1, #3
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe ff79 	bl	8001830 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_ADC_ConfigChannel+0x396>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2103      	movs	r1, #3
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe ff6e 	bl	8001830 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	e017      	b.n	800298e <HAL_ADC_ConfigChannel+0x3c6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2103      	movs	r1, #3
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe ff63 	bl	8001830 <LL_ADC_GetOffsetChannel>
 800296a:	4603      	mov	r3, r0
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002978:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800297a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3de>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	e011      	b.n	80029ca <HAL_ADC_ConfigChannel+0x402>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e003      	b.n	80029ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d106      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	2103      	movs	r1, #3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe ff40 	bl	800185c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f875 	bl	8001ad0 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f040 813f 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7fe ffc6 	bl	800198c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a8e      	ldr	r2, [pc, #568]	; (8002c40 <HAL_ADC_ConfigChannel+0x678>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 8130 	bne.w	8002c6c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x46c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	3301      	adds	r3, #1
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e019      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x4a0>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	bf94      	ite	ls
 8002a62:	2301      	movls	r3, #1
 8002a64:	2300      	movhi	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d079      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x4c0>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	069b      	lsls	r3, r3, #26
 8002a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a86:	e015      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x4ec>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e003      	b.n	8002aac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	069b      	lsls	r3, r3, #26
 8002ab0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x50c>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	e017      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x53c>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e003      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	ea42 0103 	orr.w	r1, r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x562>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	051b      	lsls	r3, r3, #20
 8002b28:	e018      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x594>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e003      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	e080      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5b4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	069b      	lsls	r3, r3, #26
 8002b76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7a:	e015      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x5e0>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x600>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	e017      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x630>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f003 031f 	and.w	r3, r3, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	ea42 0103 	orr.w	r1, r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x65c>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b1e      	subs	r3, #30
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c22:	e01d      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x698>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	613b      	str	r3, [r7, #16]
  return result;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e005      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x684>
 8002c40:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	3b1e      	subs	r3, #30
 8002c5a:	051b      	lsls	r3, r3, #20
 8002c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	430b      	orrs	r3, r1
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6892      	ldr	r2, [r2, #8]
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fe fe65 	bl	8001936 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d07a      	beq.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c78:	4843      	ldr	r0, [pc, #268]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c7a:	f7fe fda7 	bl	80017cc <LL_ADC_GetCommonPathInternalCh>
 8002c7e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a41      	ldr	r2, [pc, #260]	; (8002d8c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d12c      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d126      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x6e4>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d15d      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4834      	ldr	r0, [pc, #208]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cb8:	f7fe fd75 	bl	80017a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cbc:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_ADC_ConfigChannel+0x7d4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cd6:	e002      	b.n	8002cde <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f9      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce4:	e040      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d118      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x75a>
 8002cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d112      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a23      	ldr	r2, [pc, #140]	; (8002d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x748>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d12d      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d18:	4619      	mov	r1, r3
 8002d1a:	481b      	ldr	r0, [pc, #108]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d1c:	f7fe fd43 	bl	80017a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d20:	e024      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d120      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11a      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d115      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480e      	ldr	r0, [pc, #56]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d4e:	f7fe fd2a 	bl	80017a6 <LL_ADC_SetCommonPathInternalCh>
 8002d52:	e00c      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002d66:	e002      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d68:	bf00      	nop
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	37d8      	adds	r7, #216	; 0xd8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	80080000 	.word	0x80080000
 8002d88:	50040300 	.word	0x50040300
 8002d8c:	c7520000 	.word	0xc7520000
 8002d90:	50040000 	.word	0x50040000
 8002d94:	50040200 	.word	0x50040200
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	053e2d63 	.word	0x053e2d63
 8002da0:	cb840000 	.word	0xcb840000
 8002da4:	80000001 	.word	0x80000001

08002da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fe89 	bl	8001ad0 <LL_ADC_IsEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d169      	bne.n	8002e98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <ADC_Enable+0xfc>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e055      	b.n	8002e9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fe58 	bl	8001aa8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002df8:	482b      	ldr	r0, [pc, #172]	; (8002ea8 <ADC_Enable+0x100>)
 8002dfa:	f7fe fce7 	bl	80017cc <LL_ADC_GetCommonPathInternalCh>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <ADC_Enable+0x104>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <ADC_Enable+0x108>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e22:	e002      	b.n	8002e2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e30:	f7fe fc9a 	bl	8001768 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e36:	e028      	b.n	8002e8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fe47 	bl	8001ad0 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fe2b 	bl	8001aa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e52:	f7fe fc89 	bl	8001768 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d914      	bls.n	8002e8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00d      	beq.n	8002e8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e007      	b.n	8002e9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d1cf      	bne.n	8002e38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	8000003f 	.word	0x8000003f
 8002ea8:	50040300 	.word	0x50040300
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	053e2d63 	.word	0x053e2d63

08002eb4 <LL_ADC_IsEnabled>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <LL_ADC_IsEnabled+0x18>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <LL_ADC_IsEnabled+0x1a>
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_REG_IsConversionOngoing>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d101      	bne.n	8002ef2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b09f      	sub	sp, #124	; 0x7c
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e093      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a47      	ldr	r2, [pc, #284]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f9c:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e001      	b.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e072      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff87 	bl	8002eda <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff81 	bl	8002eda <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d154      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d151      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002fe6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d02c      	beq.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003002:	035b      	lsls	r3, r3, #13
 8003004:	430b      	orrs	r3, r1
 8003006:	431a      	orrs	r2, r3
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800300c:	4829      	ldr	r0, [pc, #164]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800300e:	f7ff ff51 	bl	8002eb4 <LL_ADC_IsEnabled>
 8003012:	4604      	mov	r4, r0
 8003014:	4828      	ldr	r0, [pc, #160]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003016:	f7ff ff4d 	bl	8002eb4 <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	431c      	orrs	r4, r3
 800301e:	4828      	ldr	r0, [pc, #160]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003020:	f7ff ff48 	bl	8002eb4 <LL_ADC_IsEnabled>
 8003024:	4603      	mov	r3, r0
 8003026:	4323      	orrs	r3, r4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d137      	bne.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003034:	f023 030f 	bic.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	6811      	ldr	r1, [r2, #0]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	6892      	ldr	r2, [r2, #8]
 8003040:	430a      	orrs	r2, r1
 8003042:	431a      	orrs	r2, r3
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003048:	e028      	b.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800304a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003056:	4817      	ldr	r0, [pc, #92]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003058:	f7ff ff2c 	bl	8002eb4 <LL_ADC_IsEnabled>
 800305c:	4604      	mov	r4, r0
 800305e:	4816      	ldr	r0, [pc, #88]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003060:	f7ff ff28 	bl	8002eb4 <LL_ADC_IsEnabled>
 8003064:	4603      	mov	r3, r0
 8003066:	431c      	orrs	r4, r3
 8003068:	4815      	ldr	r0, [pc, #84]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800306a:	f7ff ff23 	bl	8002eb4 <LL_ADC_IsEnabled>
 800306e:	4603      	mov	r3, r0
 8003070:	4323      	orrs	r3, r4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d112      	bne.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800307e:	f023 030f 	bic.w	r3, r3, #15
 8003082:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003084:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003086:	e009      	b.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800309a:	e000      	b.n	800309e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800309c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	377c      	adds	r7, #124	; 0x7c
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	50040000 	.word	0x50040000
 80030b8:	50040100 	.word	0x50040100
 80030bc:	50040300 	.word	0x50040300
 80030c0:	50040200 	.word	0x50040200

080030c4 <__NVIC_SetPriorityGrouping>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f6:	4a04      	ldr	r2, [pc, #16]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	60d3      	str	r3, [r2, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_GetPriorityGrouping>:
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__NVIC_GetPriorityGrouping+0x18>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 0307 	and.w	r3, r3, #7
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_EnableIRQ>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db0b      	blt.n	8003152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <__NVIC_EnableIRQ+0x38>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2001      	movs	r0, #1
 800314a:	fa00 f202 	lsl.w	r2, r0, r2
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff4c 	bl	80030c4 <__NVIC_SetPriorityGrouping>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003246:	f7ff ff61 	bl	800310c <__NVIC_GetPriorityGrouping>
 800324a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	6978      	ldr	r0, [r7, #20]
 8003252:	f7ff ffb1 	bl	80031b8 <NVIC_EncodePriority>
 8003256:	4602      	mov	r2, r0
 8003258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff80 	bl	8003164 <__NVIC_SetPriority>
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff54 	bl	8003128 <__NVIC_EnableIRQ>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003296:	e17f      	b.n	8003598 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8171 	beq.w	8003592 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d005      	beq.n	80032c8 <HAL_GPIO_Init+0x40>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d130      	bne.n	800332a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032fe:	2201      	movs	r2, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	f003 0201 	and.w	r2, r3, #1
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b03      	cmp	r3, #3
 8003334:	d118      	bne.n	8003368 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800333c:	2201      	movs	r2, #1
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0201 	and.w	r2, r3, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d017      	beq.n	80033a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d123      	bne.n	80033f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	08da      	lsrs	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3208      	adds	r2, #8
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80ac 	beq.w	8003592 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <HAL_GPIO_Init+0x330>)
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <HAL_GPIO_Init+0x330>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6613      	str	r3, [r2, #96]	; 0x60
 8003446:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <HAL_GPIO_Init+0x330>)
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003452:	4a5a      	ldr	r2, [pc, #360]	; (80035bc <HAL_GPIO_Init+0x334>)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x242>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x338>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x23e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4e      	ldr	r2, [pc, #312]	; (80035c4 <HAL_GPIO_Init+0x33c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x23a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_GPIO_Init+0x340>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x236>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4c      	ldr	r2, [pc, #304]	; (80035cc <HAL_GPIO_Init+0x344>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x232>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_GPIO_Init+0x348>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x22e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_GPIO_Init+0x34c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x22a>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x244>
 80034ca:	2300      	movs	r3, #0
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034dc:	4937      	ldr	r1, [pc, #220]	; (80035bc <HAL_GPIO_Init+0x334>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_GPIO_Init+0x350>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4013      	ands	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800350e:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_GPIO_Init+0x350>)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_GPIO_Init+0x350>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_GPIO_Init+0x350>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_GPIO_Init+0x350>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <HAL_GPIO_Init+0x350>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_GPIO_Init+0x350>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800358c:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_GPIO_Init+0x350>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3301      	adds	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa22 f303 	lsr.w	r3, r2, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f47f ae78 	bne.w	8003298 <HAL_GPIO_Init+0x10>
  }
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40010000 	.word	0x40010000
 80035c0:	48000400 	.word	0x48000400
 80035c4:	48000800 	.word	0x48000800
 80035c8:	48000c00 	.word	0x48000c00
 80035cc:	48001000 	.word	0x48001000
 80035d0:	48001400 	.word	0x48001400
 80035d4:	48001800 	.word	0x48001800
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <HAL_PWREx_GetVoltageRange+0x18>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003636:	d130      	bne.n	800369a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d038      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2232      	movs	r2, #50	; 0x32
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0c9b      	lsrs	r3, r3, #18
 8003668:	3301      	adds	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366c:	e002      	b.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3b01      	subs	r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003680:	d102      	bne.n	8003688 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f2      	bne.n	800366e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d110      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d007      	beq.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b0:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000
 80036cc:	20000000 	.word	0x20000000
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e3ca      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e6:	4b97      	ldr	r3, [pc, #604]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f0:	4b94      	ldr	r3, [pc, #592]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80e4 	beq.w	80038d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_RCC_OscConfig+0x4a>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b0c      	cmp	r3, #12
 8003712:	f040 808b 	bne.w	800382c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b01      	cmp	r3, #1
 800371a:	f040 8087 	bne.w	800382c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371e:	4b89      	ldr	r3, [pc, #548]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x62>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e3a2      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_RCC_OscConfig+0x7c>
 8003746:	4b7f      	ldr	r3, [pc, #508]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374e:	e005      	b.n	800375c <HAL_RCC_OscConfig+0x88>
 8003750:	4b7c      	ldr	r3, [pc, #496]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	4293      	cmp	r3, r2
 800375e:	d223      	bcs.n	80037a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fd71 	bl	800424c <RCC_SetFlashLatencyFromMSIRange>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e383      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003774:	4b73      	ldr	r3, [pc, #460]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a72      	ldr	r2, [pc, #456]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	496d      	ldr	r1, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003792:	4b6c      	ldr	r3, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	4968      	ldr	r1, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
 80037a6:	e025      	b.n	80037f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a8:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037ae:	f043 0308 	orr.w	r3, r3, #8
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b63      	ldr	r3, [pc, #396]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4960      	ldr	r1, [pc, #384]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	495b      	ldr	r1, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd31 	bl	800424c <RCC_SetFlashLatencyFromMSIRange>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e343      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f4:	f000 fc4a 	bl	800408c <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b52      	ldr	r3, [pc, #328]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4950      	ldr	r1, [pc, #320]	; (8003948 <HAL_RCC_OscConfig+0x274>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	4a4e      	ldr	r2, [pc, #312]	; (800394c <HAL_RCC_OscConfig+0x278>)
 8003812:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003814:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <HAL_RCC_OscConfig+0x27c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fe5b 	bl	80014d4 <HAL_InitTick>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d052      	beq.n	80038ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	e327      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d032      	beq.n	800389a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a42      	ldr	r2, [pc, #264]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003840:	f7fd ff92 	bl	8001768 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003848:	f7fd ff8e 	bl	8001768 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e310      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385a:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003866:	4b37      	ldr	r3, [pc, #220]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a36      	ldr	r2, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800386c:	f043 0308 	orr.w	r3, r3, #8
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4931      	ldr	r1, [pc, #196]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003884:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	492c      	ldr	r1, [pc, #176]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	e01a      	b.n	80038d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800389a:	4b2a      	ldr	r3, [pc, #168]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a6:	f7fd ff5f 	bl	8001768 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038ae:	f7fd ff5b 	bl	8001768 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e2dd      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x1da>
 80038cc:	e000      	b.n	80038d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d074      	beq.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x21a>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d10e      	bne.n	8003906 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d10b      	bne.n	8003906 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d064      	beq.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d160      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e2ba      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x24a>
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0b      	ldr	r2, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e026      	b.n	800396c <HAL_RCC_OscConfig+0x298>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003926:	d115      	bne.n	8003954 <HAL_RCC_OscConfig+0x280>
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800392e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a02      	ldr	r2, [pc, #8]	; (8003944 <HAL_RCC_OscConfig+0x270>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x298>
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	08009a10 	.word	0x08009a10
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004
 8003954:	4ba0      	ldr	r3, [pc, #640]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a9f      	ldr	r2, [pc, #636]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b9d      	ldr	r3, [pc, #628]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a9c      	ldr	r2, [pc, #624]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fd fef8 	bl	8001768 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd fef4 	bl	8001768 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e276      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398e:	4b92      	ldr	r3, [pc, #584]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x2a8>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fee4 	bl	8001768 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fd fee0 	bl	8001768 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e262      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b6:	4b88      	ldr	r3, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2d0>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d060      	beq.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x310>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d119      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d116      	bne.n	8003a12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e4:	4b7c      	ldr	r3, [pc, #496]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_OscConfig+0x328>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e23f      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b76      	ldr	r3, [pc, #472]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	4973      	ldr	r1, [pc, #460]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a10:	e040      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d023      	beq.n	8003a62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6e      	ldr	r2, [pc, #440]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fd fe9f 	bl	8001768 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fd fe9b 	bl	8001768 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e21d      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	4b65      	ldr	r3, [pc, #404]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	495f      	ldr	r1, [pc, #380]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e018      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fe7b 	bl	8001768 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fd fe77 	bl	8001768 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1f9      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa8:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aae:	4a4a      	ldr	r2, [pc, #296]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fe56 	bl	8001768 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fd fe52 	bl	8001768 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1d4      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ef      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x3ec>
 8003ae0:	e01b      	b.n	8003b1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae8:	4a3b      	ldr	r2, [pc, #236]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fd fe39 	bl	8001768 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afa:	f7fd fe35 	bl	8001768 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1b7      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1ef      	bne.n	8003afa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fdfc 	bl	8001768 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fd fdf8 	bl	8001768 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e17a      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <HAL_RCC_OscConfig+0x508>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x4d8>
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003baa:	e029      	b.n	8003c00 <HAL_RCC_OscConfig+0x52c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d115      	bne.n	8003be0 <HAL_RCC_OscConfig+0x50c>
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	4a03      	ldr	r2, [pc, #12]	; (8003bd8 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd4:	e014      	b.n	8003c00 <HAL_RCC_OscConfig+0x52c>
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	4b9c      	ldr	r3, [pc, #624]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a9b      	ldr	r2, [pc, #620]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf0:	4b98      	ldr	r3, [pc, #608]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a97      	ldr	r2, [pc, #604]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fdae 	bl	8001768 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0e:	e00a      	b.n	8003c26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c10:	f7fd fdaa 	bl	8001768 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e12a      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b8b      	ldr	r3, [pc, #556]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0ed      	beq.n	8003c10 <HAL_RCC_OscConfig+0x53c>
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fd fd97 	bl	8001768 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fd93 	bl	8001768 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e113      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c54:	4b7f      	ldr	r3, [pc, #508]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ed      	bne.n	8003c3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b7a      	ldr	r3, [pc, #488]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	4a79      	ldr	r2, [pc, #484]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80fe 	beq.w	8003e7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	f040 80d0 	bne.w	8003e28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c88:	4b72      	ldr	r3, [pc, #456]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d130      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d127      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d11f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc8:	2a07      	cmp	r2, #7
 8003cca:	bf14      	ite	ne
 8003ccc:	2201      	movne	r2, #1
 8003cce:	2200      	moveq	r2, #0
 8003cd0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d113      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d06e      	beq.n	8003ddc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d069      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0ad      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d20:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d2c:	f7fd fd1c 	bl	8001768 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fd18 	bl	8001768 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e09a      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCC_OscConfig+0x784>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d62:	3a01      	subs	r2, #1
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d6c:	0212      	lsls	r2, r2, #8
 8003d6e:	4311      	orrs	r1, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d74:	0852      	lsrs	r2, r2, #1
 8003d76:	3a01      	subs	r2, #1
 8003d78:	0552      	lsls	r2, r2, #21
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d80:	0852      	lsrs	r2, r2, #1
 8003d82:	3a01      	subs	r2, #1
 8003d84:	0652      	lsls	r2, r2, #25
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d8c:	0912      	lsrs	r2, r2, #4
 8003d8e:	0452      	lsls	r2, r2, #17
 8003d90:	430a      	orrs	r2, r1
 8003d92:	4930      	ldr	r1, [pc, #192]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db0:	f7fd fcda 	bl	8001768 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fcd6 	bl	8001768 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e058      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd6:	e050      	b.n	8003e7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e04f      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d148      	bne.n	8003e7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e00:	f7fd fcb2 	bl	8001768 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7fd fcae 	bl	8001768 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e030      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x734>
 8003e26:	e028      	b.n	8003e7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d023      	beq.n	8003e76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <HAL_RCC_OscConfig+0x780>)
 8003e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fc95 	bl	8001768 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	e00c      	b.n	8003e5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd fc91 	bl	8001768 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d905      	bls.n	8003e5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e013      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x7b0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ec      	bne.n	8003e42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCC_OscConfig+0x7b0>)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4905      	ldr	r1, [pc, #20]	; (8003e84 <HAL_RCC_OscConfig+0x7b0>)
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x7b4>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
 8003e74:	e001      	b.n	8003e7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	feeefffc 	.word	0xfeeefffc

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0e7      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d910      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 0207 	bic.w	r2, r3, #7
 8003eb6:	4970      	ldr	r1, [pc, #448]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cf      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b66      	ldr	r3, [pc, #408]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d908      	bls.n	8003efe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4960      	ldr	r1, [pc, #384]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d04c      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d121      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0a6      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d115      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e09a      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e08e      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e086      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4943      	ldr	r1, [pc, #268]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f74:	f7fd fbf8 	bl	8001768 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fd fbf4 	bl	8001768 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e06e      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d208      	bcs.n	8003fd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	492b      	ldr	r1, [pc, #172]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd2:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d210      	bcs.n	8004002 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 0207 	bic.w	r2, r3, #7
 8003fe8:	4923      	ldr	r1, [pc, #140]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff0:	4b21      	ldr	r3, [pc, #132]	; (8004078 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e036      	b.n	8004070 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4918      	ldr	r1, [pc, #96]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4910      	ldr	r1, [pc, #64]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004040:	f000 f824 	bl	800408c <HAL_RCC_GetSysClockFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	490b      	ldr	r1, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1f4>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1fc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd fa35 	bl	80014d4 <HAL_InitTick>
 800406a:	4603      	mov	r3, r0
 800406c:	72fb      	strb	r3, [r7, #11]

  return status;
 800406e:	7afb      	ldrb	r3, [r7, #11]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	08009a10 	.word	0x08009a10
 8004084:	20000000 	.word	0x20000000
 8004088:	20000004 	.word	0x20000004

0800408c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a4:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_GetSysClockFreq+0x34>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d121      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11e      	bne.n	80040fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040dc:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040e8:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d102      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	e004      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d101      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004112:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d134      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0xa6>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d003      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xac>
 8004130:	e005      	b.n	800413e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_GetSysClockFreq+0x110>)
 8004134:	617b      	str	r3, [r7, #20]
      break;
 8004136:	e005      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800413a:	617b      	str	r3, [r7, #20]
      break;
 800413c:	e002      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	3301      	adds	r3, #1
 8004150:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	fb03 f202 	mul.w	r2, r3, r2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	fbb2 f3f3 	udiv	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_GetSysClockFreq+0x108>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	0e5b      	lsrs	r3, r3, #25
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	3301      	adds	r3, #1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004184:	69bb      	ldr	r3, [r7, #24]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	; 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	08009a28 	.word	0x08009a28
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0adb      	lsrs	r3, r3, #11
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	08009a20 	.word	0x08009a20

080041e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	220f      	movs	r2, #15
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80041f8:	4b12      	ldr	r3, [pc, #72]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0203 	and.w	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_GetClockConfig+0x5c>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	08db      	lsrs	r3, r3, #3
 8004222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_RCC_GetClockConfig+0x60>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	601a      	str	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	40022000 	.word	0x40022000

0800424c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004264:	f7ff f9d2 	bl	800360c <HAL_PWREx_GetVoltageRange>
 8004268:	6178      	str	r0, [r7, #20]
 800426a:	e014      	b.n	8004296 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a24      	ldr	r2, [pc, #144]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	4b22      	ldr	r3, [pc, #136]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004284:	f7ff f9c2 	bl	800360c <HAL_PWREx_GetVoltageRange>
 8004288:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800429c:	d10b      	bne.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b80      	cmp	r3, #128	; 0x80
 80042a2:	d919      	bls.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2ba0      	cmp	r3, #160	; 0xa0
 80042a8:	d902      	bls.n	80042b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042aa:	2302      	movs	r3, #2
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e013      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b0:	2301      	movs	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e010      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d902      	bls.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042bc:	2303      	movs	r3, #3
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e00a      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d102      	bne.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042c8:	2302      	movs	r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	e004      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b70      	cmp	r3, #112	; 0x70
 80042d2:	d101      	bne.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d4:	2301      	movs	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 0207 	bic.w	r2, r3, #7
 80042e0:	4909      	ldr	r1, [pc, #36]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004314:	2300      	movs	r3, #0
 8004316:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004318:	2300      	movs	r3, #0
 800431a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004324:	2b00      	cmp	r3, #0
 8004326:	d041      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004330:	d02a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004332:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004336:	d824      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800433e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004342:	d81e      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434c:	d010      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800434e:	e018      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004350:	4b86      	ldr	r3, [pc, #536]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a85      	ldr	r2, [pc, #532]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435c:	e015      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fabb 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800436e:	e00c      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3320      	adds	r3, #32
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fba6 	bl	8004ac8 <RCCEx_PLLSAI2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004380:	e003      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	74fb      	strb	r3, [r7, #19]
      break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439e:	4973      	ldr	r1, [pc, #460]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043a6:	e001      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d041      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043c0:	d02a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a61      	ldr	r2, [pc, #388]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fa73 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3320      	adds	r3, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fb5e 	bl	8004ac8 <RCCEx_PLLSAI2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004420:	4b52      	ldr	r3, [pc, #328]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442e:	494f      	ldr	r1, [pc, #316]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a0 	beq.w	800458a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800444e:	4b47      	ldr	r3, [pc, #284]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	4a40      	ldr	r2, [pc, #256]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446e:	6593      	str	r3, [r2, #88]	; 0x58
 8004470:	4b3e      	ldr	r3, [pc, #248]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447c:	2301      	movs	r3, #1
 800447e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fd f96c 	bl	8001768 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004492:	e009      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fd f968 	bl	8001768 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	74fb      	strb	r3, [r7, #19]
        break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ef      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d019      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a20      	ldr	r2, [pc, #128]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004516:	f7fd f927 	bl	8001768 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451c:	e00b      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd f923 	bl	8001768 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d902      	bls.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	74fb      	strb	r3, [r7, #19]
            break;
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ec      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455a:	4904      	ldr	r1, [pc, #16]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004562:	e009      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004578:	7c7b      	ldrb	r3, [r7, #17]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457e:	4b9e      	ldr	r3, [pc, #632]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	4a9d      	ldr	r2, [pc, #628]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004596:	4b98      	ldr	r3, [pc, #608]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f023 0203 	bic.w	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	4994      	ldr	r1, [pc, #592]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045b8:	4b8f      	ldr	r3, [pc, #572]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 020c 	bic.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c6:	498c      	ldr	r1, [pc, #560]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045da:	4b87      	ldr	r3, [pc, #540]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	4983      	ldr	r1, [pc, #524]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045fc:	4b7e      	ldr	r3, [pc, #504]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	497b      	ldr	r1, [pc, #492]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800461e:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	4972      	ldr	r1, [pc, #456]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004640:	4b6d      	ldr	r3, [pc, #436]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	496a      	ldr	r1, [pc, #424]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004662:	4b65      	ldr	r3, [pc, #404]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004670:	4961      	ldr	r1, [pc, #388]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004684:	4b5c      	ldr	r3, [pc, #368]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004692:	4959      	ldr	r1, [pc, #356]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a6:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	4950      	ldr	r1, [pc, #320]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046c8:	4b4b      	ldr	r3, [pc, #300]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	4948      	ldr	r1, [pc, #288]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ea:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	493f      	ldr	r1, [pc, #252]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d028      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	4937      	ldr	r1, [pc, #220]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a31      	ldr	r2, [pc, #196]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004736:	60d3      	str	r3, [r2, #12]
 8004738:	e011      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004742:	d10c      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f8c8 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d028      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800476a:	4b23      	ldr	r3, [pc, #140]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004788:	d106      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004794:	60d3      	str	r3, [r2, #12]
 8004796:	e011      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a0:	d10c      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f899 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02b      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	4908      	ldr	r1, [pc, #32]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e6:	d109      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a02      	ldr	r2, [pc, #8]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047f2:	60d3      	str	r3, [r2, #12]
 80047f4:	e014      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3304      	adds	r3, #4
 800480a:	2101      	movs	r1, #1
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f867 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02f      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483a:	4928      	ldr	r1, [pc, #160]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484a:	d10d      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f844 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	74bb      	strb	r3, [r7, #18]
 8004866:	e011      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3320      	adds	r3, #32
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f925 	bl	8004ac8 <RCCEx_PLLSAI2_Config>
 800487e:	4603      	mov	r3, r0
 8004880:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004888:	7cfb      	ldrb	r3, [r7, #19]
 800488a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a6:	490d      	ldr	r1, [pc, #52]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ca:	4904      	ldr	r1, [pc, #16]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000

080048e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ee:	4b75      	ldr	r3, [pc, #468]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048fa:	4b72      	ldr	r3, [pc, #456]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d10d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
       ||
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004912:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
       ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d047      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e044      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d018      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x86>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCCEx_PLLSAI1_Config+0xa4>
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <RCCEx_PLLSAI1_Config+0x62>
 800493c:	2b02      	cmp	r3, #2
 800493e:	d009      	beq.n	8004954 <RCCEx_PLLSAI1_Config+0x74>
 8004940:	e020      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004942:	4b60      	ldr	r3, [pc, #384]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004952:	e01a      	b.n	800498a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004954:	4b5b      	ldr	r3, [pc, #364]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e013      	b.n	800498e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004966:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004982:	e006      	b.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e004      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004992:	bf00      	nop
    }

    if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800499a:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4944      	ldr	r1, [pc, #272]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d17d      	bne.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049bc:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a40      	ldr	r2, [pc, #256]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c8:	f7fc fece 	bl	8001768 <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ce:	e009      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d0:	f7fc feca 	bl	8001768 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d902      	bls.n	80049e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	73fb      	strb	r3, [r7, #15]
        break;
 80049e2:	e005      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049e4:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ef      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d160      	bne.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d111      	bne.n	8004a20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	0912      	lsrs	r2, r2, #4
 8004a14:	0452      	lsls	r2, r2, #17
 8004a16:	430a      	orrs	r2, r1
 8004a18:	492a      	ldr	r1, [pc, #168]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	610b      	str	r3, [r1, #16]
 8004a1e:	e027      	b.n	8004a70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d112      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a26:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	0211      	lsls	r1, r2, #8
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6912      	ldr	r2, [r2, #16]
 8004a3c:	0852      	lsrs	r2, r2, #1
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0552      	lsls	r2, r2, #21
 8004a42:	430a      	orrs	r2, r1
 8004a44:	491f      	ldr	r1, [pc, #124]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]
 8004a4a:	e011      	b.n	8004a70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	0211      	lsls	r1, r2, #8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6952      	ldr	r2, [r2, #20]
 8004a62:	0852      	lsrs	r2, r2, #1
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0652      	lsls	r2, r2, #25
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fc fe74 	bl	8001768 <HAL_GetTick>
 8004a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a82:	e009      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a84:	f7fc fe70 	bl	8001768 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d902      	bls.n	8004a98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	73fb      	strb	r3, [r7, #15]
          break;
 8004a96:	e005      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ef      	beq.n	8004a84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad6:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ae2:	4b67      	ldr	r3, [pc, #412]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10d      	bne.n	8004b0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
       ||
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004afa:	4b61      	ldr	r3, [pc, #388]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
       ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d047      	beq.n	8004b9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e044      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d018      	beq.n	8004b4e <RCCEx_PLLSAI2_Config+0x86>
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d825      	bhi.n	8004b6c <RCCEx_PLLSAI2_Config+0xa4>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d002      	beq.n	8004b2a <RCCEx_PLLSAI2_Config+0x62>
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d009      	beq.n	8004b3c <RCCEx_PLLSAI2_Config+0x74>
 8004b28:	e020      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b2a:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11d      	bne.n	8004b72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3a:	e01a      	b.n	8004b72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b3c:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d116      	bne.n	8004b76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4c:	e013      	b.n	8004b76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4e:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b5a:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b70:	e004      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b82:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	430b      	orrs	r3, r1
 8004b98:	4939      	ldr	r1, [pc, #228]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d167      	bne.n	8004c74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ba4:	4b36      	ldr	r3, [pc, #216]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fc fdda 	bl	8001768 <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bb8:	f7fc fdd6 	bl	8001768 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bcc:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ef      	bne.n	8004bb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d14a      	bne.n	8004c74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004be4:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	0211      	lsls	r1, r2, #8
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	0912      	lsrs	r2, r2, #4
 8004bfc:	0452      	lsls	r2, r2, #17
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	491f      	ldr	r1, [pc, #124]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	614b      	str	r3, [r1, #20]
 8004c06:	e011      	b.n	8004c2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6892      	ldr	r2, [r2, #8]
 8004c18:	0211      	lsls	r1, r2, #8
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6912      	ldr	r2, [r2, #16]
 8004c1e:	0852      	lsrs	r2, r2, #1
 8004c20:	3a01      	subs	r2, #1
 8004c22:	0652      	lsls	r2, r2, #25
 8004c24:	430a      	orrs	r2, r1
 8004c26:	4916      	ldr	r1, [pc, #88]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fc fd96 	bl	8001768 <HAL_GetTick>
 8004c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c3e:	e009      	b.n	8004c54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c40:	f7fc fd92 	bl	8001768 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d902      	bls.n	8004c54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	73fb      	strb	r3, [r7, #15]
          break;
 8004c52:	e005      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ef      	beq.n	8004c40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	4904      	ldr	r1, [pc, #16]	; (8004c80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000

08004c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e049      	b.n	8004d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fb76 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f000 fdca 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e04f      	b.n	8004dec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d018      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIM_Base_Start_IT+0x76>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d115      	bne.n	8004dd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d015      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0xb4>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d011      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd4:	e008      	b.n	8004de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e000      	b.n	8004dea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	00010007 	.word	0x00010007

08004e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e049      	b.n	8004eba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f841 	bl	8004ec2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 fd02 	bl	800585c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <HAL_TIM_PWM_Start+0x24>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e03c      	b.n	8004f76 <HAL_TIM_PWM_Start+0x9e>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d109      	bne.n	8004f16 <HAL_TIM_PWM_Start+0x3e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	bf14      	ite	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2300      	moveq	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e02f      	b.n	8004f76 <HAL_TIM_PWM_Start+0x9e>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d109      	bne.n	8004f30 <HAL_TIM_PWM_Start+0x58>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	bf14      	ite	ne
 8004f28:	2301      	movne	r3, #1
 8004f2a:	2300      	moveq	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e022      	b.n	8004f76 <HAL_TIM_PWM_Start+0x9e>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d109      	bne.n	8004f4a <HAL_TIM_PWM_Start+0x72>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	e015      	b.n	8004f76 <HAL_TIM_PWM_Start+0x9e>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d109      	bne.n	8004f64 <HAL_TIM_PWM_Start+0x8c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e008      	b.n	8004f76 <HAL_TIM_PWM_Start+0x9e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e09c      	b.n	80050b8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xb6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f8c:	e023      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xfe>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xc6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9c:	e01b      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xd6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	e013      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xe6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fbc:	e00b      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xfe>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0xf6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	e003      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xfe>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 f846 	bl	8006070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	; (80050c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_TIM_PWM_Start+0x13e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <HAL_TIM_PWM_Start+0x1ec>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIM_PWM_Start+0x13e>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a32      	ldr	r2, [pc, #200]	; (80050c8 <HAL_TIM_PWM_Start+0x1f0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIM_PWM_Start+0x13e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a31      	ldr	r2, [pc, #196]	; (80050cc <HAL_TIM_PWM_Start+0x1f4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIM_PWM_Start+0x13e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <HAL_TIM_PWM_Start+0x1f8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_TIM_PWM_Start+0x142>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_TIM_PWM_Start+0x144>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <HAL_TIM_PWM_Start+0x1e8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01d      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d018      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <HAL_TIM_PWM_Start+0x1fc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <HAL_TIM_PWM_Start+0x200>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <HAL_TIM_PWM_Start+0x204>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_TIM_PWM_Start+0x1ec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIM_PWM_Start+0x19e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIM_PWM_Start+0x1f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d115      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_TIM_PWM_Start+0x208>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d015      	beq.n	80050b4 <HAL_TIM_PWM_Start+0x1dc>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508e:	d011      	beq.n	80050b4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a0:	e008      	b.n	80050b4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e000      	b.n	80050b6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	00010007 	.word	0x00010007

080050e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 ffba 	bl	8006070 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3e      	ldr	r2, [pc, #248]	; (80051fc <HAL_TIM_PWM_Stop+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_TIM_PWM_Stop+0x4a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3d      	ldr	r2, [pc, #244]	; (8005200 <HAL_TIM_PWM_Stop+0x11c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_TIM_PWM_Stop+0x4a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <HAL_TIM_PWM_Stop+0x120>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_TIM_PWM_Stop+0x4a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a3a      	ldr	r2, [pc, #232]	; (8005208 <HAL_TIM_PWM_Stop+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_TIM_PWM_Stop+0x4a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a38      	ldr	r2, [pc, #224]	; (800520c <HAL_TIM_PWM_Stop+0x128>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Stop+0x4e>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_TIM_PWM_Stop+0x50>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d017      	beq.n	8005168 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_TIM_PWM_Stop+0x84>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	f240 4344 	movw	r3, #1092	; 0x444
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d107      	bne.n	8005168 <HAL_TIM_PWM_Stop+0x84>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <HAL_TIM_PWM_Stop+0xb4>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f240 4344 	movw	r3, #1092	; 0x444
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d107      	bne.n	8005198 <HAL_TIM_PWM_Stop+0xb4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_TIM_PWM_Stop+0xc4>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a6:	e023      	b.n	80051f0 <HAL_TIM_PWM_Stop+0x10c>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d104      	bne.n	80051b8 <HAL_TIM_PWM_Stop+0xd4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b6:	e01b      	b.n	80051f0 <HAL_TIM_PWM_Stop+0x10c>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d104      	bne.n	80051c8 <HAL_TIM_PWM_Stop+0xe4>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c6:	e013      	b.n	80051f0 <HAL_TIM_PWM_Stop+0x10c>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d104      	bne.n	80051d8 <HAL_TIM_PWM_Stop+0xf4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d6:	e00b      	b.n	80051f0 <HAL_TIM_PWM_Stop+0x10c>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d104      	bne.n	80051e8 <HAL_TIM_PWM_Stop+0x104>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e6:	e003      	b.n	80051f0 <HAL_TIM_PWM_Stop+0x10c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40013400 	.word	0x40013400
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0202 	mvn.w	r2, #2
 800523c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fae3 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fad5 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fae6 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b04      	cmp	r3, #4
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0204 	mvn.w	r2, #4
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fab9 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 faab 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fabc 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0208 	mvn.w	r2, #8
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2204      	movs	r2, #4
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa8f 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa81 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fa92 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b10      	cmp	r3, #16
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b10      	cmp	r3, #16
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0210 	mvn.w	r2, #16
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2208      	movs	r2, #8
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa65 	bl	800581e <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa57 	bl	800580a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa68 	bl	8005832 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b01      	cmp	r3, #1
 8005382:	d107      	bne.n	8005394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0201 	mvn.w	r2, #1
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fb ff34 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d10e      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d107      	bne.n	80053c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 ff10 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	d10e      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b80      	cmp	r3, #128	; 0x80
 80053dc:	d107      	bne.n	80053ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 ff03 	bl	80061f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d10e      	bne.n	800541a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d107      	bne.n	800541a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa16 	bl	8005846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f06f 0220 	mvn.w	r2, #32
 800543e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fec3 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800546a:	2302      	movs	r3, #2
 800546c:	e0ff      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b14      	cmp	r3, #20
 800547a:	f200 80f0 	bhi.w	800565e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054d9 	.word	0x080054d9
 8005488:	0800565f 	.word	0x0800565f
 800548c:	0800565f 	.word	0x0800565f
 8005490:	0800565f 	.word	0x0800565f
 8005494:	08005519 	.word	0x08005519
 8005498:	0800565f 	.word	0x0800565f
 800549c:	0800565f 	.word	0x0800565f
 80054a0:	0800565f 	.word	0x0800565f
 80054a4:	0800555b 	.word	0x0800555b
 80054a8:	0800565f 	.word	0x0800565f
 80054ac:	0800565f 	.word	0x0800565f
 80054b0:	0800565f 	.word	0x0800565f
 80054b4:	0800559b 	.word	0x0800559b
 80054b8:	0800565f 	.word	0x0800565f
 80054bc:	0800565f 	.word	0x0800565f
 80054c0:	0800565f 	.word	0x0800565f
 80054c4:	080055dd 	.word	0x080055dd
 80054c8:	0800565f 	.word	0x0800565f
 80054cc:	0800565f 	.word	0x0800565f
 80054d0:	0800565f 	.word	0x0800565f
 80054d4:	0800561d 	.word	0x0800561d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fa56 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0208 	orr.w	r2, r2, #8
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0204 	bic.w	r2, r2, #4
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	619a      	str	r2, [r3, #24]
      break;
 8005516:	e0a5      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fac6 	bl	8005ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6999      	ldr	r1, [r3, #24]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	021a      	lsls	r2, r3, #8
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	619a      	str	r2, [r3, #24]
      break;
 8005558:	e084      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb2f 	bl	8005bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0208 	orr.w	r2, r2, #8
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0204 	bic.w	r2, r2, #4
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	61da      	str	r2, [r3, #28]
      break;
 8005598:	e064      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fb97 	bl	8005cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69d9      	ldr	r1, [r3, #28]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	021a      	lsls	r2, r3, #8
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	61da      	str	r2, [r3, #28]
      break;
 80055da:	e043      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fbe0 	bl	8005da8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0208 	orr.w	r2, r2, #8
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0204 	bic.w	r2, r2, #4
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800561a:	e023      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fc24 	bl	8005e70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005636:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	021a      	lsls	r2, r3, #8
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800565c:	e002      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
      break;
 8005662:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop

08005678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIM_ConfigClockSource+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e0b6      	b.n	8005802 <HAL_TIM_ConfigClockSource+0x18a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d0:	d03e      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0xd8>
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	f200 8087 	bhi.w	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056de:	f000 8086 	beq.w	80057ee <HAL_TIM_ConfigClockSource+0x176>
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d87f      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 80056e8:	2b70      	cmp	r3, #112	; 0x70
 80056ea:	d01a      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0xaa>
 80056ec:	2b70      	cmp	r3, #112	; 0x70
 80056ee:	d87b      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 80056f0:	2b60      	cmp	r3, #96	; 0x60
 80056f2:	d050      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x11e>
 80056f4:	2b60      	cmp	r3, #96	; 0x60
 80056f6:	d877      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 80056f8:	2b50      	cmp	r3, #80	; 0x50
 80056fa:	d03c      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0xfe>
 80056fc:	2b50      	cmp	r3, #80	; 0x50
 80056fe:	d873      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d058      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x13e>
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d86f      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 8005708:	2b30      	cmp	r3, #48	; 0x30
 800570a:	d064      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15e>
 800570c:	2b30      	cmp	r3, #48	; 0x30
 800570e:	d86b      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d060      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d867      	bhi.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d05c      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15e>
 800571c:	2b10      	cmp	r3, #16
 800571e:	d05a      	beq.n	80057d6 <HAL_TIM_ConfigClockSource+0x15e>
 8005720:	e062      	b.n	80057e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6899      	ldr	r1, [r3, #8]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f000 fc7d 	bl	8006030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	609a      	str	r2, [r3, #8]
      break;
 800574e:	e04f      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6899      	ldr	r1, [r3, #8]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f000 fc66 	bl	8006030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005772:	609a      	str	r2, [r3, #8]
      break;
 8005774:	e03c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fbda 	bl	8005f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2150      	movs	r1, #80	; 0x50
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fc33 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 8005794:	e02c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 fbf9 	bl	8005f9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2160      	movs	r1, #96	; 0x60
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc23 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 80057b4:	e01c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6859      	ldr	r1, [r3, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f000 fbba 	bl	8005f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fc13 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 80057d4:	e00c      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f000 fc0a 	bl	8005ffa <TIM_ITRx_SetConfig>
      break;
 80057e6:	e003      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <TIM_Base_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d00f      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3d      	ldr	r2, [pc, #244]	; (8005974 <TIM_Base_SetConfig+0x118>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3c      	ldr	r2, [pc, #240]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a3b      	ldr	r2, [pc, #236]	; (800597c <TIM_Base_SetConfig+0x120>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3a      	ldr	r2, [pc, #232]	; (8005980 <TIM_Base_SetConfig+0x124>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <TIM_Base_SetConfig+0x114>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01f      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058bc:	d01b      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <TIM_Base_SetConfig+0x118>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d017      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <TIM_Base_SetConfig+0x11c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2a      	ldr	r2, [pc, #168]	; (800597c <TIM_Base_SetConfig+0x120>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a29      	ldr	r2, [pc, #164]	; (8005980 <TIM_Base_SetConfig+0x124>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <TIM_Base_SetConfig+0x128>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a26      	ldr	r2, [pc, #152]	; (800598c <TIM_Base_SetConfig+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <TIM_Base_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a12      	ldr	r2, [pc, #72]	; (8005980 <TIM_Base_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a11      	ldr	r2, [pc, #68]	; (8005984 <TIM_Base_SetConfig+0x128>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TIM_Base_SetConfig+0x12c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a0f      	ldr	r2, [pc, #60]	; (800598c <TIM_Base_SetConfig+0x130>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40014000 	.word	0x40014000
 8005988:	40014400 	.word	0x40014400
 800598c:	40014800 	.word	0x40014800

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 0201 	bic.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0302 	bic.w	r3, r3, #2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <TIM_OC1_SetConfig+0x10c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_OC1_SetConfig+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <TIM_OC1_SetConfig+0x110>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_OC1_SetConfig+0x80>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <TIM_OC1_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_OC1_SetConfig+0x80>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_OC1_SetConfig+0x118>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC1_SetConfig+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a28      	ldr	r2, [pc, #160]	; (8005aac <TIM_OC1_SetConfig+0x11c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0308 	bic.w	r3, r3, #8
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <TIM_OC1_SetConfig+0x10c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_OC1_SetConfig+0xc2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <TIM_OC1_SetConfig+0x110>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_OC1_SetConfig+0xc2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <TIM_OC1_SetConfig+0x114>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_OC1_SetConfig+0xc2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <TIM_OC1_SetConfig+0x118>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC1_SetConfig+0xc2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <TIM_OC1_SetConfig+0x11c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <TIM_OC2_SetConfig+0x100>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC2_SetConfig+0x6c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <TIM_OC2_SetConfig+0x104>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <TIM_OC2_SetConfig+0x100>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00f      	beq.n	8005b60 <TIM_OC2_SetConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <TIM_OC2_SetConfig+0x104>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_OC2_SetConfig+0xb0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <TIM_OC2_SetConfig+0x108>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC2_SetConfig+0xb0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <TIM_OC2_SetConfig+0x10c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC2_SetConfig+0xb0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <TIM_OC2_SetConfig+0x110>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d113      	bne.n	8005b88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40013400 	.word	0x40013400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_OC3_SetConfig+0xfc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC3_SetConfig+0x6a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_OC3_SetConfig+0x100>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d10d      	bne.n	8005c4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <TIM_OC3_SetConfig+0xfc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_OC3_SetConfig+0xae>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1b      	ldr	r2, [pc, #108]	; (8005cc4 <TIM_OC3_SetConfig+0x100>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_OC3_SetConfig+0xae>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <TIM_OC3_SetConfig+0x104>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_OC3_SetConfig+0xae>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <TIM_OC3_SetConfig+0x108>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_OC3_SetConfig+0xae>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <TIM_OC3_SetConfig+0x10c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d113      	bne.n	8005c9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	621a      	str	r2, [r3, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40013400 	.word	0x40013400
 8005cc8:	40014000 	.word	0x40014000
 8005ccc:	40014400 	.word	0x40014400
 8005cd0:	40014800 	.word	0x40014800

08005cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <TIM_OC4_SetConfig+0xc0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00f      	beq.n	8005d58 <TIM_OC4_SetConfig+0x84>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <TIM_OC4_SetConfig+0xc4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <TIM_OC4_SetConfig+0x84>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a16      	ldr	r2, [pc, #88]	; (8005d9c <TIM_OC4_SetConfig+0xc8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_OC4_SetConfig+0x84>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <TIM_OC4_SetConfig+0xcc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC4_SetConfig+0x84>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <TIM_OC4_SetConfig+0xd0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d109      	bne.n	8005d6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800

08005da8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	041b      	lsls	r3, r3, #16
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <TIM_OC5_SetConfig+0xb4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00f      	beq.n	8005e22 <TIM_OC5_SetConfig+0x7a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <TIM_OC5_SetConfig+0xb8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_OC5_SetConfig+0x7a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC5_SetConfig+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_OC5_SetConfig+0x7a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <TIM_OC5_SetConfig+0xc0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_OC5_SetConfig+0x7a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <TIM_OC5_SetConfig+0xc4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d109      	bne.n	8005e36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40013400 	.word	0x40013400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	051b      	lsls	r3, r3, #20
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	; (8005f28 <TIM_OC6_SetConfig+0xb8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_OC6_SetConfig+0x7c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC6_SetConfig+0xbc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_OC6_SetConfig+0x7c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <TIM_OC6_SetConfig+0xc0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_OC6_SetConfig+0x7c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <TIM_OC6_SetConfig+0xc4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC6_SetConfig+0x7c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <TIM_OC6_SetConfig+0xc8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d109      	bne.n	8005f00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40013400 	.word	0x40013400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800

08005f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0201 	bic.w	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 030a 	bic.w	r3, r3, #10
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b087      	sub	sp, #28
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f023 0210 	bic.w	r2, r3, #16
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	031b      	lsls	r3, r3, #12
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	f043 0307 	orr.w	r3, r3, #7
 800601c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800604a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	431a      	orrs	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2201      	movs	r2, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1a      	ldr	r2, [r3, #32]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	43db      	mvns	r3, r3
 8006092:	401a      	ands	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e068      	b.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2d      	ldr	r2, [pc, #180]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d018      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4313      	orrs	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006208:	b480      	push	{r7}
 800620a:	b08b      	sub	sp, #44	; 0x2c
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	613b      	str	r3, [r7, #16]
  return result;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800622e:	2320      	movs	r3, #32
 8006230:	e003      	b.n	800623a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	fab3 f383 	clz	r3, r3
 8006238:	b2db      	uxtb	r3, r3
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2103      	movs	r1, #3
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	401a      	ands	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	fa93 f3a3 	rbit	r3, r3
 8006250:	61fb      	str	r3, [r7, #28]
  return result;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800625c:	2320      	movs	r3, #32
 800625e:	e003      	b.n	8006268 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	fa01 f303 	lsl.w	r3, r1, r3
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]
}
 8006276:	bf00      	nop
 8006278:	372c      	adds	r7, #44	; 0x2c
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b08b      	sub	sp, #44	; 0x2c
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	fa93 f3a3 	rbit	r3, r3
 80062cc:	613b      	str	r3, [r7, #16]
  return result;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80062d8:	2320      	movs	r3, #32
 80062da:	e003      	b.n	80062e4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	2103      	movs	r1, #3
 80062e8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
  return result;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006306:	2320      	movs	r3, #32
 8006308:	e003      	b.n	8006312 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	fab3 f383 	clz	r3, r3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	431a      	orrs	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006320:	bf00      	nop
 8006322:	372c      	adds	r7, #44	; 0x2c
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800632c:	b480      	push	{r7}
 800632e:	b08b      	sub	sp, #44	; 0x2c
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	fa93 f3a3 	rbit	r3, r3
 8006346:	613b      	str	r3, [r7, #16]
  return result;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006352:	2320      	movs	r3, #32
 8006354:	e003      	b.n	800635e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	2103      	movs	r1, #3
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	401a      	ands	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	61fb      	str	r3, [r7, #28]
  return result;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006380:	2320      	movs	r3, #32
 8006382:	e003      	b.n	800638c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	fab3 f383 	clz	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60da      	str	r2, [r3, #12]
}
 800639a:	bf00      	nop
 800639c:	372c      	adds	r7, #44	; 0x2c
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b08b      	sub	sp, #44	; 0x2c
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	fa93 f3a3 	rbit	r3, r3
 80063c0:	613b      	str	r3, [r7, #16]
  return result;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80063cc:	2320      	movs	r3, #32
 80063ce:	e003      	b.n	80063d8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	fab3 f383 	clz	r3, r3
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	210f      	movs	r1, #15
 80063dc:	fa01 f303 	lsl.w	r3, r1, r3
 80063e0:	43db      	mvns	r3, r3
 80063e2:	401a      	ands	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	fa93 f3a3 	rbit	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
  return result;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80063fa:	2320      	movs	r3, #32
 80063fc:	e003      	b.n	8006406 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	fab3 f383 	clz	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	431a      	orrs	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006414:	bf00      	nop
 8006416:	372c      	adds	r7, #44	; 0x2c
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006420:	b480      	push	{r7}
 8006422:	b08b      	sub	sp, #44	; 0x2c
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	fa93 f3a3 	rbit	r3, r3
 800643c:	613b      	str	r3, [r7, #16]
  return result;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006448:	2320      	movs	r3, #32
 800644a:	e003      	b.n	8006454 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	fab3 f383 	clz	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	210f      	movs	r1, #15
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	fa93 f3a3 	rbit	r3, r3
 800646c:	61fb      	str	r3, [r7, #28]
  return result;
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006478:	2320      	movs	r3, #32
 800647a:	e003      	b.n	8006484 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	fab3 f383 	clz	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006492:	bf00      	nop
 8006494:	372c      	adds	r7, #44	; 0x2c
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b088      	sub	sp, #32
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	fa93 f3a3 	rbit	r3, r3
 80064b4:	60fb      	str	r3, [r7, #12]
  return result;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <LL_GPIO_Init+0x26>
    return 32U;
 80064c0:	2320      	movs	r3, #32
 80064c2:	e003      	b.n	80064cc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	fab3 f383 	clz	r3, r3
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80064ce:	e048      	b.n	8006562 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2101      	movs	r1, #1
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	fa01 f303 	lsl.w	r3, r1, r3
 80064dc:	4013      	ands	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d03a      	beq.n	800655c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d003      	beq.n	80064f6 <LL_GPIO_Init+0x58>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d10e      	bne.n	8006514 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	461a      	mov	r2, r3
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fed7 	bl	80062b2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6819      	ldr	r1, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	461a      	mov	r2, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7ff feb7 	bl	8006282 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	461a      	mov	r2, r3
 800651a:	69b9      	ldr	r1, [r7, #24]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ff05 	bl	800632c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d111      	bne.n	800654e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	2bff      	cmp	r3, #255	; 0xff
 800652e:	d807      	bhi.n	8006540 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	461a      	mov	r2, r3
 8006536:	69b9      	ldr	r1, [r7, #24]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff34 	bl	80063a6 <LL_GPIO_SetAFPin_0_7>
 800653e:	e006      	b.n	800654e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	461a      	mov	r2, r3
 8006546:	69b9      	ldr	r1, [r7, #24]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff69 	bl	8006420 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	461a      	mov	r2, r3
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fe56 	bl	8006208 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3301      	adds	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1af      	bne.n	80064d0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <LL_RCC_HSI_IsReady+0x24>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658c:	d101      	bne.n	8006592 <LL_RCC_HSI_IsReady+0x16>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <LL_RCC_HSI_IsReady+0x18>
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000

080065a4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <LL_RCC_LSE_IsReady+0x24>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d101      	bne.n	80065ba <LL_RCC_LSE_IsReady+0x16>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <LL_RCC_LSE_IsReady+0x18>
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000

080065cc <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d101      	bne.n	80065e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40021000 	.word	0x40021000

080065f0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <LL_RCC_MSI_GetRange+0x18>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000

0800660c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006616:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800661a:	4618      	mov	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40021000 	.word	0x40021000

08006628 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <LL_RCC_GetSysClkSource+0x18>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 030c 	and.w	r3, r3, #12
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000

08006644 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <LL_RCC_GetAHBPrescaler+0x18>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000

08006660 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800666c:	4618      	mov	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40021000 	.word	0x40021000

0800667c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40021000 	.word	0x40021000

08006698 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <LL_RCC_GetUSARTClockSource+0x24>)
 80066a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	401a      	ands	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	4313      	orrs	r3, r2
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	40021000 	.word	0x40021000

080066c0 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <LL_RCC_GetUARTClockSource+0x24>)
 80066ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	401a      	ands	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	4313      	orrs	r3, r2
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40021000 	.word	0x40021000

080066e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80066ec:	4b04      	ldr	r3, [pc, #16]	; (8006700 <LL_RCC_PLL_GetMainSource+0x18>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0303 	and.w	r3, r3, #3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000

08006704 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <LL_RCC_PLL_GetN+0x18>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40021000 	.word	0x40021000

08006720 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <LL_RCC_PLL_GetR+0x18>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006740:	4b04      	ldr	r3, [pc, #16]	; (8006754 <LL_RCC_PLL_GetDivider+0x18>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d137      	bne.n	80067da <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff ff94 	bl	8006698 <LL_RCC_GetUSARTClockSource>
 8006770:	4603      	mov	r3, r0
 8006772:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006776:	2b03      	cmp	r3, #3
 8006778:	f200 80b3 	bhi.w	80068e2 <LL_RCC_GetUSARTClockFreq+0x18a>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067c3 	.word	0x080067c3
 8006788:	08006795 	.word	0x08006795
 800678c:	0800679d 	.word	0x0800679d
 8006790:	080067af 	.word	0x080067af
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006794:	f000 f95c 	bl	8006a50 <RCC_GetSystemClockFreq>
 8006798:	60f8      	str	r0, [r7, #12]
        break;
 800679a:	e0b5      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800679c:	f7ff feee 	bl	800657c <LL_RCC_HSI_IsReady>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 809f 	beq.w	80068e6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80067a8:	4b5a      	ldr	r3, [pc, #360]	; (8006914 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80067aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067ac:	e09b      	b.n	80068e6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80067ae:	f7ff fef9 	bl	80065a4 <LL_RCC_LSE_IsReady>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8098 	beq.w	80068ea <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80067c0:	e093      	b.n	80068ea <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80067c2:	f000 f945 	bl	8006a50 <RCC_GetSystemClockFreq>
 80067c6:	4603      	mov	r3, r0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 f9d1 	bl	8006b70 <RCC_GetHCLKClockFreq>
 80067ce:	4603      	mov	r3, r0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f9f7 	bl	8006bc4 <RCC_GetPCLK2ClockFreq>
 80067d6:	60f8      	str	r0, [r7, #12]
        break;
 80067d8:	e096      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d146      	bne.n	800686e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ff59 	bl	8006698 <LL_RCC_GetUSARTClockSource>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80067ec:	2b0c      	cmp	r3, #12
 80067ee:	d87e      	bhi.n	80068ee <LL_RCC_GetUSARTClockFreq+0x196>
 80067f0:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80067f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f6:	bf00      	nop
 80067f8:	08006857 	.word	0x08006857
 80067fc:	080068ef 	.word	0x080068ef
 8006800:	080068ef 	.word	0x080068ef
 8006804:	080068ef 	.word	0x080068ef
 8006808:	0800682d 	.word	0x0800682d
 800680c:	080068ef 	.word	0x080068ef
 8006810:	080068ef 	.word	0x080068ef
 8006814:	080068ef 	.word	0x080068ef
 8006818:	08006835 	.word	0x08006835
 800681c:	080068ef 	.word	0x080068ef
 8006820:	080068ef 	.word	0x080068ef
 8006824:	080068ef 	.word	0x080068ef
 8006828:	08006845 	.word	0x08006845
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800682c:	f000 f910 	bl	8006a50 <RCC_GetSystemClockFreq>
 8006830:	60f8      	str	r0, [r7, #12]
        break;
 8006832:	e069      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006834:	f7ff fea2 	bl	800657c <LL_RCC_HSI_IsReady>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d059      	beq.n	80068f2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800683e:	4b35      	ldr	r3, [pc, #212]	; (8006914 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8006840:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006842:	e056      	b.n	80068f2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006844:	f7ff feae 	bl	80065a4 <LL_RCC_LSE_IsReady>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d053      	beq.n	80068f6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006854:	e04f      	b.n	80068f6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006856:	f000 f8fb 	bl	8006a50 <RCC_GetSystemClockFreq>
 800685a:	4603      	mov	r3, r0
 800685c:	4618      	mov	r0, r3
 800685e:	f000 f987 	bl	8006b70 <RCC_GetHCLKClockFreq>
 8006862:	4603      	mov	r3, r0
 8006864:	4618      	mov	r0, r3
 8006866:	f000 f999 	bl	8006b9c <RCC_GetPCLK1ClockFreq>
 800686a:	60f8      	str	r0, [r7, #12]
        break;
 800686c:	e04c      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d142      	bne.n	80068fa <LL_RCC_GetUSARTClockFreq+0x1a2>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff ff0f 	bl	8006698 <LL_RCC_GetUSARTClockSource>
 800687a:	4603      	mov	r3, r0
 800687c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006880:	d01a      	beq.n	80068b8 <LL_RCC_GetUSARTClockFreq+0x160>
 8006882:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8006886:	d83a      	bhi.n	80068fe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006888:	4a23      	ldr	r2, [pc, #140]	; (8006918 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00c      	beq.n	80068a8 <LL_RCC_GetUSARTClockFreq+0x150>
 800688e:	4a22      	ldr	r2, [pc, #136]	; (8006918 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d834      	bhi.n	80068fe <LL_RCC_GetUSARTClockFreq+0x1a6>
 8006894:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006898:	d017      	beq.n	80068ca <LL_RCC_GetUSARTClockFreq+0x172>
 800689a:	4a20      	ldr	r2, [pc, #128]	; (800691c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d12e      	bne.n	80068fe <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80068a0:	f000 f8d6 	bl	8006a50 <RCC_GetSystemClockFreq>
 80068a4:	60f8      	str	r0, [r7, #12]
          break;
 80068a6:	e02f      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80068a8:	f7ff fe68 	bl	800657c <LL_RCC_HSI_IsReady>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d027      	beq.n	8006902 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = HSI_VALUE;
 80068b2:	4b18      	ldr	r3, [pc, #96]	; (8006914 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80068b4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80068b6:	e024      	b.n	8006902 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80068b8:	f7ff fe74 	bl	80065a4 <LL_RCC_LSE_IsReady>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d021      	beq.n	8006906 <LL_RCC_GetUSARTClockFreq+0x1ae>
          {
            usart_frequency = LSE_VALUE;
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	60fb      	str	r3, [r7, #12]
          }
          break;
 80068c8:	e01d      	b.n	8006906 <LL_RCC_GetUSARTClockFreq+0x1ae>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80068ca:	f000 f8c1 	bl	8006a50 <RCC_GetSystemClockFreq>
 80068ce:	4603      	mov	r3, r0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f94d 	bl	8006b70 <RCC_GetHCLKClockFreq>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f95f 	bl	8006b9c <RCC_GetPCLK1ClockFreq>
 80068de:	60f8      	str	r0, [r7, #12]
          break;
 80068e0:	e012      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068e2:	bf00      	nop
 80068e4:	e010      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068e6:	bf00      	nop
 80068e8:	e00e      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068ea:	bf00      	nop
 80068ec:	e00c      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068ee:	bf00      	nop
 80068f0:	e00a      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068f2:	bf00      	nop
 80068f4:	e008      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
        break;
 80068f6:	bf00      	nop
 80068f8:	e006      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>

        default:
          break;
      }
    }
 80068fa:	bf00      	nop
 80068fc:	e004      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 80068fe:	bf00      	nop
 8006900:	e002      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <LL_RCC_GetUSARTClockFreq+0x1b0>
          break;
 8006906:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006908:	68fb      	ldr	r3, [r7, #12]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	00f42400 	.word	0x00f42400
 8006918:	00300020 	.word	0x00300020
 800691c:	00300010 	.word	0x00300010

08006920 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2bc0      	cmp	r3, #192	; 0xc0
 8006930:	d136      	bne.n	80069a0 <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fec4 	bl	80066c0 <LL_RCC_GetUARTClockSource>
 8006938:	4603      	mov	r3, r0
 800693a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800693e:	d01a      	beq.n	8006976 <LL_RCC_GetUARTClockFreq+0x56>
 8006940:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8006944:	d82e      	bhi.n	80069a4 <LL_RCC_GetUARTClockFreq+0x84>
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <LL_RCC_GetUARTClockFreq+0x11c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00c      	beq.n	8006966 <LL_RCC_GetUARTClockFreq+0x46>
 800694c:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <LL_RCC_GetUARTClockFreq+0x11c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d828      	bhi.n	80069a4 <LL_RCC_GetUARTClockFreq+0x84>
 8006952:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006956:	d017      	beq.n	8006988 <LL_RCC_GetUARTClockFreq+0x68>
 8006958:	4a39      	ldr	r2, [pc, #228]	; (8006a40 <LL_RCC_GetUARTClockFreq+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d122      	bne.n	80069a4 <LL_RCC_GetUARTClockFreq+0x84>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800695e:	f000 f877 	bl	8006a50 <RCC_GetSystemClockFreq>
 8006962:	60f8      	str	r0, [r7, #12]
        break;
 8006964:	e023      	b.n	80069ae <LL_RCC_GetUARTClockFreq+0x8e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8006966:	f7ff fe09 	bl	800657c <LL_RCC_HSI_IsReady>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = HSI_VALUE;
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <LL_RCC_GetUARTClockFreq+0x124>)
 8006972:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006974:	e018      	b.n	80069a8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8006976:	f7ff fe15 	bl	80065a4 <LL_RCC_LSE_IsReady>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d015      	beq.n	80069ac <LL_RCC_GetUARTClockFreq+0x8c>
        {
          uart_frequency = LSE_VALUE;
 8006980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006984:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006986:	e011      	b.n	80069ac <LL_RCC_GetUARTClockFreq+0x8c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006988:	f000 f862 	bl	8006a50 <RCC_GetSystemClockFreq>
 800698c:	4603      	mov	r3, r0
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f8ee 	bl	8006b70 <RCC_GetHCLKClockFreq>
 8006994:	4603      	mov	r3, r0
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f900 	bl	8006b9c <RCC_GetPCLK1ClockFreq>
 800699c:	60f8      	str	r0, [r7, #12]
        break;
 800699e:	e006      	b.n	80069ae <LL_RCC_GetUARTClockFreq+0x8e>

      default:
        break;
    }
  }
 80069a0:	bf00      	nop
 80069a2:	e004      	b.n	80069ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80069a4:	bf00      	nop
 80069a6:	e002      	b.n	80069ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <LL_RCC_GetUARTClockFreq+0x8e>
        break;
 80069ac:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b4:	d136      	bne.n	8006a24 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fe82 	bl	80066c0 <LL_RCC_GetUARTClockSource>
 80069bc:	4603      	mov	r3, r0
 80069be:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80069c2:	d01a      	beq.n	80069fa <LL_RCC_GetUARTClockFreq+0xda>
 80069c4:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80069c8:	d82e      	bhi.n	8006a28 <LL_RCC_GetUARTClockFreq+0x108>
 80069ca:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <LL_RCC_GetUARTClockFreq+0x128>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00c      	beq.n	80069ea <LL_RCC_GetUARTClockFreq+0xca>
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <LL_RCC_GetUARTClockFreq+0x128>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d828      	bhi.n	8006a28 <LL_RCC_GetUARTClockFreq+0x108>
 80069d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069da:	d017      	beq.n	8006a0c <LL_RCC_GetUARTClockFreq+0xec>
 80069dc:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <LL_RCC_GetUARTClockFreq+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d122      	bne.n	8006a28 <LL_RCC_GetUARTClockFreq+0x108>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80069e2:	f000 f835 	bl	8006a50 <RCC_GetSystemClockFreq>
 80069e6:	60f8      	str	r0, [r7, #12]
        break;
 80069e8:	e023      	b.n	8006a32 <LL_RCC_GetUARTClockFreq+0x112>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80069ea:	f7ff fdc7 	bl	800657c <LL_RCC_HSI_IsReady>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01b      	beq.n	8006a2c <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = HSI_VALUE;
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <LL_RCC_GetUARTClockFreq+0x124>)
 80069f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80069f8:	e018      	b.n	8006a2c <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80069fa:	f7ff fdd3 	bl	80065a4 <LL_RCC_LSE_IsReady>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <LL_RCC_GetUARTClockFreq+0x110>
        {
          uart_frequency = LSE_VALUE;
 8006a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a08:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006a0a:	e011      	b.n	8006a30 <LL_RCC_GetUARTClockFreq+0x110>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006a0c:	f000 f820 	bl	8006a50 <RCC_GetSystemClockFreq>
 8006a10:	4603      	mov	r3, r0
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f8ac 	bl	8006b70 <RCC_GetHCLKClockFreq>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f8be 	bl	8006b9c <RCC_GetPCLK1ClockFreq>
 8006a20:	60f8      	str	r0, [r7, #12]
        break;
 8006a22:	e006      	b.n	8006a32 <LL_RCC_GetUARTClockFreq+0x112>

      default:
        break;
    }
  }
 8006a24:	bf00      	nop
 8006a26:	e004      	b.n	8006a32 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e002      	b.n	8006a32 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <LL_RCC_GetUARTClockFreq+0x112>
        break;
 8006a30:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8006a32:	68fb      	ldr	r3, [r7, #12]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	00c00080 	.word	0x00c00080
 8006a40:	00c00040 	.word	0x00c00040
 8006a44:	00f42400 	.word	0x00f42400
 8006a48:	03000200 	.word	0x03000200
 8006a4c:	03000100 	.word	0x03000100

08006a50 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006a56:	f7ff fde7 	bl	8006628 <LL_RCC_GetSysClkSource>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	d851      	bhi.n	8006b04 <RCC_GetSystemClockFreq+0xb4>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <RCC_GetSystemClockFreq+0x18>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a9d 	.word	0x08006a9d
 8006a6c:	08006b05 	.word	0x08006b05
 8006a70:	08006b05 	.word	0x08006b05
 8006a74:	08006b05 	.word	0x08006b05
 8006a78:	08006af1 	.word	0x08006af1
 8006a7c:	08006b05 	.word	0x08006b05
 8006a80:	08006b05 	.word	0x08006b05
 8006a84:	08006b05 	.word	0x08006b05
 8006a88:	08006af7 	.word	0x08006af7
 8006a8c:	08006b05 	.word	0x08006b05
 8006a90:	08006b05 	.word	0x08006b05
 8006a94:	08006b05 	.word	0x08006b05
 8006a98:	08006afd 	.word	0x08006afd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a9c:	f7ff fd96 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d111      	bne.n	8006aca <RCC_GetSystemClockFreq+0x7a>
 8006aa6:	f7ff fd91 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <RCC_GetSystemClockFreq+0x6a>
 8006ab0:	f7ff fd9e 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	0a1b      	lsrs	r3, r3, #8
 8006ab8:	e003      	b.n	8006ac2 <RCC_GetSystemClockFreq+0x72>
 8006aba:	f7ff fda7 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	4a28      	ldr	r2, [pc, #160]	; (8006b64 <RCC_GetSystemClockFreq+0x114>)
 8006ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac8:	e010      	b.n	8006aec <RCC_GetSystemClockFreq+0x9c>
 8006aca:	f7ff fd7f 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <RCC_GetSystemClockFreq+0x8e>
 8006ad4:	f7ff fd8c 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	091b      	lsrs	r3, r3, #4
 8006adc:	e003      	b.n	8006ae6 <RCC_GetSystemClockFreq+0x96>
 8006ade:	f7ff fd95 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	091b      	lsrs	r3, r3, #4
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <RCC_GetSystemClockFreq+0x114>)
 8006ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aec:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006aee:	e033      	b.n	8006b58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006af0:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <RCC_GetSystemClockFreq+0x118>)
 8006af2:	607b      	str	r3, [r7, #4]
      break;
 8006af4:	e030      	b.n	8006b58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006af6:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <RCC_GetSystemClockFreq+0x11c>)
 8006af8:	607b      	str	r3, [r7, #4]
      break;
 8006afa:	e02d      	b.n	8006b58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006afc:	f000 f876 	bl	8006bec <RCC_PLL_GetFreqDomain_SYS>
 8006b00:	6078      	str	r0, [r7, #4]
      break;
 8006b02:	e029      	b.n	8006b58 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006b04:	f7ff fd62 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d111      	bne.n	8006b32 <RCC_GetSystemClockFreq+0xe2>
 8006b0e:	f7ff fd5d 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <RCC_GetSystemClockFreq+0xd2>
 8006b18:	f7ff fd6a 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	e003      	b.n	8006b2a <RCC_GetSystemClockFreq+0xda>
 8006b22:	f7ff fd73 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006b26:	4603      	mov	r3, r0
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	4a0e      	ldr	r2, [pc, #56]	; (8006b64 <RCC_GetSystemClockFreq+0x114>)
 8006b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b30:	e010      	b.n	8006b54 <RCC_GetSystemClockFreq+0x104>
 8006b32:	f7ff fd4b 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <RCC_GetSystemClockFreq+0xf6>
 8006b3c:	f7ff fd58 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006b40:	4603      	mov	r3, r0
 8006b42:	091b      	lsrs	r3, r3, #4
 8006b44:	e003      	b.n	8006b4e <RCC_GetSystemClockFreq+0xfe>
 8006b46:	f7ff fd61 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	091b      	lsrs	r3, r3, #4
 8006b4e:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <RCC_GetSystemClockFreq+0x114>)
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006b56:	bf00      	nop
  }

  return frequency;
 8006b58:	687b      	ldr	r3, [r7, #4]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	08009a28 	.word	0x08009a28
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	007a1200 	.word	0x007a1200

08006b70 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006b78:	f7ff fd64 	bl	8006644 <LL_RCC_GetAHBPrescaler>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <RCC_GetHCLKClockFreq+0x28>)
 8006b86:	5cd3      	ldrb	r3, [r2, r3]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	40d3      	lsrs	r3, r2
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	08009a10 	.word	0x08009a10

08006b9c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006ba4:	f7ff fd5c 	bl	8006660 <LL_RCC_GetAPB1Prescaler>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <RCC_GetPCLK1ClockFreq+0x24>)
 8006bae:	5cd3      	ldrb	r3, [r2, r3]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	40d3      	lsrs	r3, r2
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08009a20 	.word	0x08009a20

08006bc4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006bcc:	f7ff fd56 	bl	800667c <LL_RCC_GetAPB2Prescaler>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	0adb      	lsrs	r3, r3, #11
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <RCC_GetPCLK2ClockFreq+0x24>)
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	40d3      	lsrs	r3, r2
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	08009a20 	.word	0x08009a20

08006bec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006bf2:	f7ff fd79 	bl	80066e8 <LL_RCC_PLL_GetMainSource>
 8006bf6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d036      	beq.n	8006c6c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d836      	bhi.n	8006c72 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d003      	beq.n	8006c12 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d02a      	beq.n	8006c66 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006c10:	e02f      	b.n	8006c72 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c12:	f7ff fcdb 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d111      	bne.n	8006c40 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006c1c:	f7ff fcd6 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d004      	beq.n	8006c30 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006c26:	f7ff fce3 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	e003      	b.n	8006c38 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006c30:	f7ff fcec 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c34:	4603      	mov	r3, r0
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	4a2f      	ldr	r2, [pc, #188]	; (8006cf8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3e:	e010      	b.n	8006c62 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006c40:	f7ff fcc4 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006c4a:	f7ff fcd1 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	e003      	b.n	8006c5c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006c54:	f7ff fcda 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c62:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006c64:	e02f      	b.n	8006cc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006c66:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006c68:	607b      	str	r3, [r7, #4]
      break;
 8006c6a:	e02c      	b.n	8006cc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006c6e:	607b      	str	r3, [r7, #4]
      break;
 8006c70:	e029      	b.n	8006cc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c72:	f7ff fcab 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d111      	bne.n	8006ca0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006c7c:	f7ff fca6 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006c86:	f7ff fcb3 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	0a1b      	lsrs	r3, r3, #8
 8006c8e:	e003      	b.n	8006c98 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006c90:	f7ff fcbc 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c94:	4603      	mov	r3, r0
 8006c96:	0a1b      	lsrs	r3, r3, #8
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c9e:	e010      	b.n	8006cc2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006ca0:	f7ff fc94 	bl	80065cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006caa:	f7ff fca1 	bl	80065f0 <LL_RCC_MSI_GetRange>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	091b      	lsrs	r3, r3, #4
 8006cb2:	e003      	b.n	8006cbc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006cb4:	f7ff fcaa 	bl	800660c <LL_RCC_MSI_GetRangeAfterStandby>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	4a0e      	ldr	r2, [pc, #56]	; (8006cf8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006cc4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006cc6:	f7ff fd39 	bl	800673c <LL_RCC_PLL_GetDivider>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	091b      	lsrs	r3, r3, #4
 8006cce:	3301      	adds	r3, #1
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	fbb2 f4f3 	udiv	r4, r2, r3
 8006cd6:	f7ff fd15 	bl	8006704 <LL_RCC_PLL_GetN>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	fb03 f404 	mul.w	r4, r3, r4
 8006ce0:	f7ff fd1e 	bl	8006720 <LL_RCC_PLL_GetR>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	0e5b      	lsrs	r3, r3, #25
 8006ce8:	3301      	adds	r3, #1
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}
 8006cf8:	08009a28 	.word	0x08009a28
 8006cfc:	00f42400 	.word	0x00f42400
 8006d00:	007a1200 	.word	0x007a1200

08006d04 <LL_USART_IsEnabled>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <LL_USART_IsEnabled+0x18>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e000      	b.n	8006d1e <LL_USART_IsEnabled+0x1a>
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <LL_USART_SetStopBitsLength>:
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	605a      	str	r2, [r3, #4]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <LL_USART_SetHWFlowCtrl>:
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	609a      	str	r2, [r3, #8]
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <LL_USART_SetBaudRate>:
{
 8006d76:	b480      	push	{r7}
 8006d78:	b087      	sub	sp, #28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8a:	d11a      	bne.n	8006dc2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	005a      	lsls	r2, r3, #1
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	441a      	add	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006da6:	4013      	ands	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	60da      	str	r2, [r3, #12]
}
 8006dc0:	e00a      	b.n	8006dd8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	085a      	lsrs	r2, r3, #1
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	441a      	add	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	60da      	str	r2, [r3, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ff84 	bl	8006d04 <LL_USART_IsEnabled>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d15b      	bne.n	8006eba <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <LL_USART_Init+0xe0>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	6851      	ldr	r1, [r2, #4]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	68d2      	ldr	r2, [r2, #12]
 8006e12:	4311      	orrs	r1, r2
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	6912      	ldr	r2, [r2, #16]
 8006e18:	4311      	orrs	r1, r2
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	6992      	ldr	r2, [r2, #24]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff7c 	bl	8006d2a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff ff89 	bl	8006d50 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a21      	ldr	r2, [pc, #132]	; (8006ec8 <LL_USART_Init+0xe4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d104      	bne.n	8006e50 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006e46:	2003      	movs	r0, #3
 8006e48:	f7ff fc86 	bl	8006758 <LL_RCC_GetUSARTClockFreq>
 8006e4c:	60b8      	str	r0, [r7, #8]
 8006e4e:	e023      	b.n	8006e98 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <LL_USART_Init+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d104      	bne.n	8006e62 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006e58:	200c      	movs	r0, #12
 8006e5a:	f7ff fc7d 	bl	8006758 <LL_RCC_GetUSARTClockFreq>
 8006e5e:	60b8      	str	r0, [r7, #8]
 8006e60:	e01a      	b.n	8006e98 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <LL_USART_Init+0xec>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d104      	bne.n	8006e74 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006e6a:	2030      	movs	r0, #48	; 0x30
 8006e6c:	f7ff fc74 	bl	8006758 <LL_RCC_GetUSARTClockFreq>
 8006e70:	60b8      	str	r0, [r7, #8]
 8006e72:	e011      	b.n	8006e98 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <LL_USART_Init+0xf0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d104      	bne.n	8006e86 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8006e7c:	20c0      	movs	r0, #192	; 0xc0
 8006e7e:	f7ff fd4f 	bl	8006920 <LL_RCC_GetUARTClockFreq>
 8006e82:	60b8      	str	r0, [r7, #8]
 8006e84:	e008      	b.n	8006e98 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <LL_USART_Init+0xf4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d104      	bne.n	8006e98 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8006e8e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8006e92:	f7ff fd45 	bl	8006920 <LL_RCC_GetUARTClockFreq>
 8006e96:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff ff5e 	bl	8006d76 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	efff69f3 	.word	0xefff69f3
 8006ec8:	40013800 	.word	0x40013800
 8006ecc:	40004400 	.word	0x40004400
 8006ed0:	40004800 	.word	0x40004800
 8006ed4:	40004c00 	.word	0x40004c00
 8006ed8:	40005000 	.word	0x40005000

08006edc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eee:	2b84      	cmp	r3, #132	; 0x84
 8006ef0:	d005      	beq.n	8006efe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ef2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	3303      	adds	r3, #3
 8006efc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f10:	f000 fee6 	bl	8007ce0 <vTaskStartScheduler>
  
  return osOK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1c:	b089      	sub	sp, #36	; 0x24
 8006f1e:	af04      	add	r7, sp, #16
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d020      	beq.n	8006f6e <osThreadCreate+0x54>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01c      	beq.n	8006f6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685c      	ldr	r4, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681d      	ldr	r5, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691e      	ldr	r6, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ffc8 	bl	8006edc <makeFreeRtosPriority>
 8006f4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f56:	9202      	str	r2, [sp, #8]
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	9100      	str	r1, [sp, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	4632      	mov	r2, r6
 8006f60:	4629      	mov	r1, r5
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fcdd 	bl	8007922 <xTaskCreateStatic>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e01c      	b.n	8006fa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685c      	ldr	r4, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f7a:	b29e      	uxth	r6, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ffaa 	bl	8006edc <makeFreeRtosPriority>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	f107 030c 	add.w	r3, r7, #12
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9200      	str	r2, [sp, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	4632      	mov	r2, r6
 8006f96:	4629      	mov	r1, r5
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fd1f 	bl	80079dc <xTaskCreate>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d001      	beq.n	8006fa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <osDelay+0x16>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	e000      	b.n	8006fca <osDelay+0x18>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fe54 	bl	8007c78 <vTaskDelay>
  
  return osOK;
 8006fd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006fe0:	201c      	movs	r0, #28
 8006fe2:	f001 fde9 	bl	8008bb8 <pvPortMalloc>
 8006fe6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f808 	bl	800700e <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007004:	687b      	ldr	r3, [r7, #4]
	}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f103 0208 	add.w	r2, r3, #8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f103 0208 	add.w	r2, r3, #8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f103 0208 	add.w	r2, r3, #8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e00c      	b.n	80070ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3308      	adds	r3, #8
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e002      	b.n	80070de <vListInsert+0x2e>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d2f6      	bcs.n	80070d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6892      	ldr	r2, [r2, #8]
 8007138:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6852      	ldr	r2, [r2, #4]
 8007142:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d103      	bne.n	8007156 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071a2:	f001 fbe7 	bl	8008974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	441a      	add	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	3b01      	subs	r3, #1
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	22ff      	movs	r2, #255	; 0xff
 80071ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d114      	bne.n	8007222 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01a      	beq.n	8007236 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3310      	adds	r3, #16
 8007204:	4618      	mov	r0, r3
 8007206:	f000 ffbd 	bl	8008184 <xTaskRemoveFromEventList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d012      	beq.n	8007236 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <xQueueGenericReset+0xcc>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	e009      	b.n	8007236 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3310      	adds	r3, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fef1 	bl	800700e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	3324      	adds	r3, #36	; 0x24
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff feec 	bl	800700e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007236:	f001 fbcd 	bl	80089d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800723a:	2301      	movs	r3, #1
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xQueueGenericCreate+0x2a>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	613b      	str	r3, [r7, #16]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3348      	adds	r3, #72	; 0x48
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fc99 	bl	8008bb8 <pvPortMalloc>
 8007286:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d011      	beq.n	80072b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3348      	adds	r3, #72	; 0x48
 8007296:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f805 	bl	80072bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072b2:	69bb      	ldr	r3, [r7, #24]
	}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3720      	adds	r7, #32
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e002      	b.n	80072de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072ea:	2101      	movs	r1, #1
 80072ec:	69b8      	ldr	r0, [r7, #24]
 80072ee:	f7ff ff43 	bl	8007178 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	; 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xQueueGenericSend+0x32>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <xQueueGenericSend+0x40>
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <xQueueGenericSend+0x44>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <xQueueGenericSend+0x46>
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <xQueueGenericSend+0x60>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d103      	bne.n	800736a <xQueueGenericSend+0x6e>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	2b01      	cmp	r3, #1
 8007368:	d101      	bne.n	800736e <xQueueGenericSend+0x72>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <xQueueGenericSend+0x74>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <xQueueGenericSend+0x8e>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	623b      	str	r3, [r7, #32]
}
 8007386:	bf00      	nop
 8007388:	e7fe      	b.n	8007388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800738a:	f001 f8bb 	bl	8008504 <xTaskGetSchedulerState>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <xQueueGenericSend+0x9e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <xQueueGenericSend+0xa2>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericSend+0xa4>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericSend+0xbe>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	61fb      	str	r3, [r7, #28]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ba:	f001 fadb 	bl	8008974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d302      	bcc.n	80073d0 <xQueueGenericSend+0xd4>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d129      	bne.n	8007424 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d6:	f000 f9aa 	bl	800772e <prvCopyDataToQueue>
 80073da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 fecb 	bl	8008184 <xTaskRemoveFromEventList>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d013      	beq.n	800741c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073f4:	4b3f      	ldr	r3, [pc, #252]	; (80074f4 <xQueueGenericSend+0x1f8>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	e00a      	b.n	800741c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800740c:	4b39      	ldr	r3, [pc, #228]	; (80074f4 <xQueueGenericSend+0x1f8>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800741c:	f001 fada 	bl	80089d4 <vPortExitCritical>
				return pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	e063      	b.n	80074ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800742a:	f001 fad3 	bl	80089d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800742e:	2300      	movs	r3, #0
 8007430:	e05c      	b.n	80074ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007438:	f107 0314 	add.w	r3, r7, #20
 800743c:	4618      	mov	r0, r3
 800743e:	f000 ff03 	bl	8008248 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007442:	2301      	movs	r3, #1
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007446:	f001 fac5 	bl	80089d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800744a:	f000 fcb3 	bl	8007db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800744e:	f001 fa91 	bl	8008974 <vPortEnterCritical>
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007458:	b25b      	sxtb	r3, r3
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d103      	bne.n	8007468 <xQueueGenericSend+0x16c>
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800746e:	b25b      	sxtb	r3, r3
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d103      	bne.n	800747e <xQueueGenericSend+0x182>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800747e:	f001 faa9 	bl	80089d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007482:	1d3a      	adds	r2, r7, #4
 8007484:	f107 0314 	add.w	r3, r7, #20
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fef2 	bl	8008274 <xTaskCheckForTimeOut>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d124      	bne.n	80074e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007498:	f000 fa2b 	bl	80078f2 <prvIsQueueFull>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d018      	beq.n	80074d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	3310      	adds	r3, #16
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fe46 	bl	800813c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b2:	f000 f9cc 	bl	800784e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074b6:	f000 fc8b 	bl	8007dd0 <xTaskResumeAll>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f af7c 	bne.w	80073ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <xQueueGenericSend+0x1f8>)
 80074c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	e772      	b.n	80073ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d6:	f000 f9ba 	bl	800784e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074da:	f000 fc79 	bl	8007dd0 <xTaskResumeAll>
 80074de:	e76c      	b.n	80073ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e2:	f000 f9b4 	bl	800784e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e6:	f000 fc73 	bl	8007dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3738      	adds	r7, #56	; 0x38
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b090      	sub	sp, #64	; 0x40
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007522:	bf00      	nop
 8007524:	e7fe      	b.n	8007524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d103      	bne.n	8007534 <xQueueGenericSendFromISR+0x3c>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <xQueueGenericSendFromISR+0x40>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <xQueueGenericSendFromISR+0x42>
 8007538:	2300      	movs	r3, #0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d103      	bne.n	8007562 <xQueueGenericSendFromISR+0x6a>
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <xQueueGenericSendFromISR+0x6e>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSendFromISR+0x70>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	623b      	str	r3, [r7, #32]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007582:	f001 fad9 	bl	8008b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007586:	f3ef 8211 	mrs	r2, BASEPRI
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	61fa      	str	r2, [r7, #28]
 800759c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800759e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d302      	bcc.n	80075b4 <xQueueGenericSendFromISR+0xbc>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d12f      	bne.n	8007614 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ca:	f000 f8b0 	bl	800772e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d112      	bne.n	80075fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d016      	beq.n	800760e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	3324      	adds	r3, #36	; 0x24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fdcd 	bl	8008184 <xTaskRemoveFromEventList>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	e007      	b.n	800760e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007602:	3301      	adds	r3, #1
 8007604:	b2db      	uxtb	r3, r3
 8007606:	b25a      	sxtb	r2, r3
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800760e:	2301      	movs	r3, #1
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007612:	e001      	b.n	8007618 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007614:	2300      	movs	r3, #0
 8007616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007626:	4618      	mov	r0, r3
 8007628:	3740      	adds	r7, #64	; 0x40
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b08e      	sub	sp, #56	; 0x38
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <xQueueReceiveFromISR+0x3a>
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <xQueueReceiveFromISR+0x3e>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <xQueueReceiveFromISR+0x40>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	61fb      	str	r3, [r7, #28]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007688:	f001 fa56 	bl	8008b38 <vPortValidateInterruptPriority>
	__asm volatile
 800768c:	f3ef 8211 	mrs	r2, BASEPRI
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	61ba      	str	r2, [r7, #24]
 80076a2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076a4:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d02f      	beq.n	8007714 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076c2:	f000 f89e 	bl	8007802 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	1e5a      	subs	r2, r3, #1
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d112      	bne.n	80076fe <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d016      	beq.n	800770e <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	3310      	adds	r3, #16
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fd4d 	bl	8008184 <xTaskRemoveFromEventList>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00b      	beq.n	800770e <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	e007      	b.n	800770e <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007702:	3301      	adds	r3, #1
 8007704:	b2db      	uxtb	r3, r3
 8007706:	b25a      	sxtb	r2, r3
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800770e:	2301      	movs	r3, #1
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
 8007712:	e001      	b.n	8007718 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007714:	2300      	movs	r3, #0
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f383 8811 	msr	BASEPRI, r3
}
 8007722:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007726:	4618      	mov	r0, r3
 8007728:	3738      	adds	r7, #56	; 0x38
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10d      	bne.n	8007768 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d14d      	bne.n	80077f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fef1 	bl	8008540 <xTaskPriorityDisinherit>
 800775e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	609a      	str	r2, [r3, #8]
 8007766:	e043      	b.n	80077f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d119      	bne.n	80077a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6858      	ldr	r0, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	461a      	mov	r2, r3
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	f001 fc33 	bl	8008fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	441a      	add	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	429a      	cmp	r2, r3
 8007796:	d32b      	bcc.n	80077f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	e026      	b.n	80077f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68d8      	ldr	r0, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	461a      	mov	r2, r3
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	f001 fc19 	bl	8008fe4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	425b      	negs	r3, r3
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d207      	bcs.n	80077de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	425b      	negs	r3, r3
 80077d8:	441a      	add	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d105      	bne.n	80077f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077f8:	697b      	ldr	r3, [r7, #20]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d303      	bcc.n	8007836 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68d9      	ldr	r1, [r3, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	461a      	mov	r2, r3
 8007840:	6838      	ldr	r0, [r7, #0]
 8007842:	f001 fbcf 	bl	8008fe4 <memcpy>
	}
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007856:	f001 f88d 	bl	8008974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007860:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007862:	e011      	b.n	8007888 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d012      	beq.n	8007892 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3324      	adds	r3, #36	; 0x24
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fc87 	bl	8008184 <xTaskRemoveFromEventList>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800787c:	f000 fd5c 	bl	8008338 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	3b01      	subs	r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	dce9      	bgt.n	8007864 <prvUnlockQueue+0x16>
 8007890:	e000      	b.n	8007894 <prvUnlockQueue+0x46>
					break;
 8007892:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	22ff      	movs	r2, #255	; 0xff
 8007898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800789c:	f001 f89a 	bl	80089d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078a0:	f001 f868 	bl	8008974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ac:	e011      	b.n	80078d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d012      	beq.n	80078dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3310      	adds	r3, #16
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fc62 	bl	8008184 <xTaskRemoveFromEventList>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078c6:	f000 fd37 	bl	8008338 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dce9      	bgt.n	80078ae <prvUnlockQueue+0x60>
 80078da:	e000      	b.n	80078de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	22ff      	movs	r2, #255	; 0xff
 80078e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078e6:	f001 f875 	bl	80089d4 <vPortExitCritical>
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078fa:	f001 f83b 	bl	8008974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007906:	429a      	cmp	r2, r3
 8007908:	d102      	bne.n	8007910 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e001      	b.n	8007914 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007914:	f001 f85e 	bl	80089d4 <vPortExitCritical>

	return xReturn;
 8007918:	68fb      	ldr	r3, [r7, #12]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007922:	b580      	push	{r7, lr}
 8007924:	b08e      	sub	sp, #56	; 0x38
 8007926:	af04      	add	r7, sp, #16
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <xTaskCreateStatic+0x2a>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	623b      	str	r3, [r7, #32]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <xTaskCreateStatic+0x46>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	61fb      	str	r3, [r7, #28]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007968:	23b4      	movs	r3, #180	; 0xb4
 800796a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2bb4      	cmp	r3, #180	; 0xb4
 8007970:	d00a      	beq.n	8007988 <xTaskCreateStatic+0x66>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	61bb      	str	r3, [r7, #24]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007988:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01e      	beq.n	80079ce <xTaskCreateStatic+0xac>
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01b      	beq.n	80079ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800799e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079a8:	2300      	movs	r3, #0
 80079aa:	9303      	str	r3, [sp, #12]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f851 	bl	8007a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079c8:	f000 f8ec 	bl	8007ba4 <prvAddNewTaskToReadyList>
 80079cc:	e001      	b.n	80079d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079d2:	697b      	ldr	r3, [r7, #20]
	}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	; 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08c      	sub	sp, #48	; 0x30
 80079e0:	af04      	add	r7, sp, #16
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 f8e1 	bl	8008bb8 <pvPortMalloc>
 80079f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079fe:	20b4      	movs	r0, #180	; 0xb4
 8007a00:	f001 f8da 	bl	8008bb8 <pvPortMalloc>
 8007a04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
 8007a12:	e005      	b.n	8007a20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a14:	6978      	ldr	r0, [r7, #20]
 8007a16:	f001 f99b 	bl	8008d50 <vPortFree>
 8007a1a:	e001      	b.n	8007a20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d017      	beq.n	8007a56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	2300      	movs	r3, #0
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	9302      	str	r3, [sp, #8]
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f80f 	bl	8007a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a4a:	69f8      	ldr	r0, [r7, #28]
 8007a4c:	f000 f8aa 	bl	8007ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a50:	2301      	movs	r3, #1
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	e002      	b.n	8007a5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
	}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	3b01      	subs	r3, #1
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	617b      	str	r3, [r7, #20]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01f      	beq.n	8007af6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	e012      	b.n	8007ae2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	3334      	adds	r3, #52	; 0x34
 8007acc:	460a      	mov	r2, r1
 8007ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b0f      	cmp	r3, #15
 8007ae6:	d9e9      	bls.n	8007abc <prvInitialiseNewTask+0x54>
 8007ae8:	e000      	b.n	8007aec <prvInitialiseNewTask+0x84>
			{
				break;
 8007aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007af4:	e003      	b.n	8007afe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	2b06      	cmp	r3, #6
 8007b02:	d901      	bls.n	8007b08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b04:	2306      	movs	r3, #6
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fa95 	bl	800704e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	3318      	adds	r3, #24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fa90 	bl	800704e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	f1c3 0207 	rsb	r2, r3, #7
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	334c      	adds	r3, #76	; 0x4c
 8007b58:	2260      	movs	r2, #96	; 0x60
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 fa4f 	bl	8009000 <memset>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <prvInitialiseNewTask+0x130>)
 8007b66:	651a      	str	r2, [r3, #80]	; 0x50
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	4a0c      	ldr	r2, [pc, #48]	; (8007b9c <prvInitialiseNewTask+0x134>)
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	4a0b      	ldr	r2, [pc, #44]	; (8007ba0 <prvInitialiseNewTask+0x138>)
 8007b72:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	69b8      	ldr	r0, [r7, #24]
 8007b7a:	f000 fdcd 	bl	8008718 <pxPortInitialiseStack>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b90:	bf00      	nop
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	08009a78 	.word	0x08009a78
 8007b9c:	08009a98 	.word	0x08009a98
 8007ba0:	08009a58 	.word	0x08009a58

08007ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bac:	f000 fee2 	bl	8008974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bb0:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <prvAddNewTaskToReadyList+0xb8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <prvAddNewTaskToReadyList+0xb8>)
 8007bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bba:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <prvAddNewTaskToReadyList+0xbc>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bc2:	4a27      	ldr	r2, [pc, #156]	; (8007c60 <prvAddNewTaskToReadyList+0xbc>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007bc8:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <prvAddNewTaskToReadyList+0xb8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d110      	bne.n	8007bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bd0:	f000 fbd6 	bl	8008380 <prvInitialiseTaskLists>
 8007bd4:	e00d      	b.n	8007bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bd6:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <prvAddNewTaskToReadyList+0xc0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <prvAddNewTaskToReadyList+0xbc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d802      	bhi.n	8007bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bec:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <prvAddNewTaskToReadyList+0xbc>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bf2:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <prvAddNewTaskToReadyList+0xc4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	4a1b      	ldr	r2, [pc, #108]	; (8007c68 <prvAddNewTaskToReadyList+0xc4>)
 8007bfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	2201      	movs	r2, #1
 8007c02:	409a      	lsls	r2, r3
 8007c04:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <prvAddNewTaskToReadyList+0xc8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <prvAddNewTaskToReadyList+0xc8>)
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a15      	ldr	r2, [pc, #84]	; (8007c70 <prvAddNewTaskToReadyList+0xcc>)
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7ff fa1f 	bl	8007068 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c2a:	f000 fed3 	bl	80089d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <prvAddNewTaskToReadyList+0xc0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <prvAddNewTaskToReadyList+0xbc>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d207      	bcs.n	8007c54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c44:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <prvAddNewTaskToReadyList+0xd0>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000614 	.word	0x20000614
 8007c60:	20000514 	.word	0x20000514
 8007c64:	20000620 	.word	0x20000620
 8007c68:	20000630 	.word	0x20000630
 8007c6c:	2000061c 	.word	0x2000061c
 8007c70:	20000518 	.word	0x20000518
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d017      	beq.n	8007cba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c8a:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <vTaskDelay+0x60>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <vTaskDelay+0x30>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ca8:	f000 f884 	bl	8007db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cac:	2100      	movs	r1, #0
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fccc 	bl	800864c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cb4:	f000 f88c 	bl	8007dd0 <xTaskResumeAll>
 8007cb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d107      	bne.n	8007cd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <vTaskDelay+0x64>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	2000063c 	.word	0x2000063c
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cee:	463a      	mov	r2, r7
 8007cf0:	1d39      	adds	r1, r7, #4
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f8 faba 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	9202      	str	r2, [sp, #8]
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	4921      	ldr	r1, [pc, #132]	; (8007d94 <vTaskStartScheduler+0xb4>)
 8007d10:	4821      	ldr	r0, [pc, #132]	; (8007d98 <vTaskStartScheduler+0xb8>)
 8007d12:	f7ff fe06 	bl	8007922 <xTaskCreateStatic>
 8007d16:	4603      	mov	r3, r0
 8007d18:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <vTaskStartScheduler+0xbc>)
 8007d1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d1c:	4b1f      	ldr	r3, [pc, #124]	; (8007d9c <vTaskStartScheduler+0xbc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e001      	b.n	8007d2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d11b      	bne.n	8007d6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	613b      	str	r3, [r7, #16]
}
 8007d46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <vTaskStartScheduler+0xc0>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	334c      	adds	r3, #76	; 0x4c
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <vTaskStartScheduler+0xc4>)
 8007d50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <vTaskStartScheduler+0xc8>)
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
 8007d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <vTaskStartScheduler+0xcc>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d60:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <vTaskStartScheduler+0xd0>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d66:	f000 fd63 	bl	8008830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d6a:	e00e      	b.n	8007d8a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d72:	d10a      	bne.n	8007d8a <vTaskStartScheduler+0xaa>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vTaskStartScheduler+0xa8>
}
 8007d8a:	bf00      	nop
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	08009a08 	.word	0x08009a08
 8007d98:	08008351 	.word	0x08008351
 8007d9c:	20000638 	.word	0x20000638
 8007da0:	20000514 	.word	0x20000514
 8007da4:	20000010 	.word	0x20000010
 8007da8:	20000634 	.word	0x20000634
 8007dac:	20000620 	.word	0x20000620
 8007db0:	20000618 	.word	0x20000618

08007db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <vTaskSuspendAll+0x18>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <vTaskSuspendAll+0x18>)
 8007dc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007dc2:	bf00      	nop
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	2000063c 	.word	0x2000063c

08007dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007dde:	4b41      	ldr	r3, [pc, #260]	; (8007ee4 <xTaskResumeAll+0x114>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <xTaskResumeAll+0x2c>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	603b      	str	r3, [r7, #0]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dfc:	f000 fdba 	bl	8008974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e00:	4b38      	ldr	r3, [pc, #224]	; (8007ee4 <xTaskResumeAll+0x114>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4a37      	ldr	r2, [pc, #220]	; (8007ee4 <xTaskResumeAll+0x114>)
 8007e08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0a:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <xTaskResumeAll+0x114>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d161      	bne.n	8007ed6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e12:	4b35      	ldr	r3, [pc, #212]	; (8007ee8 <xTaskResumeAll+0x118>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d05d      	beq.n	8007ed6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e1a:	e02e      	b.n	8007e7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b33      	ldr	r3, [pc, #204]	; (8007eec <xTaskResumeAll+0x11c>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3318      	adds	r3, #24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f97a 	bl	8007122 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f975 	bl	8007122 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	409a      	lsls	r2, r3
 8007e40:	4b2b      	ldr	r3, [pc, #172]	; (8007ef0 <xTaskResumeAll+0x120>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	4a2a      	ldr	r2, [pc, #168]	; (8007ef0 <xTaskResumeAll+0x120>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4a27      	ldr	r2, [pc, #156]	; (8007ef4 <xTaskResumeAll+0x124>)
 8007e58:	441a      	add	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f7ff f901 	bl	8007068 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	4b23      	ldr	r3, [pc, #140]	; (8007ef8 <xTaskResumeAll+0x128>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d302      	bcc.n	8007e7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007e74:	4b21      	ldr	r3, [pc, #132]	; (8007efc <xTaskResumeAll+0x12c>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e7a:	4b1c      	ldr	r3, [pc, #112]	; (8007eec <xTaskResumeAll+0x11c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1cc      	bne.n	8007e1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e88:	f000 fb1c 	bl	80084c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e8c:	4b1c      	ldr	r3, [pc, #112]	; (8007f00 <xTaskResumeAll+0x130>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e98:	f000 f836 	bl	8007f08 <xTaskIncrementTick>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007ea2:	4b16      	ldr	r3, [pc, #88]	; (8007efc <xTaskResumeAll+0x12c>)
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1f1      	bne.n	8007e98 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007eb4:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <xTaskResumeAll+0x130>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <xTaskResumeAll+0x12c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d009      	beq.n	8007ed6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <xTaskResumeAll+0x134>)
 8007ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ed6:	f000 fd7d 	bl	80089d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007eda:	68bb      	ldr	r3, [r7, #8]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	2000063c 	.word	0x2000063c
 8007ee8:	20000614 	.word	0x20000614
 8007eec:	200005d4 	.word	0x200005d4
 8007ef0:	2000061c 	.word	0x2000061c
 8007ef4:	20000518 	.word	0x20000518
 8007ef8:	20000514 	.word	0x20000514
 8007efc:	20000628 	.word	0x20000628
 8007f00:	20000624 	.word	0x20000624
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f12:	4b4e      	ldr	r3, [pc, #312]	; (800804c <xTaskIncrementTick+0x144>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f040 808e 	bne.w	8008038 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f1c:	4b4c      	ldr	r3, [pc, #304]	; (8008050 <xTaskIncrementTick+0x148>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f24:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <xTaskIncrementTick+0x148>)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d120      	bne.n	8007f72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f30:	4b48      	ldr	r3, [pc, #288]	; (8008054 <xTaskIncrementTick+0x14c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	603b      	str	r3, [r7, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <xTaskIncrementTick+0x46>
 8007f50:	4b40      	ldr	r3, [pc, #256]	; (8008054 <xTaskIncrementTick+0x14c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	4b40      	ldr	r3, [pc, #256]	; (8008058 <xTaskIncrementTick+0x150>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a3e      	ldr	r2, [pc, #248]	; (8008054 <xTaskIncrementTick+0x14c>)
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	4a3e      	ldr	r2, [pc, #248]	; (8008058 <xTaskIncrementTick+0x150>)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	4b3d      	ldr	r3, [pc, #244]	; (800805c <xTaskIncrementTick+0x154>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	4a3c      	ldr	r2, [pc, #240]	; (800805c <xTaskIncrementTick+0x154>)
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	f000 faa9 	bl	80084c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f72:	4b3b      	ldr	r3, [pc, #236]	; (8008060 <xTaskIncrementTick+0x158>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d348      	bcc.n	800800e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f7c:	4b35      	ldr	r3, [pc, #212]	; (8008054 <xTaskIncrementTick+0x14c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d104      	bne.n	8007f90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f86:	4b36      	ldr	r3, [pc, #216]	; (8008060 <xTaskIncrementTick+0x158>)
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	601a      	str	r2, [r3, #0]
					break;
 8007f8e:	e03e      	b.n	800800e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b30      	ldr	r3, [pc, #192]	; (8008054 <xTaskIncrementTick+0x14c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d203      	bcs.n	8007fb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fa8:	4a2d      	ldr	r2, [pc, #180]	; (8008060 <xTaskIncrementTick+0x158>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007fae:	e02e      	b.n	800800e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f8b4 	bl	8007122 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f8ab 	bl	8007122 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	4b23      	ldr	r3, [pc, #140]	; (8008064 <xTaskIncrementTick+0x15c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	4a22      	ldr	r2, [pc, #136]	; (8008064 <xTaskIncrementTick+0x15c>)
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a1f      	ldr	r2, [pc, #124]	; (8008068 <xTaskIncrementTick+0x160>)
 8007fec:	441a      	add	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7ff f837 	bl	8007068 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffe:	4b1b      	ldr	r3, [pc, #108]	; (800806c <xTaskIncrementTick+0x164>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	429a      	cmp	r2, r3
 8008006:	d3b9      	bcc.n	8007f7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008008:	2301      	movs	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800800c:	e7b6      	b.n	8007f7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800800e:	4b17      	ldr	r3, [pc, #92]	; (800806c <xTaskIncrementTick+0x164>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008014:	4914      	ldr	r1, [pc, #80]	; (8008068 <xTaskIncrementTick+0x160>)
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d901      	bls.n	800802a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008026:	2301      	movs	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <xTaskIncrementTick+0x168>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
 8008036:	e004      	b.n	8008042 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <xTaskIncrementTick+0x16c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3301      	adds	r3, #1
 800803e:	4a0d      	ldr	r2, [pc, #52]	; (8008074 <xTaskIncrementTick+0x16c>)
 8008040:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008042:	697b      	ldr	r3, [r7, #20]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	2000063c 	.word	0x2000063c
 8008050:	20000618 	.word	0x20000618
 8008054:	200005cc 	.word	0x200005cc
 8008058:	200005d0 	.word	0x200005d0
 800805c:	2000062c 	.word	0x2000062c
 8008060:	20000634 	.word	0x20000634
 8008064:	2000061c 	.word	0x2000061c
 8008068:	20000518 	.word	0x20000518
 800806c:	20000514 	.word	0x20000514
 8008070:	20000628 	.word	0x20000628
 8008074:	20000624 	.word	0x20000624

08008078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800807e:	4b29      	ldr	r3, [pc, #164]	; (8008124 <vTaskSwitchContext+0xac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008086:	4b28      	ldr	r3, [pc, #160]	; (8008128 <vTaskSwitchContext+0xb0>)
 8008088:	2201      	movs	r2, #1
 800808a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800808c:	e044      	b.n	8008118 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800808e:	4b26      	ldr	r3, [pc, #152]	; (8008128 <vTaskSwitchContext+0xb0>)
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008094:	4b25      	ldr	r3, [pc, #148]	; (800812c <vTaskSwitchContext+0xb4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	fab3 f383 	clz	r3, r3
 80080a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80080a2:	7afb      	ldrb	r3, [r7, #11]
 80080a4:	f1c3 031f 	rsb	r3, r3, #31
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	4921      	ldr	r1, [pc, #132]	; (8008130 <vTaskSwitchContext+0xb8>)
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vTaskSwitchContext+0x5a>
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a14      	ldr	r2, [pc, #80]	; (8008130 <vTaskSwitchContext+0xb8>)
 80080e0:	4413      	add	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3308      	adds	r3, #8
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d104      	bne.n	8008104 <vTaskSwitchContext+0x8c>
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	605a      	str	r2, [r3, #4]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <vTaskSwitchContext+0xbc>)
 800810c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <vTaskSwitchContext+0xbc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	334c      	adds	r3, #76	; 0x4c
 8008114:	4a08      	ldr	r2, [pc, #32]	; (8008138 <vTaskSwitchContext+0xc0>)
 8008116:	6013      	str	r3, [r2, #0]
}
 8008118:	bf00      	nop
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	2000063c 	.word	0x2000063c
 8008128:	20000628 	.word	0x20000628
 800812c:	2000061c 	.word	0x2000061c
 8008130:	20000518 	.word	0x20000518
 8008134:	20000514 	.word	0x20000514
 8008138:	20000010 	.word	0x20000010

0800813c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	60fb      	str	r3, [r7, #12]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <vTaskPlaceOnEventList+0x44>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3318      	adds	r3, #24
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fe ffa0 	bl	80070b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008170:	2101      	movs	r1, #1
 8008172:	6838      	ldr	r0, [r7, #0]
 8008174:	f000 fa6a 	bl	800864c <prvAddCurrentTaskToDelayedList>
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000514 	.word	0x20000514

08008184 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10a      	bne.n	80081b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	60fb      	str	r3, [r7, #12]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3318      	adds	r3, #24
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fe ffb4 	bl	8007122 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <xTaskRemoveFromEventList+0xac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d11c      	bne.n	80081fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe ffab 	bl	8007122 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	2201      	movs	r2, #1
 80081d2:	409a      	lsls	r2, r3
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <xTaskRemoveFromEventList+0xb0>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	4a16      	ldr	r2, [pc, #88]	; (8008234 <xTaskRemoveFromEventList+0xb0>)
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4a13      	ldr	r2, [pc, #76]	; (8008238 <xTaskRemoveFromEventList+0xb4>)
 80081ec:	441a      	add	r2, r3
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f7fe ff37 	bl	8007068 <vListInsertEnd>
 80081fa:	e005      	b.n	8008208 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3318      	adds	r3, #24
 8008200:	4619      	mov	r1, r3
 8008202:	480e      	ldr	r0, [pc, #56]	; (800823c <xTaskRemoveFromEventList+0xb8>)
 8008204:	f7fe ff30 	bl	8007068 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <xTaskRemoveFromEventList+0xbc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008212:	429a      	cmp	r2, r3
 8008214:	d905      	bls.n	8008222 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008216:	2301      	movs	r3, #1
 8008218:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800821a:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <xTaskRemoveFromEventList+0xc0>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e001      	b.n	8008226 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	2000063c 	.word	0x2000063c
 8008234:	2000061c 	.word	0x2000061c
 8008238:	20000518 	.word	0x20000518
 800823c:	200005d4 	.word	0x200005d4
 8008240:	20000514 	.word	0x20000514
 8008244:	20000628 	.word	0x20000628

08008248 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <vTaskInternalSetTimeOutState+0x24>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <vTaskInternalSetTimeOutState+0x28>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	605a      	str	r2, [r3, #4]
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	2000062c 	.word	0x2000062c
 8008270:	20000618 	.word	0x20000618

08008274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	613b      	str	r3, [r7, #16]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	60fb      	str	r3, [r7, #12]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082b6:	f000 fb5d 	bl	8008974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <xTaskCheckForTimeOut+0xbc>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d102      	bne.n	80082da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e023      	b.n	8008322 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <xTaskCheckForTimeOut+0xc0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d007      	beq.n	80082f6 <xTaskCheckForTimeOut+0x82>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d302      	bcc.n	80082f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	e015      	b.n	8008322 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d20b      	bcs.n	8008318 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ff9b 	bl	8008248 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e004      	b.n	8008322 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2200      	movs	r2, #0
 800831c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800831e:	2301      	movs	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008322:	f000 fb57 	bl	80089d4 <vPortExitCritical>

	return xReturn;
 8008326:	69fb      	ldr	r3, [r7, #28]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3720      	adds	r7, #32
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000618 	.word	0x20000618
 8008334:	2000062c 	.word	0x2000062c

08008338 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800833c:	4b03      	ldr	r3, [pc, #12]	; (800834c <vTaskMissedYield+0x14>)
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
}
 8008342:	bf00      	nop
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000628 	.word	0x20000628

08008350 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008358:	f000 f852 	bl	8008400 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <prvIdleTask+0x28>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d9f9      	bls.n	8008358 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008364:	4b05      	ldr	r3, [pc, #20]	; (800837c <prvIdleTask+0x2c>)
 8008366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008374:	e7f0      	b.n	8008358 <prvIdleTask+0x8>
 8008376:	bf00      	nop
 8008378:	20000518 	.word	0x20000518
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008386:	2300      	movs	r3, #0
 8008388:	607b      	str	r3, [r7, #4]
 800838a:	e00c      	b.n	80083a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4a12      	ldr	r2, [pc, #72]	; (80083e0 <prvInitialiseTaskLists+0x60>)
 8008398:	4413      	add	r3, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fe37 	bl	800700e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3301      	adds	r3, #1
 80083a4:	607b      	str	r3, [r7, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b06      	cmp	r3, #6
 80083aa:	d9ef      	bls.n	800838c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083ac:	480d      	ldr	r0, [pc, #52]	; (80083e4 <prvInitialiseTaskLists+0x64>)
 80083ae:	f7fe fe2e 	bl	800700e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083b2:	480d      	ldr	r0, [pc, #52]	; (80083e8 <prvInitialiseTaskLists+0x68>)
 80083b4:	f7fe fe2b 	bl	800700e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083b8:	480c      	ldr	r0, [pc, #48]	; (80083ec <prvInitialiseTaskLists+0x6c>)
 80083ba:	f7fe fe28 	bl	800700e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083be:	480c      	ldr	r0, [pc, #48]	; (80083f0 <prvInitialiseTaskLists+0x70>)
 80083c0:	f7fe fe25 	bl	800700e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083c4:	480b      	ldr	r0, [pc, #44]	; (80083f4 <prvInitialiseTaskLists+0x74>)
 80083c6:	f7fe fe22 	bl	800700e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <prvInitialiseTaskLists+0x78>)
 80083cc:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <prvInitialiseTaskLists+0x64>)
 80083ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083d0:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <prvInitialiseTaskLists+0x7c>)
 80083d2:	4a05      	ldr	r2, [pc, #20]	; (80083e8 <prvInitialiseTaskLists+0x68>)
 80083d4:	601a      	str	r2, [r3, #0]
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000518 	.word	0x20000518
 80083e4:	200005a4 	.word	0x200005a4
 80083e8:	200005b8 	.word	0x200005b8
 80083ec:	200005d4 	.word	0x200005d4
 80083f0:	200005e8 	.word	0x200005e8
 80083f4:	20000600 	.word	0x20000600
 80083f8:	200005cc 	.word	0x200005cc
 80083fc:	200005d0 	.word	0x200005d0

08008400 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008406:	e019      	b.n	800843c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008408:	f000 fab4 	bl	8008974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800840c:	4b10      	ldr	r3, [pc, #64]	; (8008450 <prvCheckTasksWaitingTermination+0x50>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fe82 	bl	8007122 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800841e:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <prvCheckTasksWaitingTermination+0x54>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3b01      	subs	r3, #1
 8008424:	4a0b      	ldr	r2, [pc, #44]	; (8008454 <prvCheckTasksWaitingTermination+0x54>)
 8008426:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008428:	4b0b      	ldr	r3, [pc, #44]	; (8008458 <prvCheckTasksWaitingTermination+0x58>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3b01      	subs	r3, #1
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <prvCheckTasksWaitingTermination+0x58>)
 8008430:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008432:	f000 facf 	bl	80089d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f810 	bl	800845c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <prvCheckTasksWaitingTermination+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e1      	bne.n	8008408 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200005e8 	.word	0x200005e8
 8008454:	20000614 	.word	0x20000614
 8008458:	200005fc 	.word	0x200005fc

0800845c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	334c      	adds	r3, #76	; 0x4c
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fe73 	bl	8009154 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fc67 	bl	8008d50 <vPortFree>
				vPortFree( pxTCB );
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fc64 	bl	8008d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008488:	e018      	b.n	80084bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d103      	bne.n	800849c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc5b 	bl	8008d50 <vPortFree>
	}
 800849a:	e00f      	b.n	80084bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d00a      	beq.n	80084bc <prvDeleteTCB+0x60>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <prvDeleteTCB+0x5e>
	}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <prvResetNextTaskUnblockTime+0x38>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <prvResetNextTaskUnblockTime+0x3c>)
 80084d6:	f04f 32ff 	mov.w	r2, #4294967295
 80084da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084dc:	e008      	b.n	80084f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084de:	4b07      	ldr	r3, [pc, #28]	; (80084fc <prvResetNextTaskUnblockTime+0x38>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4a04      	ldr	r2, [pc, #16]	; (8008500 <prvResetNextTaskUnblockTime+0x3c>)
 80084ee:	6013      	str	r3, [r2, #0]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	200005cc 	.word	0x200005cc
 8008500:	20000634 	.word	0x20000634

08008504 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800850a:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <xTaskGetSchedulerState+0x34>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008512:	2301      	movs	r3, #1
 8008514:	607b      	str	r3, [r7, #4]
 8008516:	e008      	b.n	800852a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008518:	4b08      	ldr	r3, [pc, #32]	; (800853c <xTaskGetSchedulerState+0x38>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008520:	2302      	movs	r3, #2
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	e001      	b.n	800852a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008526:	2300      	movs	r3, #0
 8008528:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800852a:	687b      	ldr	r3, [r7, #4]
	}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	20000620 	.word	0x20000620
 800853c:	2000063c 	.word	0x2000063c

08008540 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d06e      	beq.n	8008634 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008556:	4b3a      	ldr	r3, [pc, #232]	; (8008640 <xTaskPriorityDisinherit+0x100>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	429a      	cmp	r2, r3
 800855e:	d00a      	beq.n	8008576 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	60fb      	str	r3, [r7, #12]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	60bb      	str	r3, [r7, #8]
}
 8008590:	bf00      	nop
 8008592:	e7fe      	b.n	8008592 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008598:	1e5a      	subs	r2, r3, #1
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d044      	beq.n	8008634 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d140      	bne.n	8008634 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe fdb3 	bl	8007122 <uxListRemove>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d115      	bne.n	80085ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	491f      	ldr	r1, [pc, #124]	; (8008644 <xTaskPriorityDisinherit+0x104>)
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	440b      	add	r3, r1
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xTaskPriorityDisinherit+0xae>
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	2201      	movs	r2, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	43da      	mvns	r2, r3
 80085e4:	4b18      	ldr	r3, [pc, #96]	; (8008648 <xTaskPriorityDisinherit+0x108>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	4a17      	ldr	r2, [pc, #92]	; (8008648 <xTaskPriorityDisinherit+0x108>)
 80085ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	f1c3 0207 	rsb	r2, r3, #7
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	2201      	movs	r2, #1
 8008608:	409a      	lsls	r2, r3
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <xTaskPriorityDisinherit+0x108>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4313      	orrs	r3, r2
 8008610:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <xTaskPriorityDisinherit+0x108>)
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4a08      	ldr	r2, [pc, #32]	; (8008644 <xTaskPriorityDisinherit+0x104>)
 8008622:	441a      	add	r2, r3
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	3304      	adds	r3, #4
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f7fe fd1c 	bl	8007068 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008634:	697b      	ldr	r3, [r7, #20]
	}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000514 	.word	0x20000514
 8008644:	20000518 	.word	0x20000518
 8008648:	2000061c 	.word	0x2000061c

0800864c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008656:	4b29      	ldr	r3, [pc, #164]	; (80086fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800865c:	4b28      	ldr	r3, [pc, #160]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd5d 	bl	8007122 <uxListRemove>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	2201      	movs	r2, #1
 8008676:	fa02 f303 	lsl.w	r3, r2, r3
 800867a:	43da      	mvns	r2, r3
 800867c:	4b21      	ldr	r3, [pc, #132]	; (8008704 <prvAddCurrentTaskToDelayedList+0xb8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4013      	ands	r3, r2
 8008682:	4a20      	ldr	r2, [pc, #128]	; (8008704 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008684:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d10a      	bne.n	80086a4 <prvAddCurrentTaskToDelayedList+0x58>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008694:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	481a      	ldr	r0, [pc, #104]	; (8008708 <prvAddCurrentTaskToDelayedList+0xbc>)
 800869e:	f7fe fce3 	bl	8007068 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086a2:	e026      	b.n	80086f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4413      	add	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086ac:	4b14      	ldr	r3, [pc, #80]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d209      	bcs.n	80086d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086bc:	4b13      	ldr	r3, [pc, #76]	; (800870c <prvAddCurrentTaskToDelayedList+0xc0>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7fe fcf1 	bl	80070b0 <vListInsert>
}
 80086ce:	e010      	b.n	80086f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d0:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <prvAddCurrentTaskToDelayedList+0xc4>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f7fe fce7 	bl	80070b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d202      	bcs.n	80086f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80086ec:	4a09      	ldr	r2, [pc, #36]	; (8008714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6013      	str	r3, [r2, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000618 	.word	0x20000618
 8008700:	20000514 	.word	0x20000514
 8008704:	2000061c 	.word	0x2000061c
 8008708:	20000600 	.word	0x20000600
 800870c:	200005d0 	.word	0x200005d0
 8008710:	200005cc 	.word	0x200005cc
 8008714:	20000634 	.word	0x20000634

08008718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3b04      	subs	r3, #4
 8008728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3b04      	subs	r3, #4
 8008736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f023 0201 	bic.w	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3b04      	subs	r3, #4
 8008746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008748:	4a0c      	ldr	r2, [pc, #48]	; (800877c <pxPortInitialiseStack+0x64>)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b14      	subs	r3, #20
 8008752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3b04      	subs	r3, #4
 800875e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f06f 0202 	mvn.w	r2, #2
 8008766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b20      	subs	r3, #32
 800876c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800876e:	68fb      	ldr	r3, [r7, #12]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	08008781 	.word	0x08008781

08008780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800878a:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <prvTaskExitError+0x54>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d00a      	beq.n	80087aa <prvTaskExitError+0x2a>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60fb      	str	r3, [r7, #12]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <prvTaskExitError+0x28>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	60bb      	str	r3, [r7, #8]
}
 80087bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087be:	bf00      	nop
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0fc      	beq.n	80087c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	2000000c 	.word	0x2000000c
	...

080087e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <pxCurrentTCBConst2>)
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	6808      	ldr	r0, [r1, #0]
 80087e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	f380 8809 	msr	PSP, r0
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f380 8811 	msr	BASEPRI, r0
 80087fa:	4770      	bx	lr
 80087fc:	f3af 8000 	nop.w

08008800 <pxCurrentTCBConst2>:
 8008800:	20000514 	.word	0x20000514
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008808:	4808      	ldr	r0, [pc, #32]	; (800882c <prvPortStartFirstTask+0x24>)
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	6800      	ldr	r0, [r0, #0]
 800880e:	f380 8808 	msr	MSP, r0
 8008812:	f04f 0000 	mov.w	r0, #0
 8008816:	f380 8814 	msr	CONTROL, r0
 800881a:	b662      	cpsie	i
 800881c:	b661      	cpsie	f
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	df00      	svc	0
 8008828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800882a:	bf00      	nop
 800882c:	e000ed08 	.word	0xe000ed08

08008830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008836:	4b46      	ldr	r3, [pc, #280]	; (8008950 <xPortStartScheduler+0x120>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a46      	ldr	r2, [pc, #280]	; (8008954 <xPortStartScheduler+0x124>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10a      	bne.n	8008856 <xPortStartScheduler+0x26>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	613b      	str	r3, [r7, #16]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008856:	4b3e      	ldr	r3, [pc, #248]	; (8008950 <xPortStartScheduler+0x120>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a3f      	ldr	r2, [pc, #252]	; (8008958 <xPortStartScheduler+0x128>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d10a      	bne.n	8008876 <xPortStartScheduler+0x46>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	60fb      	str	r3, [r7, #12]
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008876:	4b39      	ldr	r3, [pc, #228]	; (800895c <xPortStartScheduler+0x12c>)
 8008878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	22ff      	movs	r2, #255	; 0xff
 8008886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008898:	b2da      	uxtb	r2, r3
 800889a:	4b31      	ldr	r3, [pc, #196]	; (8008960 <xPortStartScheduler+0x130>)
 800889c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800889e:	4b31      	ldr	r3, [pc, #196]	; (8008964 <xPortStartScheduler+0x134>)
 80088a0:	2207      	movs	r2, #7
 80088a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088a4:	e009      	b.n	80088ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80088a6:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <xPortStartScheduler+0x134>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	4a2d      	ldr	r2, [pc, #180]	; (8008964 <xPortStartScheduler+0x134>)
 80088ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c2:	2b80      	cmp	r3, #128	; 0x80
 80088c4:	d0ef      	beq.n	80088a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088c6:	4b27      	ldr	r3, [pc, #156]	; (8008964 <xPortStartScheduler+0x134>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f1c3 0307 	rsb	r3, r3, #7
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d00a      	beq.n	80088e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60bb      	str	r3, [r7, #8]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088e8:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <xPortStartScheduler+0x134>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <xPortStartScheduler+0x134>)
 80088f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088f2:	4b1c      	ldr	r3, [pc, #112]	; (8008964 <xPortStartScheduler+0x134>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088fa:	4a1a      	ldr	r2, [pc, #104]	; (8008964 <xPortStartScheduler+0x134>)
 80088fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	b2da      	uxtb	r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008906:	4b18      	ldr	r3, [pc, #96]	; (8008968 <xPortStartScheduler+0x138>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a17      	ldr	r2, [pc, #92]	; (8008968 <xPortStartScheduler+0x138>)
 800890c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <xPortStartScheduler+0x138>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a14      	ldr	r2, [pc, #80]	; (8008968 <xPortStartScheduler+0x138>)
 8008918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800891c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800891e:	f000 f8dd 	bl	8008adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008922:	4b12      	ldr	r3, [pc, #72]	; (800896c <xPortStartScheduler+0x13c>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008928:	f000 f8fc 	bl	8008b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <xPortStartScheduler+0x140>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0f      	ldr	r2, [pc, #60]	; (8008970 <xPortStartScheduler+0x140>)
 8008932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008938:	f7ff ff66 	bl	8008808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800893c:	f7ff fb9c 	bl	8008078 <vTaskSwitchContext>
	prvTaskExitError();
 8008940:	f7ff ff1e 	bl	8008780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	e000ed00 	.word	0xe000ed00
 8008954:	410fc271 	.word	0x410fc271
 8008958:	410fc270 	.word	0x410fc270
 800895c:	e000e400 	.word	0xe000e400
 8008960:	20000640 	.word	0x20000640
 8008964:	20000644 	.word	0x20000644
 8008968:	e000ed20 	.word	0xe000ed20
 800896c:	2000000c 	.word	0x2000000c
 8008970:	e000ef34 	.word	0xe000ef34

08008974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	607b      	str	r3, [r7, #4]
}
 800898c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <vPortEnterCritical+0x58>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3301      	adds	r3, #1
 8008994:	4a0d      	ldr	r2, [pc, #52]	; (80089cc <vPortEnterCritical+0x58>)
 8008996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <vPortEnterCritical+0x58>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d10f      	bne.n	80089c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vPortEnterCritical+0x5c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	603b      	str	r3, [r7, #0]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <vPortEnterCritical+0x4a>
	}
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	2000000c 	.word	0x2000000c
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <vPortExitCritical+0x50>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <vPortExitCritical+0x24>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089f8:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <vPortExitCritical+0x50>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <vPortExitCritical+0x50>)
 8008a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <vPortExitCritical+0x50>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <vPortExitCritical+0x42>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f383 8811 	msr	BASEPRI, r3
}
 8008a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	2000000c 	.word	0x2000000c
	...

08008a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a30:	f3ef 8009 	mrs	r0, PSP
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <pxCurrentTCBConst>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	f01e 0f10 	tst.w	lr, #16
 8008a40:	bf08      	it	eq
 8008a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4a:	6010      	str	r0, [r2, #0]
 8008a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a54:	f380 8811 	msr	BASEPRI, r0
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f7ff fb0a 	bl	8008078 <vTaskSwitchContext>
 8008a64:	f04f 0000 	mov.w	r0, #0
 8008a68:	f380 8811 	msr	BASEPRI, r0
 8008a6c:	bc09      	pop	{r0, r3}
 8008a6e:	6819      	ldr	r1, [r3, #0]
 8008a70:	6808      	ldr	r0, [r1, #0]
 8008a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a76:	f01e 0f10 	tst.w	lr, #16
 8008a7a:	bf08      	it	eq
 8008a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a80:	f380 8809 	msr	PSP, r0
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	f3af 8000 	nop.w

08008a90 <pxCurrentTCBConst>:
 8008a90:	20000514 	.word	0x20000514
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop

08008a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	607b      	str	r3, [r7, #4]
}
 8008ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ab2:	f7ff fa29 	bl	8007f08 <xTaskIncrementTick>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <SysTick_Handler+0x40>)
 8008abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	f383 8811 	msr	BASEPRI, r3
}
 8008ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ae0:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <vPortSetupTimerInterrupt+0x34>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <vPortSetupTimerInterrupt+0x38>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <vPortSetupTimerInterrupt+0x3c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <vPortSetupTimerInterrupt+0x40>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	099b      	lsrs	r3, r3, #6
 8008af8:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <vPortSetupTimerInterrupt+0x44>)
 8008afa:	3b01      	subs	r3, #1
 8008afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008afe:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <vPortSetupTimerInterrupt+0x34>)
 8008b00:	2207      	movs	r2, #7
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	e000e010 	.word	0xe000e010
 8008b14:	e000e018 	.word	0xe000e018
 8008b18:	20000000 	.word	0x20000000
 8008b1c:	10624dd3 	.word	0x10624dd3
 8008b20:	e000e014 	.word	0xe000e014

08008b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b34 <vPortEnableVFP+0x10>
 8008b28:	6801      	ldr	r1, [r0, #0]
 8008b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b2e:	6001      	str	r1, [r0, #0]
 8008b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b32:	bf00      	nop
 8008b34:	e000ed88 	.word	0xe000ed88

08008b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b3e:	f3ef 8305 	mrs	r3, IPSR
 8008b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b0f      	cmp	r3, #15
 8008b48:	d914      	bls.n	8008b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b4a:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <vPortValidateInterruptPriority+0x70>)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4413      	add	r3, r2
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b54:	4b15      	ldr	r3, [pc, #84]	; (8008bac <vPortValidateInterruptPriority+0x74>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	7afa      	ldrb	r2, [r7, #11]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d20a      	bcs.n	8008b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <vPortValidateInterruptPriority+0x78>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b7c:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <vPortValidateInterruptPriority+0x7c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d90a      	bls.n	8008b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	603b      	str	r3, [r7, #0]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <vPortValidateInterruptPriority+0x60>
	}
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	e000e3f0 	.word	0xe000e3f0
 8008bac:	20000640 	.word	0x20000640
 8008bb0:	e000ed0c 	.word	0xe000ed0c
 8008bb4:	20000644 	.word	0x20000644

08008bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bc4:	f7ff f8f6 	bl	8007db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bc8:	4b5b      	ldr	r3, [pc, #364]	; (8008d38 <pvPortMalloc+0x180>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bd0:	f000 f920 	bl	8008e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bd4:	4b59      	ldr	r3, [pc, #356]	; (8008d3c <pvPortMalloc+0x184>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 8093 	bne.w	8008d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01d      	beq.n	8008c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008be8:	2208      	movs	r2, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d014      	beq.n	8008c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f023 0307 	bic.w	r3, r3, #7
 8008c00:	3308      	adds	r3, #8
 8008c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <pvPortMalloc+0x6c>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	617b      	str	r3, [r7, #20]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d06e      	beq.n	8008d08 <pvPortMalloc+0x150>
 8008c2a:	4b45      	ldr	r3, [pc, #276]	; (8008d40 <pvPortMalloc+0x188>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d869      	bhi.n	8008d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c34:	4b43      	ldr	r3, [pc, #268]	; (8008d44 <pvPortMalloc+0x18c>)
 8008c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c38:	4b42      	ldr	r3, [pc, #264]	; (8008d44 <pvPortMalloc+0x18c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c3e:	e004      	b.n	8008c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d903      	bls.n	8008c5c <pvPortMalloc+0xa4>
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f1      	bne.n	8008c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c5c:	4b36      	ldr	r3, [pc, #216]	; (8008d38 <pvPortMalloc+0x180>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d050      	beq.n	8008d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	4413      	add	r3, r2
 8008c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	2308      	movs	r3, #8
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d91f      	bls.n	8008cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	613b      	str	r3, [r7, #16]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cc2:	69b8      	ldr	r0, [r7, #24]
 8008cc4:	f000 f908 	bl	8008ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cc8:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <pvPortMalloc+0x188>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	4a1b      	ldr	r2, [pc, #108]	; (8008d40 <pvPortMalloc+0x188>)
 8008cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <pvPortMalloc+0x188>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <pvPortMalloc+0x190>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d203      	bcs.n	8008cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ce2:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <pvPortMalloc+0x188>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <pvPortMalloc+0x190>)
 8008ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <pvPortMalloc+0x184>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <pvPortMalloc+0x194>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <pvPortMalloc+0x194>)
 8008d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d08:	f7ff f862 	bl	8007dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <pvPortMalloc+0x174>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <pvPortMalloc+0x172>
	return pvReturn;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3728      	adds	r7, #40	; 0x28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20001208 	.word	0x20001208
 8008d3c:	2000121c 	.word	0x2000121c
 8008d40:	2000120c 	.word	0x2000120c
 8008d44:	20001200 	.word	0x20001200
 8008d48:	20001210 	.word	0x20001210
 8008d4c:	20001214 	.word	0x20001214

08008d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d04d      	beq.n	8008dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d62:	2308      	movs	r3, #8
 8008d64:	425b      	negs	r3, r3
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4413      	add	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <vPortFree+0xb8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4013      	ands	r3, r2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <vPortFree+0x44>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	60fb      	str	r3, [r7, #12]
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <vPortFree+0x62>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60bb      	str	r3, [r7, #8]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <vPortFree+0xb8>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01e      	beq.n	8008dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d11a      	bne.n	8008dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <vPortFree+0xb8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	401a      	ands	r2, r3
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008dd8:	f7fe ffec 	bl	8007db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <vPortFree+0xbc>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4413      	add	r3, r2
 8008de6:	4a09      	ldr	r2, [pc, #36]	; (8008e0c <vPortFree+0xbc>)
 8008de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dea:	6938      	ldr	r0, [r7, #16]
 8008dec:	f000 f874 	bl	8008ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <vPortFree+0xc0>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a06      	ldr	r2, [pc, #24]	; (8008e10 <vPortFree+0xc0>)
 8008df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008dfa:	f7fe ffe9 	bl	8007dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dfe:	bf00      	nop
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	2000121c 	.word	0x2000121c
 8008e0c:	2000120c 	.word	0x2000120c
 8008e10:	20001218 	.word	0x20001218

08008e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e20:	4b27      	ldr	r3, [pc, #156]	; (8008ec0 <prvHeapInit+0xac>)
 8008e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00c      	beq.n	8008e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3307      	adds	r3, #7
 8008e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f023 0307 	bic.w	r3, r3, #7
 8008e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <prvHeapInit+0xac>)
 8008e44:	4413      	add	r3, r2
 8008e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <prvHeapInit+0xb0>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e52:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <prvHeapInit+0xb0>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e60:	2208      	movs	r2, #8
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0307 	bic.w	r3, r3, #7
 8008e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <prvHeapInit+0xb4>)
 8008e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <prvHeapInit+0xb4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e7e:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <prvHeapInit+0xb4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <prvHeapInit+0xb4>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <prvHeapInit+0xb8>)
 8008ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	4a09      	ldr	r2, [pc, #36]	; (8008ed0 <prvHeapInit+0xbc>)
 8008eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <prvHeapInit+0xc0>)
 8008eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20000648 	.word	0x20000648
 8008ec4:	20001200 	.word	0x20001200
 8008ec8:	20001208 	.word	0x20001208
 8008ecc:	20001210 	.word	0x20001210
 8008ed0:	2000120c 	.word	0x2000120c
 8008ed4:	2000121c 	.word	0x2000121c

08008ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ee0:	4b28      	ldr	r3, [pc, #160]	; (8008f84 <prvInsertBlockIntoFreeList+0xac>)
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e002      	b.n	8008eec <prvInsertBlockIntoFreeList+0x14>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d8f7      	bhi.n	8008ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d108      	bne.n	8008f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	441a      	add	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d118      	bne.n	8008f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <prvInsertBlockIntoFreeList+0xb0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d00d      	beq.n	8008f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	441a      	add	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e008      	b.n	8008f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvInsertBlockIntoFreeList+0xb0>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	e003      	b.n	8008f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d002      	beq.n	8008f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20001200 	.word	0x20001200
 8008f88:	20001208 	.word	0x20001208

08008f8c <__errno>:
 8008f8c:	4b01      	ldr	r3, [pc, #4]	; (8008f94 <__errno+0x8>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000010 	.word	0x20000010

08008f98 <__libc_init_array>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4d0d      	ldr	r5, [pc, #52]	; (8008fd0 <__libc_init_array+0x38>)
 8008f9c:	4c0d      	ldr	r4, [pc, #52]	; (8008fd4 <__libc_init_array+0x3c>)
 8008f9e:	1b64      	subs	r4, r4, r5
 8008fa0:	10a4      	asrs	r4, r4, #2
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	42a6      	cmp	r6, r4
 8008fa6:	d109      	bne.n	8008fbc <__libc_init_array+0x24>
 8008fa8:	4d0b      	ldr	r5, [pc, #44]	; (8008fd8 <__libc_init_array+0x40>)
 8008faa:	4c0c      	ldr	r4, [pc, #48]	; (8008fdc <__libc_init_array+0x44>)
 8008fac:	f000 fcf8 	bl	80099a0 <_init>
 8008fb0:	1b64      	subs	r4, r4, r5
 8008fb2:	10a4      	asrs	r4, r4, #2
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	42a6      	cmp	r6, r4
 8008fb8:	d105      	bne.n	8008fc6 <__libc_init_array+0x2e>
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc0:	4798      	blx	r3
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7ee      	b.n	8008fa4 <__libc_init_array+0xc>
 8008fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fca:	4798      	blx	r3
 8008fcc:	3601      	adds	r6, #1
 8008fce:	e7f2      	b.n	8008fb6 <__libc_init_array+0x1e>
 8008fd0:	08009aec 	.word	0x08009aec
 8008fd4:	08009aec 	.word	0x08009aec
 8008fd8:	08009aec 	.word	0x08009aec
 8008fdc:	08009af0 	.word	0x08009af0

08008fe0 <__retarget_lock_acquire_recursive>:
 8008fe0:	4770      	bx	lr

08008fe2 <__retarget_lock_release_recursive>:
 8008fe2:	4770      	bx	lr

08008fe4 <memcpy>:
 8008fe4:	440a      	add	r2, r1
 8008fe6:	4291      	cmp	r1, r2
 8008fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fec:	d100      	bne.n	8008ff0 <memcpy+0xc>
 8008fee:	4770      	bx	lr
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ffa:	4291      	cmp	r1, r2
 8008ffc:	d1f9      	bne.n	8008ff2 <memcpy+0xe>
 8008ffe:	bd10      	pop	{r4, pc}

08009000 <memset>:
 8009000:	4402      	add	r2, r0
 8009002:	4603      	mov	r3, r0
 8009004:	4293      	cmp	r3, r2
 8009006:	d100      	bne.n	800900a <memset+0xa>
 8009008:	4770      	bx	lr
 800900a:	f803 1b01 	strb.w	r1, [r3], #1
 800900e:	e7f9      	b.n	8009004 <memset+0x4>

08009010 <sbrk_aligned>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4e0e      	ldr	r6, [pc, #56]	; (800904c <sbrk_aligned+0x3c>)
 8009014:	460c      	mov	r4, r1
 8009016:	6831      	ldr	r1, [r6, #0]
 8009018:	4605      	mov	r5, r0
 800901a:	b911      	cbnz	r1, 8009022 <sbrk_aligned+0x12>
 800901c:	f000 f8f6 	bl	800920c <_sbrk_r>
 8009020:	6030      	str	r0, [r6, #0]
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 f8f1 	bl	800920c <_sbrk_r>
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	d00a      	beq.n	8009044 <sbrk_aligned+0x34>
 800902e:	1cc4      	adds	r4, r0, #3
 8009030:	f024 0403 	bic.w	r4, r4, #3
 8009034:	42a0      	cmp	r0, r4
 8009036:	d007      	beq.n	8009048 <sbrk_aligned+0x38>
 8009038:	1a21      	subs	r1, r4, r0
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f8e6 	bl	800920c <_sbrk_r>
 8009040:	3001      	adds	r0, #1
 8009042:	d101      	bne.n	8009048 <sbrk_aligned+0x38>
 8009044:	f04f 34ff 	mov.w	r4, #4294967295
 8009048:	4620      	mov	r0, r4
 800904a:	bd70      	pop	{r4, r5, r6, pc}
 800904c:	20001228 	.word	0x20001228

08009050 <_malloc_r>:
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	1ccd      	adds	r5, r1, #3
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	2d00      	cmp	r5, #0
 8009064:	4607      	mov	r7, r0
 8009066:	db01      	blt.n	800906c <_malloc_r+0x1c>
 8009068:	42a9      	cmp	r1, r5
 800906a:	d905      	bls.n	8009078 <_malloc_r+0x28>
 800906c:	230c      	movs	r3, #12
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	2600      	movs	r6, #0
 8009072:	4630      	mov	r0, r6
 8009074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009078:	4e2e      	ldr	r6, [pc, #184]	; (8009134 <_malloc_r+0xe4>)
 800907a:	f000 f8f7 	bl	800926c <__malloc_lock>
 800907e:	6833      	ldr	r3, [r6, #0]
 8009080:	461c      	mov	r4, r3
 8009082:	bb34      	cbnz	r4, 80090d2 <_malloc_r+0x82>
 8009084:	4629      	mov	r1, r5
 8009086:	4638      	mov	r0, r7
 8009088:	f7ff ffc2 	bl	8009010 <sbrk_aligned>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	4604      	mov	r4, r0
 8009090:	d14d      	bne.n	800912e <_malloc_r+0xde>
 8009092:	6834      	ldr	r4, [r6, #0]
 8009094:	4626      	mov	r6, r4
 8009096:	2e00      	cmp	r6, #0
 8009098:	d140      	bne.n	800911c <_malloc_r+0xcc>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	4631      	mov	r1, r6
 800909e:	4638      	mov	r0, r7
 80090a0:	eb04 0803 	add.w	r8, r4, r3
 80090a4:	f000 f8b2 	bl	800920c <_sbrk_r>
 80090a8:	4580      	cmp	r8, r0
 80090aa:	d13a      	bne.n	8009122 <_malloc_r+0xd2>
 80090ac:	6821      	ldr	r1, [r4, #0]
 80090ae:	3503      	adds	r5, #3
 80090b0:	1a6d      	subs	r5, r5, r1
 80090b2:	f025 0503 	bic.w	r5, r5, #3
 80090b6:	3508      	adds	r5, #8
 80090b8:	2d0c      	cmp	r5, #12
 80090ba:	bf38      	it	cc
 80090bc:	250c      	movcc	r5, #12
 80090be:	4629      	mov	r1, r5
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff ffa5 	bl	8009010 <sbrk_aligned>
 80090c6:	3001      	adds	r0, #1
 80090c8:	d02b      	beq.n	8009122 <_malloc_r+0xd2>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	442b      	add	r3, r5
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	e00e      	b.n	80090f0 <_malloc_r+0xa0>
 80090d2:	6822      	ldr	r2, [r4, #0]
 80090d4:	1b52      	subs	r2, r2, r5
 80090d6:	d41e      	bmi.n	8009116 <_malloc_r+0xc6>
 80090d8:	2a0b      	cmp	r2, #11
 80090da:	d916      	bls.n	800910a <_malloc_r+0xba>
 80090dc:	1961      	adds	r1, r4, r5
 80090de:	42a3      	cmp	r3, r4
 80090e0:	6025      	str	r5, [r4, #0]
 80090e2:	bf18      	it	ne
 80090e4:	6059      	strne	r1, [r3, #4]
 80090e6:	6863      	ldr	r3, [r4, #4]
 80090e8:	bf08      	it	eq
 80090ea:	6031      	streq	r1, [r6, #0]
 80090ec:	5162      	str	r2, [r4, r5]
 80090ee:	604b      	str	r3, [r1, #4]
 80090f0:	4638      	mov	r0, r7
 80090f2:	f104 060b 	add.w	r6, r4, #11
 80090f6:	f000 f8bf 	bl	8009278 <__malloc_unlock>
 80090fa:	f026 0607 	bic.w	r6, r6, #7
 80090fe:	1d23      	adds	r3, r4, #4
 8009100:	1af2      	subs	r2, r6, r3
 8009102:	d0b6      	beq.n	8009072 <_malloc_r+0x22>
 8009104:	1b9b      	subs	r3, r3, r6
 8009106:	50a3      	str	r3, [r4, r2]
 8009108:	e7b3      	b.n	8009072 <_malloc_r+0x22>
 800910a:	6862      	ldr	r2, [r4, #4]
 800910c:	42a3      	cmp	r3, r4
 800910e:	bf0c      	ite	eq
 8009110:	6032      	streq	r2, [r6, #0]
 8009112:	605a      	strne	r2, [r3, #4]
 8009114:	e7ec      	b.n	80090f0 <_malloc_r+0xa0>
 8009116:	4623      	mov	r3, r4
 8009118:	6864      	ldr	r4, [r4, #4]
 800911a:	e7b2      	b.n	8009082 <_malloc_r+0x32>
 800911c:	4634      	mov	r4, r6
 800911e:	6876      	ldr	r6, [r6, #4]
 8009120:	e7b9      	b.n	8009096 <_malloc_r+0x46>
 8009122:	230c      	movs	r3, #12
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	4638      	mov	r0, r7
 8009128:	f000 f8a6 	bl	8009278 <__malloc_unlock>
 800912c:	e7a1      	b.n	8009072 <_malloc_r+0x22>
 800912e:	6025      	str	r5, [r4, #0]
 8009130:	e7de      	b.n	80090f0 <_malloc_r+0xa0>
 8009132:	bf00      	nop
 8009134:	20001224 	.word	0x20001224

08009138 <cleanup_glue>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	6809      	ldr	r1, [r1, #0]
 800913e:	4605      	mov	r5, r0
 8009140:	b109      	cbz	r1, 8009146 <cleanup_glue+0xe>
 8009142:	f7ff fff9 	bl	8009138 <cleanup_glue>
 8009146:	4621      	mov	r1, r4
 8009148:	4628      	mov	r0, r5
 800914a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800914e:	f000 b899 	b.w	8009284 <_free_r>
	...

08009154 <_reclaim_reent>:
 8009154:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <_reclaim_reent+0xb4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4283      	cmp	r3, r0
 800915a:	b570      	push	{r4, r5, r6, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	d051      	beq.n	8009204 <_reclaim_reent+0xb0>
 8009160:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009162:	b143      	cbz	r3, 8009176 <_reclaim_reent+0x22>
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d14a      	bne.n	8009200 <_reclaim_reent+0xac>
 800916a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800916c:	6819      	ldr	r1, [r3, #0]
 800916e:	b111      	cbz	r1, 8009176 <_reclaim_reent+0x22>
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f887 	bl	8009284 <_free_r>
 8009176:	6961      	ldr	r1, [r4, #20]
 8009178:	b111      	cbz	r1, 8009180 <_reclaim_reent+0x2c>
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f882 	bl	8009284 <_free_r>
 8009180:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009182:	b111      	cbz	r1, 800918a <_reclaim_reent+0x36>
 8009184:	4620      	mov	r0, r4
 8009186:	f000 f87d 	bl	8009284 <_free_r>
 800918a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800918c:	b111      	cbz	r1, 8009194 <_reclaim_reent+0x40>
 800918e:	4620      	mov	r0, r4
 8009190:	f000 f878 	bl	8009284 <_free_r>
 8009194:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009196:	b111      	cbz	r1, 800919e <_reclaim_reent+0x4a>
 8009198:	4620      	mov	r0, r4
 800919a:	f000 f873 	bl	8009284 <_free_r>
 800919e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091a0:	b111      	cbz	r1, 80091a8 <_reclaim_reent+0x54>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f86e 	bl	8009284 <_free_r>
 80091a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091aa:	b111      	cbz	r1, 80091b2 <_reclaim_reent+0x5e>
 80091ac:	4620      	mov	r0, r4
 80091ae:	f000 f869 	bl	8009284 <_free_r>
 80091b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091b4:	b111      	cbz	r1, 80091bc <_reclaim_reent+0x68>
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 f864 	bl	8009284 <_free_r>
 80091bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091be:	b111      	cbz	r1, 80091c6 <_reclaim_reent+0x72>
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 f85f 	bl	8009284 <_free_r>
 80091c6:	69a3      	ldr	r3, [r4, #24]
 80091c8:	b1e3      	cbz	r3, 8009204 <_reclaim_reent+0xb0>
 80091ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091cc:	4620      	mov	r0, r4
 80091ce:	4798      	blx	r3
 80091d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80091d2:	b1b9      	cbz	r1, 8009204 <_reclaim_reent+0xb0>
 80091d4:	4620      	mov	r0, r4
 80091d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091da:	f7ff bfad 	b.w	8009138 <cleanup_glue>
 80091de:	5949      	ldr	r1, [r1, r5]
 80091e0:	b941      	cbnz	r1, 80091f4 <_reclaim_reent+0xa0>
 80091e2:	3504      	adds	r5, #4
 80091e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e6:	2d80      	cmp	r5, #128	; 0x80
 80091e8:	68d9      	ldr	r1, [r3, #12]
 80091ea:	d1f8      	bne.n	80091de <_reclaim_reent+0x8a>
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 f849 	bl	8009284 <_free_r>
 80091f2:	e7ba      	b.n	800916a <_reclaim_reent+0x16>
 80091f4:	680e      	ldr	r6, [r1, #0]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 f844 	bl	8009284 <_free_r>
 80091fc:	4631      	mov	r1, r6
 80091fe:	e7ef      	b.n	80091e0 <_reclaim_reent+0x8c>
 8009200:	2500      	movs	r5, #0
 8009202:	e7ef      	b.n	80091e4 <_reclaim_reent+0x90>
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	bf00      	nop
 8009208:	20000010 	.word	0x20000010

0800920c <_sbrk_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	; (8009228 <_sbrk_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 fa00 	bl	800161c <_sbrk>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_sbrk_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_sbrk_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	2000122c 	.word	0x2000122c

0800922c <siprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	b500      	push	{lr}
 8009230:	b09c      	sub	sp, #112	; 0x70
 8009232:	ab1d      	add	r3, sp, #116	; 0x74
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	9006      	str	r0, [sp, #24]
 8009238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800923c:	4809      	ldr	r0, [pc, #36]	; (8009264 <siprintf+0x38>)
 800923e:	9107      	str	r1, [sp, #28]
 8009240:	9104      	str	r1, [sp, #16]
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <siprintf+0x3c>)
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	a902      	add	r1, sp, #8
 8009250:	f000 f8c0 	bl	80093d4 <_svfiprintf_r>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	b01c      	add	sp, #112	; 0x70
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	20000010 	.word	0x20000010
 8009268:	ffff0208 	.word	0xffff0208

0800926c <__malloc_lock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_lock+0x8>)
 800926e:	f7ff beb7 	b.w	8008fe0 <__retarget_lock_acquire_recursive>
 8009272:	bf00      	nop
 8009274:	20001220 	.word	0x20001220

08009278 <__malloc_unlock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_unlock+0x8>)
 800927a:	f7ff beb2 	b.w	8008fe2 <__retarget_lock_release_recursive>
 800927e:	bf00      	nop
 8009280:	20001220 	.word	0x20001220

08009284 <_free_r>:
 8009284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009286:	2900      	cmp	r1, #0
 8009288:	d044      	beq.n	8009314 <_free_r+0x90>
 800928a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928e:	9001      	str	r0, [sp, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f1a1 0404 	sub.w	r4, r1, #4
 8009296:	bfb8      	it	lt
 8009298:	18e4      	addlt	r4, r4, r3
 800929a:	f7ff ffe7 	bl	800926c <__malloc_lock>
 800929e:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <_free_r+0x94>)
 80092a0:	9801      	ldr	r0, [sp, #4]
 80092a2:	6813      	ldr	r3, [r2, #0]
 80092a4:	b933      	cbnz	r3, 80092b4 <_free_r+0x30>
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	6014      	str	r4, [r2, #0]
 80092aa:	b003      	add	sp, #12
 80092ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b0:	f7ff bfe2 	b.w	8009278 <__malloc_unlock>
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d908      	bls.n	80092ca <_free_r+0x46>
 80092b8:	6825      	ldr	r5, [r4, #0]
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf01      	itttt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	1949      	addeq	r1, r1, r5
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	e7ed      	b.n	80092a6 <_free_r+0x22>
 80092ca:	461a      	mov	r2, r3
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	b10b      	cbz	r3, 80092d4 <_free_r+0x50>
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d9fa      	bls.n	80092ca <_free_r+0x46>
 80092d4:	6811      	ldr	r1, [r2, #0]
 80092d6:	1855      	adds	r5, r2, r1
 80092d8:	42a5      	cmp	r5, r4
 80092da:	d10b      	bne.n	80092f4 <_free_r+0x70>
 80092dc:	6824      	ldr	r4, [r4, #0]
 80092de:	4421      	add	r1, r4
 80092e0:	1854      	adds	r4, r2, r1
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	6011      	str	r1, [r2, #0]
 80092e6:	d1e0      	bne.n	80092aa <_free_r+0x26>
 80092e8:	681c      	ldr	r4, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	6053      	str	r3, [r2, #4]
 80092ee:	4421      	add	r1, r4
 80092f0:	6011      	str	r1, [r2, #0]
 80092f2:	e7da      	b.n	80092aa <_free_r+0x26>
 80092f4:	d902      	bls.n	80092fc <_free_r+0x78>
 80092f6:	230c      	movs	r3, #12
 80092f8:	6003      	str	r3, [r0, #0]
 80092fa:	e7d6      	b.n	80092aa <_free_r+0x26>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	1961      	adds	r1, r4, r5
 8009300:	428b      	cmp	r3, r1
 8009302:	bf04      	itt	eq
 8009304:	6819      	ldreq	r1, [r3, #0]
 8009306:	685b      	ldreq	r3, [r3, #4]
 8009308:	6063      	str	r3, [r4, #4]
 800930a:	bf04      	itt	eq
 800930c:	1949      	addeq	r1, r1, r5
 800930e:	6021      	streq	r1, [r4, #0]
 8009310:	6054      	str	r4, [r2, #4]
 8009312:	e7ca      	b.n	80092aa <_free_r+0x26>
 8009314:	b003      	add	sp, #12
 8009316:	bd30      	pop	{r4, r5, pc}
 8009318:	20001224 	.word	0x20001224

0800931c <__ssputs_r>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	688e      	ldr	r6, [r1, #8]
 8009322:	429e      	cmp	r6, r3
 8009324:	4682      	mov	sl, r0
 8009326:	460c      	mov	r4, r1
 8009328:	4690      	mov	r8, r2
 800932a:	461f      	mov	r7, r3
 800932c:	d838      	bhi.n	80093a0 <__ssputs_r+0x84>
 800932e:	898a      	ldrh	r2, [r1, #12]
 8009330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009334:	d032      	beq.n	800939c <__ssputs_r+0x80>
 8009336:	6825      	ldr	r5, [r4, #0]
 8009338:	6909      	ldr	r1, [r1, #16]
 800933a:	eba5 0901 	sub.w	r9, r5, r1
 800933e:	6965      	ldr	r5, [r4, #20]
 8009340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009348:	3301      	adds	r3, #1
 800934a:	444b      	add	r3, r9
 800934c:	106d      	asrs	r5, r5, #1
 800934e:	429d      	cmp	r5, r3
 8009350:	bf38      	it	cc
 8009352:	461d      	movcc	r5, r3
 8009354:	0553      	lsls	r3, r2, #21
 8009356:	d531      	bpl.n	80093bc <__ssputs_r+0xa0>
 8009358:	4629      	mov	r1, r5
 800935a:	f7ff fe79 	bl	8009050 <_malloc_r>
 800935e:	4606      	mov	r6, r0
 8009360:	b950      	cbnz	r0, 8009378 <__ssputs_r+0x5c>
 8009362:	230c      	movs	r3, #12
 8009364:	f8ca 3000 	str.w	r3, [sl]
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	6921      	ldr	r1, [r4, #16]
 800937a:	464a      	mov	r2, r9
 800937c:	f7ff fe32 	bl	8008fe4 <memcpy>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	6126      	str	r6, [r4, #16]
 800938e:	6165      	str	r5, [r4, #20]
 8009390:	444e      	add	r6, r9
 8009392:	eba5 0509 	sub.w	r5, r5, r9
 8009396:	6026      	str	r6, [r4, #0]
 8009398:	60a5      	str	r5, [r4, #8]
 800939a:	463e      	mov	r6, r7
 800939c:	42be      	cmp	r6, r7
 800939e:	d900      	bls.n	80093a2 <__ssputs_r+0x86>
 80093a0:	463e      	mov	r6, r7
 80093a2:	6820      	ldr	r0, [r4, #0]
 80093a4:	4632      	mov	r2, r6
 80093a6:	4641      	mov	r1, r8
 80093a8:	f000 faa8 	bl	80098fc <memmove>
 80093ac:	68a3      	ldr	r3, [r4, #8]
 80093ae:	1b9b      	subs	r3, r3, r6
 80093b0:	60a3      	str	r3, [r4, #8]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	4433      	add	r3, r6
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7db      	b.n	8009374 <__ssputs_r+0x58>
 80093bc:	462a      	mov	r2, r5
 80093be:	f000 fab7 	bl	8009930 <_realloc_r>
 80093c2:	4606      	mov	r6, r0
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1e1      	bne.n	800938c <__ssputs_r+0x70>
 80093c8:	6921      	ldr	r1, [r4, #16]
 80093ca:	4650      	mov	r0, sl
 80093cc:	f7ff ff5a 	bl	8009284 <_free_r>
 80093d0:	e7c7      	b.n	8009362 <__ssputs_r+0x46>
	...

080093d4 <_svfiprintf_r>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	4698      	mov	r8, r3
 80093da:	898b      	ldrh	r3, [r1, #12]
 80093dc:	061b      	lsls	r3, r3, #24
 80093de:	b09d      	sub	sp, #116	; 0x74
 80093e0:	4607      	mov	r7, r0
 80093e2:	460d      	mov	r5, r1
 80093e4:	4614      	mov	r4, r2
 80093e6:	d50e      	bpl.n	8009406 <_svfiprintf_r+0x32>
 80093e8:	690b      	ldr	r3, [r1, #16]
 80093ea:	b963      	cbnz	r3, 8009406 <_svfiprintf_r+0x32>
 80093ec:	2140      	movs	r1, #64	; 0x40
 80093ee:	f7ff fe2f 	bl	8009050 <_malloc_r>
 80093f2:	6028      	str	r0, [r5, #0]
 80093f4:	6128      	str	r0, [r5, #16]
 80093f6:	b920      	cbnz	r0, 8009402 <_svfiprintf_r+0x2e>
 80093f8:	230c      	movs	r3, #12
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e0d1      	b.n	80095a6 <_svfiprintf_r+0x1d2>
 8009402:	2340      	movs	r3, #64	; 0x40
 8009404:	616b      	str	r3, [r5, #20]
 8009406:	2300      	movs	r3, #0
 8009408:	9309      	str	r3, [sp, #36]	; 0x24
 800940a:	2320      	movs	r3, #32
 800940c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009410:	f8cd 800c 	str.w	r8, [sp, #12]
 8009414:	2330      	movs	r3, #48	; 0x30
 8009416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095c0 <_svfiprintf_r+0x1ec>
 800941a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800941e:	f04f 0901 	mov.w	r9, #1
 8009422:	4623      	mov	r3, r4
 8009424:	469a      	mov	sl, r3
 8009426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800942a:	b10a      	cbz	r2, 8009430 <_svfiprintf_r+0x5c>
 800942c:	2a25      	cmp	r2, #37	; 0x25
 800942e:	d1f9      	bne.n	8009424 <_svfiprintf_r+0x50>
 8009430:	ebba 0b04 	subs.w	fp, sl, r4
 8009434:	d00b      	beq.n	800944e <_svfiprintf_r+0x7a>
 8009436:	465b      	mov	r3, fp
 8009438:	4622      	mov	r2, r4
 800943a:	4629      	mov	r1, r5
 800943c:	4638      	mov	r0, r7
 800943e:	f7ff ff6d 	bl	800931c <__ssputs_r>
 8009442:	3001      	adds	r0, #1
 8009444:	f000 80aa 	beq.w	800959c <_svfiprintf_r+0x1c8>
 8009448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800944a:	445a      	add	r2, fp
 800944c:	9209      	str	r2, [sp, #36]	; 0x24
 800944e:	f89a 3000 	ldrb.w	r3, [sl]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80a2 	beq.w	800959c <_svfiprintf_r+0x1c8>
 8009458:	2300      	movs	r3, #0
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009462:	f10a 0a01 	add.w	sl, sl, #1
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	9307      	str	r3, [sp, #28]
 800946a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800946e:	931a      	str	r3, [sp, #104]	; 0x68
 8009470:	4654      	mov	r4, sl
 8009472:	2205      	movs	r2, #5
 8009474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009478:	4851      	ldr	r0, [pc, #324]	; (80095c0 <_svfiprintf_r+0x1ec>)
 800947a:	f7f6 fea9 	bl	80001d0 <memchr>
 800947e:	9a04      	ldr	r2, [sp, #16]
 8009480:	b9d8      	cbnz	r0, 80094ba <_svfiprintf_r+0xe6>
 8009482:	06d0      	lsls	r0, r2, #27
 8009484:	bf44      	itt	mi
 8009486:	2320      	movmi	r3, #32
 8009488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800948c:	0711      	lsls	r1, r2, #28
 800948e:	bf44      	itt	mi
 8009490:	232b      	movmi	r3, #43	; 0x2b
 8009492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009496:	f89a 3000 	ldrb.w	r3, [sl]
 800949a:	2b2a      	cmp	r3, #42	; 0x2a
 800949c:	d015      	beq.n	80094ca <_svfiprintf_r+0xf6>
 800949e:	9a07      	ldr	r2, [sp, #28]
 80094a0:	4654      	mov	r4, sl
 80094a2:	2000      	movs	r0, #0
 80094a4:	f04f 0c0a 	mov.w	ip, #10
 80094a8:	4621      	mov	r1, r4
 80094aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ae:	3b30      	subs	r3, #48	; 0x30
 80094b0:	2b09      	cmp	r3, #9
 80094b2:	d94e      	bls.n	8009552 <_svfiprintf_r+0x17e>
 80094b4:	b1b0      	cbz	r0, 80094e4 <_svfiprintf_r+0x110>
 80094b6:	9207      	str	r2, [sp, #28]
 80094b8:	e014      	b.n	80094e4 <_svfiprintf_r+0x110>
 80094ba:	eba0 0308 	sub.w	r3, r0, r8
 80094be:	fa09 f303 	lsl.w	r3, r9, r3
 80094c2:	4313      	orrs	r3, r2
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	46a2      	mov	sl, r4
 80094c8:	e7d2      	b.n	8009470 <_svfiprintf_r+0x9c>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	1d19      	adds	r1, r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	9103      	str	r1, [sp, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfbb      	ittet	lt
 80094d6:	425b      	neglt	r3, r3
 80094d8:	f042 0202 	orrlt.w	r2, r2, #2
 80094dc:	9307      	strge	r3, [sp, #28]
 80094de:	9307      	strlt	r3, [sp, #28]
 80094e0:	bfb8      	it	lt
 80094e2:	9204      	strlt	r2, [sp, #16]
 80094e4:	7823      	ldrb	r3, [r4, #0]
 80094e6:	2b2e      	cmp	r3, #46	; 0x2e
 80094e8:	d10c      	bne.n	8009504 <_svfiprintf_r+0x130>
 80094ea:	7863      	ldrb	r3, [r4, #1]
 80094ec:	2b2a      	cmp	r3, #42	; 0x2a
 80094ee:	d135      	bne.n	800955c <_svfiprintf_r+0x188>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	1d1a      	adds	r2, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	9203      	str	r2, [sp, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfb8      	it	lt
 80094fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009500:	3402      	adds	r4, #2
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095d0 <_svfiprintf_r+0x1fc>
 8009508:	7821      	ldrb	r1, [r4, #0]
 800950a:	2203      	movs	r2, #3
 800950c:	4650      	mov	r0, sl
 800950e:	f7f6 fe5f 	bl	80001d0 <memchr>
 8009512:	b140      	cbz	r0, 8009526 <_svfiprintf_r+0x152>
 8009514:	2340      	movs	r3, #64	; 0x40
 8009516:	eba0 000a 	sub.w	r0, r0, sl
 800951a:	fa03 f000 	lsl.w	r0, r3, r0
 800951e:	9b04      	ldr	r3, [sp, #16]
 8009520:	4303      	orrs	r3, r0
 8009522:	3401      	adds	r4, #1
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952a:	4826      	ldr	r0, [pc, #152]	; (80095c4 <_svfiprintf_r+0x1f0>)
 800952c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009530:	2206      	movs	r2, #6
 8009532:	f7f6 fe4d 	bl	80001d0 <memchr>
 8009536:	2800      	cmp	r0, #0
 8009538:	d038      	beq.n	80095ac <_svfiprintf_r+0x1d8>
 800953a:	4b23      	ldr	r3, [pc, #140]	; (80095c8 <_svfiprintf_r+0x1f4>)
 800953c:	bb1b      	cbnz	r3, 8009586 <_svfiprintf_r+0x1b2>
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	3307      	adds	r3, #7
 8009542:	f023 0307 	bic.w	r3, r3, #7
 8009546:	3308      	adds	r3, #8
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	4433      	add	r3, r6
 800954e:	9309      	str	r3, [sp, #36]	; 0x24
 8009550:	e767      	b.n	8009422 <_svfiprintf_r+0x4e>
 8009552:	fb0c 3202 	mla	r2, ip, r2, r3
 8009556:	460c      	mov	r4, r1
 8009558:	2001      	movs	r0, #1
 800955a:	e7a5      	b.n	80094a8 <_svfiprintf_r+0xd4>
 800955c:	2300      	movs	r3, #0
 800955e:	3401      	adds	r4, #1
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	4619      	mov	r1, r3
 8009564:	f04f 0c0a 	mov.w	ip, #10
 8009568:	4620      	mov	r0, r4
 800956a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800956e:	3a30      	subs	r2, #48	; 0x30
 8009570:	2a09      	cmp	r2, #9
 8009572:	d903      	bls.n	800957c <_svfiprintf_r+0x1a8>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0c5      	beq.n	8009504 <_svfiprintf_r+0x130>
 8009578:	9105      	str	r1, [sp, #20]
 800957a:	e7c3      	b.n	8009504 <_svfiprintf_r+0x130>
 800957c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009580:	4604      	mov	r4, r0
 8009582:	2301      	movs	r3, #1
 8009584:	e7f0      	b.n	8009568 <_svfiprintf_r+0x194>
 8009586:	ab03      	add	r3, sp, #12
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	462a      	mov	r2, r5
 800958c:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <_svfiprintf_r+0x1f8>)
 800958e:	a904      	add	r1, sp, #16
 8009590:	4638      	mov	r0, r7
 8009592:	f3af 8000 	nop.w
 8009596:	1c42      	adds	r2, r0, #1
 8009598:	4606      	mov	r6, r0
 800959a:	d1d6      	bne.n	800954a <_svfiprintf_r+0x176>
 800959c:	89ab      	ldrh	r3, [r5, #12]
 800959e:	065b      	lsls	r3, r3, #25
 80095a0:	f53f af2c 	bmi.w	80093fc <_svfiprintf_r+0x28>
 80095a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095a6:	b01d      	add	sp, #116	; 0x74
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	ab03      	add	r3, sp, #12
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	462a      	mov	r2, r5
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <_svfiprintf_r+0x1f8>)
 80095b4:	a904      	add	r1, sp, #16
 80095b6:	4638      	mov	r0, r7
 80095b8:	f000 f87a 	bl	80096b0 <_printf_i>
 80095bc:	e7eb      	b.n	8009596 <_svfiprintf_r+0x1c2>
 80095be:	bf00      	nop
 80095c0:	08009ab8 	.word	0x08009ab8
 80095c4:	08009ac2 	.word	0x08009ac2
 80095c8:	00000000 	.word	0x00000000
 80095cc:	0800931d 	.word	0x0800931d
 80095d0:	08009abe 	.word	0x08009abe

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f0:	4607      	mov	r7, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc26      	bgt.n	800966a <_printf_common+0x96>
 800961c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009620:	1e13      	subs	r3, r2, #0
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42b      	bmi.n	8009684 <_printf_common+0xb0>
 800962c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d01e      	beq.n	8009678 <_printf_common+0xa4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	68e5      	ldr	r5, [r4, #12]
 800963e:	6832      	ldr	r2, [r6, #0]
 8009640:	f003 0306 	and.w	r3, r3, #6
 8009644:	2b04      	cmp	r3, #4
 8009646:	bf08      	it	eq
 8009648:	1aad      	subeq	r5, r5, r2
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	bf0c      	ite	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	2500      	movne	r5, #0
 8009656:	4293      	cmp	r3, r2
 8009658:	bfc4      	itt	gt
 800965a:	1a9b      	subgt	r3, r3, r2
 800965c:	18ed      	addgt	r5, r5, r3
 800965e:	2600      	movs	r6, #0
 8009660:	341a      	adds	r4, #26
 8009662:	42b5      	cmp	r5, r6
 8009664:	d11a      	bne.n	800969c <_printf_common+0xc8>
 8009666:	2000      	movs	r0, #0
 8009668:	e008      	b.n	800967c <_printf_common+0xa8>
 800966a:	2301      	movs	r3, #1
 800966c:	4652      	mov	r2, sl
 800966e:	4649      	mov	r1, r9
 8009670:	4638      	mov	r0, r7
 8009672:	47c0      	blx	r8
 8009674:	3001      	adds	r0, #1
 8009676:	d103      	bne.n	8009680 <_printf_common+0xac>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	3501      	adds	r5, #1
 8009682:	e7c6      	b.n	8009612 <_printf_common+0x3e>
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	2030      	movs	r0, #48	; 0x30
 800968a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968e:	4422      	add	r2, r4
 8009690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009698:	3302      	adds	r3, #2
 800969a:	e7c7      	b.n	800962c <_printf_common+0x58>
 800969c:	2301      	movs	r3, #1
 800969e:	4622      	mov	r2, r4
 80096a0:	4649      	mov	r1, r9
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c0      	blx	r8
 80096a6:	3001      	adds	r0, #1
 80096a8:	d0e6      	beq.n	8009678 <_printf_common+0xa4>
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7d9      	b.n	8009662 <_printf_common+0x8e>
	...

080096b0 <_printf_i>:
 80096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	7e0f      	ldrb	r7, [r1, #24]
 80096b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096b8:	2f78      	cmp	r7, #120	; 0x78
 80096ba:	4691      	mov	r9, r2
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	469a      	mov	sl, r3
 80096c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096c6:	d807      	bhi.n	80096d8 <_printf_i+0x28>
 80096c8:	2f62      	cmp	r7, #98	; 0x62
 80096ca:	d80a      	bhi.n	80096e2 <_printf_i+0x32>
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	f000 80d8 	beq.w	8009882 <_printf_i+0x1d2>
 80096d2:	2f58      	cmp	r7, #88	; 0x58
 80096d4:	f000 80a3 	beq.w	800981e <_printf_i+0x16e>
 80096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e0:	e03a      	b.n	8009758 <_printf_i+0xa8>
 80096e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096e6:	2b15      	cmp	r3, #21
 80096e8:	d8f6      	bhi.n	80096d8 <_printf_i+0x28>
 80096ea:	a101      	add	r1, pc, #4	; (adr r1, 80096f0 <_printf_i+0x40>)
 80096ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f0:	08009749 	.word	0x08009749
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	080096d9 	.word	0x080096d9
 80096fc:	080096d9 	.word	0x080096d9
 8009700:	080096d9 	.word	0x080096d9
 8009704:	080096d9 	.word	0x080096d9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096d9 	.word	0x080096d9
 8009710:	080096d9 	.word	0x080096d9
 8009714:	080096d9 	.word	0x080096d9
 8009718:	080096d9 	.word	0x080096d9
 800971c:	08009869 	.word	0x08009869
 8009720:	0800978d 	.word	0x0800978d
 8009724:	0800984b 	.word	0x0800984b
 8009728:	080096d9 	.word	0x080096d9
 800972c:	080096d9 	.word	0x080096d9
 8009730:	0800988b 	.word	0x0800988b
 8009734:	080096d9 	.word	0x080096d9
 8009738:	0800978d 	.word	0x0800978d
 800973c:	080096d9 	.word	0x080096d9
 8009740:	080096d9 	.word	0x080096d9
 8009744:	08009853 	.word	0x08009853
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	602a      	str	r2, [r5, #0]
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e0a3      	b.n	80098a4 <_printf_i+0x1f4>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	6829      	ldr	r1, [r5, #0]
 8009760:	0606      	lsls	r6, r0, #24
 8009762:	f101 0304 	add.w	r3, r1, #4
 8009766:	d50a      	bpl.n	800977e <_printf_i+0xce>
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	2e00      	cmp	r6, #0
 800976e:	da03      	bge.n	8009778 <_printf_i+0xc8>
 8009770:	232d      	movs	r3, #45	; 0x2d
 8009772:	4276      	negs	r6, r6
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	485e      	ldr	r0, [pc, #376]	; (80098f4 <_printf_i+0x244>)
 800977a:	230a      	movs	r3, #10
 800977c:	e019      	b.n	80097b2 <_printf_i+0x102>
 800977e:	680e      	ldr	r6, [r1, #0]
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009786:	bf18      	it	ne
 8009788:	b236      	sxthne	r6, r6
 800978a:	e7ef      	b.n	800976c <_printf_i+0xbc>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	6029      	str	r1, [r5, #0]
 8009794:	0601      	lsls	r1, r0, #24
 8009796:	d501      	bpl.n	800979c <_printf_i+0xec>
 8009798:	681e      	ldr	r6, [r3, #0]
 800979a:	e002      	b.n	80097a2 <_printf_i+0xf2>
 800979c:	0646      	lsls	r6, r0, #25
 800979e:	d5fb      	bpl.n	8009798 <_printf_i+0xe8>
 80097a0:	881e      	ldrh	r6, [r3, #0]
 80097a2:	4854      	ldr	r0, [pc, #336]	; (80098f4 <_printf_i+0x244>)
 80097a4:	2f6f      	cmp	r7, #111	; 0x6f
 80097a6:	bf0c      	ite	eq
 80097a8:	2308      	moveq	r3, #8
 80097aa:	230a      	movne	r3, #10
 80097ac:	2100      	movs	r1, #0
 80097ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097b2:	6865      	ldr	r5, [r4, #4]
 80097b4:	60a5      	str	r5, [r4, #8]
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	bfa2      	ittt	ge
 80097ba:	6821      	ldrge	r1, [r4, #0]
 80097bc:	f021 0104 	bicge.w	r1, r1, #4
 80097c0:	6021      	strge	r1, [r4, #0]
 80097c2:	b90e      	cbnz	r6, 80097c8 <_printf_i+0x118>
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d04d      	beq.n	8009864 <_printf_i+0x1b4>
 80097c8:	4615      	mov	r5, r2
 80097ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80097ce:	fb03 6711 	mls	r7, r3, r1, r6
 80097d2:	5dc7      	ldrb	r7, [r0, r7]
 80097d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d8:	4637      	mov	r7, r6
 80097da:	42bb      	cmp	r3, r7
 80097dc:	460e      	mov	r6, r1
 80097de:	d9f4      	bls.n	80097ca <_printf_i+0x11a>
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d10b      	bne.n	80097fc <_printf_i+0x14c>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	07de      	lsls	r6, r3, #31
 80097e8:	d508      	bpl.n	80097fc <_printf_i+0x14c>
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4299      	cmp	r1, r3
 80097f0:	bfde      	ittt	le
 80097f2:	2330      	movle	r3, #48	; 0x30
 80097f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097fc:	1b52      	subs	r2, r2, r5
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	f8cd a000 	str.w	sl, [sp]
 8009804:	464b      	mov	r3, r9
 8009806:	aa03      	add	r2, sp, #12
 8009808:	4621      	mov	r1, r4
 800980a:	4640      	mov	r0, r8
 800980c:	f7ff fee2 	bl	80095d4 <_printf_common>
 8009810:	3001      	adds	r0, #1
 8009812:	d14c      	bne.n	80098ae <_printf_i+0x1fe>
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	b004      	add	sp, #16
 800981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981e:	4835      	ldr	r0, [pc, #212]	; (80098f4 <_printf_i+0x244>)
 8009820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009824:	6829      	ldr	r1, [r5, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f851 6b04 	ldr.w	r6, [r1], #4
 800982c:	6029      	str	r1, [r5, #0]
 800982e:	061d      	lsls	r5, r3, #24
 8009830:	d514      	bpl.n	800985c <_printf_i+0x1ac>
 8009832:	07df      	lsls	r7, r3, #31
 8009834:	bf44      	itt	mi
 8009836:	f043 0320 	orrmi.w	r3, r3, #32
 800983a:	6023      	strmi	r3, [r4, #0]
 800983c:	b91e      	cbnz	r6, 8009846 <_printf_i+0x196>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f023 0320 	bic.w	r3, r3, #32
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	2310      	movs	r3, #16
 8009848:	e7b0      	b.n	80097ac <_printf_i+0xfc>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f043 0320 	orr.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	2378      	movs	r3, #120	; 0x78
 8009854:	4828      	ldr	r0, [pc, #160]	; (80098f8 <_printf_i+0x248>)
 8009856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800985a:	e7e3      	b.n	8009824 <_printf_i+0x174>
 800985c:	0659      	lsls	r1, r3, #25
 800985e:	bf48      	it	mi
 8009860:	b2b6      	uxthmi	r6, r6
 8009862:	e7e6      	b.n	8009832 <_printf_i+0x182>
 8009864:	4615      	mov	r5, r2
 8009866:	e7bb      	b.n	80097e0 <_printf_i+0x130>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	6826      	ldr	r6, [r4, #0]
 800986c:	6961      	ldr	r1, [r4, #20]
 800986e:	1d18      	adds	r0, r3, #4
 8009870:	6028      	str	r0, [r5, #0]
 8009872:	0635      	lsls	r5, r6, #24
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	d501      	bpl.n	800987c <_printf_i+0x1cc>
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	e002      	b.n	8009882 <_printf_i+0x1d2>
 800987c:	0670      	lsls	r0, r6, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0x1c8>
 8009880:	8019      	strh	r1, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	4615      	mov	r5, r2
 8009888:	e7ba      	b.n	8009800 <_printf_i+0x150>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	602a      	str	r2, [r5, #0]
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	2100      	movs	r1, #0
 8009896:	4628      	mov	r0, r5
 8009898:	f7f6 fc9a 	bl	80001d0 <memchr>
 800989c:	b108      	cbz	r0, 80098a2 <_printf_i+0x1f2>
 800989e:	1b40      	subs	r0, r0, r5
 80098a0:	6060      	str	r0, [r4, #4]
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	2300      	movs	r3, #0
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ac:	e7a8      	b.n	8009800 <_printf_i+0x150>
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0ab      	beq.n	8009814 <_printf_i+0x164>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	d413      	bmi.n	80098ea <_printf_i+0x23a>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	4298      	cmp	r0, r3
 80098c8:	bfb8      	it	lt
 80098ca:	4618      	movlt	r0, r3
 80098cc:	e7a4      	b.n	8009818 <_printf_i+0x168>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4632      	mov	r2, r6
 80098d2:	4649      	mov	r1, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	47d0      	blx	sl
 80098d8:	3001      	adds	r0, #1
 80098da:	d09b      	beq.n	8009814 <_printf_i+0x164>
 80098dc:	3501      	adds	r5, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dcf2      	bgt.n	80098ce <_printf_i+0x21e>
 80098e8:	e7eb      	b.n	80098c2 <_printf_i+0x212>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f104 0619 	add.w	r6, r4, #25
 80098f0:	e7f5      	b.n	80098de <_printf_i+0x22e>
 80098f2:	bf00      	nop
 80098f4:	08009ac9 	.word	0x08009ac9
 80098f8:	08009ada 	.word	0x08009ada

080098fc <memmove>:
 80098fc:	4288      	cmp	r0, r1
 80098fe:	b510      	push	{r4, lr}
 8009900:	eb01 0402 	add.w	r4, r1, r2
 8009904:	d902      	bls.n	800990c <memmove+0x10>
 8009906:	4284      	cmp	r4, r0
 8009908:	4623      	mov	r3, r4
 800990a:	d807      	bhi.n	800991c <memmove+0x20>
 800990c:	1e43      	subs	r3, r0, #1
 800990e:	42a1      	cmp	r1, r4
 8009910:	d008      	beq.n	8009924 <memmove+0x28>
 8009912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009916:	f803 2f01 	strb.w	r2, [r3, #1]!
 800991a:	e7f8      	b.n	800990e <memmove+0x12>
 800991c:	4402      	add	r2, r0
 800991e:	4601      	mov	r1, r0
 8009920:	428a      	cmp	r2, r1
 8009922:	d100      	bne.n	8009926 <memmove+0x2a>
 8009924:	bd10      	pop	{r4, pc}
 8009926:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800992a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800992e:	e7f7      	b.n	8009920 <memmove+0x24>

08009930 <_realloc_r>:
 8009930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009934:	4680      	mov	r8, r0
 8009936:	4614      	mov	r4, r2
 8009938:	460e      	mov	r6, r1
 800993a:	b921      	cbnz	r1, 8009946 <_realloc_r+0x16>
 800993c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4611      	mov	r1, r2
 8009942:	f7ff bb85 	b.w	8009050 <_malloc_r>
 8009946:	b92a      	cbnz	r2, 8009954 <_realloc_r+0x24>
 8009948:	f7ff fc9c 	bl	8009284 <_free_r>
 800994c:	4625      	mov	r5, r4
 800994e:	4628      	mov	r0, r5
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	f000 f81b 	bl	800998e <_malloc_usable_size_r>
 8009958:	4284      	cmp	r4, r0
 800995a:	4607      	mov	r7, r0
 800995c:	d802      	bhi.n	8009964 <_realloc_r+0x34>
 800995e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009962:	d812      	bhi.n	800998a <_realloc_r+0x5a>
 8009964:	4621      	mov	r1, r4
 8009966:	4640      	mov	r0, r8
 8009968:	f7ff fb72 	bl	8009050 <_malloc_r>
 800996c:	4605      	mov	r5, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d0ed      	beq.n	800994e <_realloc_r+0x1e>
 8009972:	42bc      	cmp	r4, r7
 8009974:	4622      	mov	r2, r4
 8009976:	4631      	mov	r1, r6
 8009978:	bf28      	it	cs
 800997a:	463a      	movcs	r2, r7
 800997c:	f7ff fb32 	bl	8008fe4 <memcpy>
 8009980:	4631      	mov	r1, r6
 8009982:	4640      	mov	r0, r8
 8009984:	f7ff fc7e 	bl	8009284 <_free_r>
 8009988:	e7e1      	b.n	800994e <_realloc_r+0x1e>
 800998a:	4635      	mov	r5, r6
 800998c:	e7df      	b.n	800994e <_realloc_r+0x1e>

0800998e <_malloc_usable_size_r>:
 800998e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009992:	1f18      	subs	r0, r3, #4
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfbc      	itt	lt
 8009998:	580b      	ldrlt	r3, [r1, r0]
 800999a:	18c0      	addlt	r0, r0, r3
 800999c:	4770      	bx	lr
	...

080099a0 <_init>:
 80099a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a2:	bf00      	nop
 80099a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a6:	bc08      	pop	{r3}
 80099a8:	469e      	mov	lr, r3
 80099aa:	4770      	bx	lr

080099ac <_fini>:
 80099ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ae:	bf00      	nop
 80099b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b2:	bc08      	pop	{r3}
 80099b4:	469e      	mov	lr, r3
 80099b6:	4770      	bx	lr
